
BNO055_UART_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800a0b0  0800a0b0  0001a0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ac  0800a5ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b4  0800a5b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5b8  0800a5b8  0001a5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000e4  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6e2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a2c  00000000  00000000  0002d8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  0002f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a70  00000000  00000000  0002fe20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219f8  00000000  00000000  00030890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5e8  00000000  00000000  00052288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c799c  00000000  00000000  0005f870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012720c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004438  00000000  00000000  0012725c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a098 	.word	0x0800a098

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a098 	.word	0x0800a098

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b0af      	sub	sp, #188	; 0xbc
 8000ffc:	af2a      	add	r7, sp, #168	; 0xa8
 8000ffe:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	799b      	ldrb	r3, [r3, #6]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8001010:	687c      	ldr	r4, [r7, #4]
 8001012:	2301      	movs	r3, #1
 8001014:	9329      	str	r3, [sp, #164]	; 0xa4
 8001016:	f107 030e 	add.w	r3, r7, #14
 800101a:	9328      	str	r3, [sp, #160]	; 0xa0
 800101c:	2300      	movs	r3, #0
 800101e:	9327      	str	r3, [sp, #156]	; 0x9c
 8001020:	4668      	mov	r0, sp
 8001022:	f104 0310 	add.w	r3, r4, #16
 8001026:	229c      	movs	r2, #156	; 0x9c
 8001028:	4619      	mov	r1, r3
 800102a:	f004 fbbf 	bl	80057ac <memcpy>
 800102e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001032:	f001 fb4e 	bl	80026d2 <bno055_read_regs>
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <bno055_init+0x4c>
        return err;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	e0b6      	b.n	80011b2 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	2ba0      	cmp	r3, #160	; 0xa0
 8001048:	d001      	beq.n	800104e <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 800104a:	2306      	movs	r3, #6
 800104c:	e0b1      	b.n	80011b2 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f001 fa74 	bl	800253e <bno055_set_opmode>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <bno055_init+0x6c>
        return err;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	e0a6      	b.n	80011b2 <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8001064:	2002      	movs	r0, #2
 8001066:	f002 f80d 	bl	8003084 <HAL_Delay>
    bno055_reset(imu);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f001 faeb 	bl	8002646 <bno055_reset>
    HAL_Delay(5000);
 8001070:	f241 3088 	movw	r0, #5000	; 0x1388
 8001074:	f002 f806 	bl	8003084 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8001078:	2100      	movs	r1, #0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f001 fa86 	bl	800258c <bno055_set_pwr_mode>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <bno055_init+0x96>
        return err;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	e091      	b.n	80011b2 <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 800108e:	200a      	movs	r0, #10
 8001090:	f001 fff8 	bl	8003084 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001094:	2100      	movs	r1, #0
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f001 fb7e 	bl	8002798 <bno055_set_page>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <bno055_init+0xb2>
        return err;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	e083      	b.n	80011b2 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80010aa:	200c      	movs	r0, #12
 80010ac:	f001 ffea 	bl	8003084 <HAL_Delay>
    bno055_on(imu);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f001 faeb 	bl	800268c <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	791b      	ldrb	r3, [r3, #4]
 80010ba:	4619      	mov	r1, r3
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f001 fa3e 	bl	800253e <bno055_set_opmode>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <bno055_init+0xd8>
        return err;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	e070      	b.n	80011b2 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80010d0:	2018      	movs	r0, #24
 80010d2:	f001 ffd7 	bl	8003084 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a38      	ldr	r2, [pc, #224]	; (80011bc <bno055_init+0x1c4>)
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a38      	ldr	r2, [pc, #224]	; (80011c0 <bno055_init+0x1c8>)
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a37      	ldr	r2, [pc, #220]	; (80011c4 <bno055_init+0x1cc>)
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a37      	ldr	r2, [pc, #220]	; (80011c8 <bno055_init+0x1d0>)
 80010ec:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a36      	ldr	r2, [pc, #216]	; (80011cc <bno055_init+0x1d4>)
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a36      	ldr	r2, [pc, #216]	; (80011d0 <bno055_init+0x1d8>)
 80010f8:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a35      	ldr	r2, [pc, #212]	; (80011d4 <bno055_init+0x1dc>)
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a35      	ldr	r2, [pc, #212]	; (80011d8 <bno055_init+0x1e0>)
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a34      	ldr	r2, [pc, #208]	; (80011dc <bno055_init+0x1e4>)
 800110a:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a34      	ldr	r2, [pc, #208]	; (80011e0 <bno055_init+0x1e8>)
 8001110:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a33      	ldr	r2, [pc, #204]	; (80011e4 <bno055_init+0x1ec>)
 8001116:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a33      	ldr	r2, [pc, #204]	; (80011e8 <bno055_init+0x1f0>)
 800111c:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a32      	ldr	r2, [pc, #200]	; (80011ec <bno055_init+0x1f4>)
 8001122:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <bno055_init+0x1f8>)
 8001128:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a31      	ldr	r2, [pc, #196]	; (80011f4 <bno055_init+0x1fc>)
 800112e:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a31      	ldr	r2, [pc, #196]	; (80011f8 <bno055_init+0x200>)
 8001134:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a30      	ldr	r2, [pc, #192]	; (80011fc <bno055_init+0x204>)
 800113a:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a30      	ldr	r2, [pc, #192]	; (8001200 <bno055_init+0x208>)
 8001140:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a2f      	ldr	r2, [pc, #188]	; (8001204 <bno055_init+0x20c>)
 8001146:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <bno055_init+0x210>)
 800114c:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a2e      	ldr	r2, [pc, #184]	; (800120c <bno055_init+0x214>)
 8001152:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <bno055_init+0x218>)
 8001158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a2d      	ldr	r2, [pc, #180]	; (8001214 <bno055_init+0x21c>)
 8001160:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <bno055_init+0x220>)
 8001166:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a2c      	ldr	r2, [pc, #176]	; (800121c <bno055_init+0x224>)
 800116c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a2b      	ldr	r2, [pc, #172]	; (8001220 <bno055_init+0x228>)
 8001174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a2a      	ldr	r2, [pc, #168]	; (8001224 <bno055_init+0x22c>)
 800117c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a29      	ldr	r2, [pc, #164]	; (8001228 <bno055_init+0x230>)
 8001184:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a28      	ldr	r2, [pc, #160]	; (800122c <bno055_init+0x234>)
 800118c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a27      	ldr	r2, [pc, #156]	; (8001230 <bno055_init+0x238>)
 8001194:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a26      	ldr	r2, [pc, #152]	; (8001234 <bno055_init+0x23c>)
 800119c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <bno055_init+0x240>)
 80011a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a24      	ldr	r2, [pc, #144]	; (800123c <bno055_init+0x244>)
 80011ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	08001241 	.word	0x08001241
 80011c0:	080012a9 	.word	0x080012a9
 80011c4:	08001329 	.word	0x08001329
 80011c8:	080013a9 	.word	0x080013a9
 80011cc:	08001429 	.word	0x08001429
 80011d0:	080014f5 	.word	0x080014f5
 80011d4:	08001575 	.word	0x08001575
 80011d8:	080015f5 	.word	0x080015f5
 80011dc:	08001675 	.word	0x08001675
 80011e0:	08001741 	.word	0x08001741
 80011e4:	080017c1 	.word	0x080017c1
 80011e8:	08001841 	.word	0x08001841
 80011ec:	080018c1 	.word	0x080018c1
 80011f0:	0800198d 	.word	0x0800198d
 80011f4:	080019f9 	.word	0x080019f9
 80011f8:	08001a65 	.word	0x08001a65
 80011fc:	08001ad1 	.word	0x08001ad1
 8001200:	08001b85 	.word	0x08001b85
 8001204:	08001c09 	.word	0x08001c09
 8001208:	08001c8d 	.word	0x08001c8d
 800120c:	08001d11 	.word	0x08001d11
 8001210:	08001ddd 	.word	0x08001ddd
 8001214:	08001e61 	.word	0x08001e61
 8001218:	08001ee5 	.word	0x08001ee5
 800121c:	08001f69 	.word	0x08001f69
 8001220:	08002035 	.word	0x08002035
 8001224:	080020a5 	.word	0x080020a5
 8001228:	08002115 	.word	0x08002115
 800122c:	08002185 	.word	0x08002185
 8001230:	080021f5 	.word	0x080021f5
 8001234:	080022d1 	.word	0x080022d1
 8001238:	080023a1 	.word	0x080023a1
 800123c:	0800246f 	.word	0x0800246f

08001240 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b0af      	sub	sp, #188	; 0xbc
 8001244:	af2a      	add	r7, sp, #168	; 0xa8
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 800124e:	687c      	ldr	r4, [r7, #4]
 8001250:	2301      	movs	r3, #1
 8001252:	9329      	str	r3, [sp, #164]	; 0xa4
 8001254:	f107 030e 	add.w	r3, r7, #14
 8001258:	9328      	str	r3, [sp, #160]	; 0xa0
 800125a:	2334      	movs	r3, #52	; 0x34
 800125c:	9327      	str	r3, [sp, #156]	; 0x9c
 800125e:	4668      	mov	r0, sp
 8001260:	f104 0310 	add.w	r3, r4, #16
 8001264:	229c      	movs	r2, #156	; 0x9c
 8001266:	4619      	mov	r1, r3
 8001268:	f004 faa0 	bl	80057ac <memcpy>
 800126c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001270:	f001 fa2f 	bl	80026d2 <bno055_read_regs>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <bno055_temperature+0x42>
        return err;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	e00d      	b.n	800129e <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7bdb      	ldrb	r3, [r3, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <bno055_temperature+0x54>
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	b25b      	sxtb	r3, r3
 8001292:	e001      	b.n	8001298 <bno055_temperature+0x58>
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	b25b      	sxtb	r3, r3
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
	...

080012a8 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b0af      	sub	sp, #188	; 0xbc
 80012ac:	af2a      	add	r7, sp, #168	; 0xa8
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 80012b2:	687c      	ldr	r4, [r7, #4]
 80012b4:	2302      	movs	r3, #2
 80012b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80012be:	2308      	movs	r3, #8
 80012c0:	9327      	str	r3, [sp, #156]	; 0x9c
 80012c2:	4668      	mov	r0, sp
 80012c4:	f104 0310 	add.w	r3, r4, #16
 80012c8:	229c      	movs	r2, #156	; 0x9c
 80012ca:	4619      	mov	r1, r3
 80012cc:	f004 fa6e 	bl	80057ac <memcpy>
 80012d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012d4:	f001 f9fd 	bl	80026d2 <bno055_read_regs>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <bno055_acc_x+0x3e>
        return err;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	e019      	b.n	800131a <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	7b3b      	ldrb	r3, [r7, #12]
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <bno055_acc_x+0x62>
 8001304:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001324 <bno055_acc_x+0x7c>
 8001308:	e001      	b.n	800130e <bno055_acc_x+0x66>
 800130a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800130e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001318:	2300      	movs	r3, #0
};
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	42c80000 	.word	0x42c80000

08001328 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b0af      	sub	sp, #188	; 0xbc
 800132c:	af2a      	add	r7, sp, #168	; 0xa8
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001332:	687c      	ldr	r4, [r7, #4]
 8001334:	2302      	movs	r3, #2
 8001336:	9329      	str	r3, [sp, #164]	; 0xa4
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	9328      	str	r3, [sp, #160]	; 0xa0
 800133e:	230a      	movs	r3, #10
 8001340:	9327      	str	r3, [sp, #156]	; 0x9c
 8001342:	4668      	mov	r0, sp
 8001344:	f104 0310 	add.w	r3, r4, #16
 8001348:	229c      	movs	r2, #156	; 0x9c
 800134a:	4619      	mov	r1, r3
 800134c:	f004 fa2e 	bl	80057ac <memcpy>
 8001350:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001354:	f001 f9bd 	bl	80026d2 <bno055_read_regs>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <bno055_acc_y+0x3e>
        return err;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	e019      	b.n	800139a <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001366:	7b7b      	ldrb	r3, [r7, #13]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	7b3b      	ldrb	r3, [r7, #12]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21b      	sxth	r3, r3
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <bno055_acc_y+0x62>
 8001384:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80013a4 <bno055_acc_y+0x7c>
 8001388:	e001      	b.n	800138e <bno055_acc_y+0x66>
 800138a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800138e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001398:	2300      	movs	r3, #0
};
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	42c80000 	.word	0x42c80000

080013a8 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b0af      	sub	sp, #188	; 0xbc
 80013ac:	af2a      	add	r7, sp, #168	; 0xa8
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80013b2:	687c      	ldr	r4, [r7, #4]
 80013b4:	2302      	movs	r3, #2
 80013b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80013be:	230c      	movs	r3, #12
 80013c0:	9327      	str	r3, [sp, #156]	; 0x9c
 80013c2:	4668      	mov	r0, sp
 80013c4:	f104 0310 	add.w	r3, r4, #16
 80013c8:	229c      	movs	r2, #156	; 0x9c
 80013ca:	4619      	mov	r1, r3
 80013cc:	f004 f9ee 	bl	80057ac <memcpy>
 80013d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013d4:	f001 f97d 	bl	80026d2 <bno055_read_regs>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <bno055_acc_z+0x3e>
        return err;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	e019      	b.n	800141a <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80013e6:	7b7b      	ldrb	r3, [r7, #13]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <bno055_acc_z+0x62>
 8001404:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001424 <bno055_acc_z+0x7c>
 8001408:	e001      	b.n	800140e <bno055_acc_z+0x66>
 800140a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001418:	2300      	movs	r3, #0
};
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	42c80000 	.word	0x42c80000

08001428 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b0b1      	sub	sp, #196	; 0xc4
 800142c:	af2a      	add	r7, sp, #168	; 0xa8
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001432:	687c      	ldr	r4, [r7, #4]
 8001434:	2306      	movs	r3, #6
 8001436:	9329      	str	r3, [sp, #164]	; 0xa4
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	9328      	str	r3, [sp, #160]	; 0xa0
 800143e:	2308      	movs	r3, #8
 8001440:	9327      	str	r3, [sp, #156]	; 0x9c
 8001442:	4668      	mov	r0, sp
 8001444:	f104 0310 	add.w	r3, r4, #16
 8001448:	229c      	movs	r2, #156	; 0x9c
 800144a:	4619      	mov	r1, r3
 800144c:	f004 f9ae 	bl	80057ac <memcpy>
 8001450:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001454:	f001 f93d 	bl	80026d2 <bno055_read_regs>
 8001458:	4603      	mov	r3, r0
 800145a:	75fb      	strb	r3, [r7, #23]
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <bno055_acc+0x3e>
        return err;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	e03f      	b.n	80014e6 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <bno055_acc+0x4a>
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <bno055_acc+0xc8>)
 8001470:	e001      	b.n	8001476 <bno055_acc+0x4e>
 8001472:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001476:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001478:	7a7b      	ldrb	r3, [r7, #9]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21a      	sxth	r2, r3
 800147e:	7a3b      	ldrb	r3, [r7, #8]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21b      	sxth	r3, r3
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800148e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800149c:	7afb      	ldrb	r3, [r7, #11]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	7abb      	ldrb	r3, [r7, #10]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80014b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	7b3b      	ldrb	r3, [r7, #12]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80014e4:	2300      	movs	r3, #0
};
 80014e6:	4618      	mov	r0, r3
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	42c80000 	.word	0x42c80000

080014f4 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b0af      	sub	sp, #188	; 0xbc
 80014f8:	af2a      	add	r7, sp, #168	; 0xa8
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80014fe:	687c      	ldr	r4, [r7, #4]
 8001500:	2302      	movs	r3, #2
 8001502:	9329      	str	r3, [sp, #164]	; 0xa4
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	9328      	str	r3, [sp, #160]	; 0xa0
 800150a:	2328      	movs	r3, #40	; 0x28
 800150c:	9327      	str	r3, [sp, #156]	; 0x9c
 800150e:	4668      	mov	r0, sp
 8001510:	f104 0310 	add.w	r3, r4, #16
 8001514:	229c      	movs	r2, #156	; 0x9c
 8001516:	4619      	mov	r1, r3
 8001518:	f004 f948 	bl	80057ac <memcpy>
 800151c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001520:	f001 f8d7 	bl	80026d2 <bno055_read_regs>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <bno055_linear_acc_x+0x3e>
        return err;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	e019      	b.n	8001566 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001532:	7b7b      	ldrb	r3, [r7, #13]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21a      	sxth	r2, r3
 8001538:	7b3b      	ldrb	r3, [r7, #12]
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21b      	sxth	r3, r3
 8001540:	ee07 3a90 	vmov	s15, r3
 8001544:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <bno055_linear_acc_x+0x62>
 8001550:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001570 <bno055_linear_acc_x+0x7c>
 8001554:	e001      	b.n	800155a <bno055_linear_acc_x+0x66>
 8001556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800155a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001564:	2300      	movs	r3, #0
};
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	bf00      	nop
 8001570:	42c80000 	.word	0x42c80000

08001574 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b0af      	sub	sp, #188	; 0xbc
 8001578:	af2a      	add	r7, sp, #168	; 0xa8
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800157e:	687c      	ldr	r4, [r7, #4]
 8001580:	2302      	movs	r3, #2
 8001582:	9329      	str	r3, [sp, #164]	; 0xa4
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	9328      	str	r3, [sp, #160]	; 0xa0
 800158a:	232a      	movs	r3, #42	; 0x2a
 800158c:	9327      	str	r3, [sp, #156]	; 0x9c
 800158e:	4668      	mov	r0, sp
 8001590:	f104 0310 	add.w	r3, r4, #16
 8001594:	229c      	movs	r2, #156	; 0x9c
 8001596:	4619      	mov	r1, r3
 8001598:	f004 f908 	bl	80057ac <memcpy>
 800159c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015a0:	f001 f897 	bl	80026d2 <bno055_read_regs>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <bno055_linear_acc_y+0x3e>
        return err;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	e019      	b.n	80015e6 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80015b2:	7b7b      	ldrb	r3, [r7, #13]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	7b3b      	ldrb	r3, [r7, #12]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21b      	sxth	r3, r3
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <bno055_linear_acc_y+0x62>
 80015d0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80015f0 <bno055_linear_acc_y+0x7c>
 80015d4:	e001      	b.n	80015da <bno055_linear_acc_y+0x66>
 80015d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80015da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80015e4:	2300      	movs	r3, #0
};
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	42c80000 	.word	0x42c80000

080015f4 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b0af      	sub	sp, #188	; 0xbc
 80015f8:	af2a      	add	r7, sp, #168	; 0xa8
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80015fe:	687c      	ldr	r4, [r7, #4]
 8001600:	2302      	movs	r3, #2
 8001602:	9329      	str	r3, [sp, #164]	; 0xa4
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	9328      	str	r3, [sp, #160]	; 0xa0
 800160a:	232c      	movs	r3, #44	; 0x2c
 800160c:	9327      	str	r3, [sp, #156]	; 0x9c
 800160e:	4668      	mov	r0, sp
 8001610:	f104 0310 	add.w	r3, r4, #16
 8001614:	229c      	movs	r2, #156	; 0x9c
 8001616:	4619      	mov	r1, r3
 8001618:	f004 f8c8 	bl	80057ac <memcpy>
 800161c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001620:	f001 f857 	bl	80026d2 <bno055_read_regs>
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <bno055_linear_acc_z+0x3e>
        return err;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	e019      	b.n	8001666 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	7b3b      	ldrb	r3, [r7, #12]
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21b      	sxth	r3, r3
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <bno055_linear_acc_z+0x62>
 8001650:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001670 <bno055_linear_acc_z+0x7c>
 8001654:	e001      	b.n	800165a <bno055_linear_acc_z+0x66>
 8001656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800165a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001664:	2300      	movs	r3, #0
};
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	42c80000 	.word	0x42c80000

08001674 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b0b1      	sub	sp, #196	; 0xc4
 8001678:	af2a      	add	r7, sp, #168	; 0xa8
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 800167e:	687c      	ldr	r4, [r7, #4]
 8001680:	2306      	movs	r3, #6
 8001682:	9329      	str	r3, [sp, #164]	; 0xa4
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	9328      	str	r3, [sp, #160]	; 0xa0
 800168a:	2328      	movs	r3, #40	; 0x28
 800168c:	9327      	str	r3, [sp, #156]	; 0x9c
 800168e:	4668      	mov	r0, sp
 8001690:	f104 0310 	add.w	r3, r4, #16
 8001694:	229c      	movs	r2, #156	; 0x9c
 8001696:	4619      	mov	r1, r3
 8001698:	f004 f888 	bl	80057ac <memcpy>
 800169c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016a0:	f001 f817 	bl	80026d2 <bno055_read_regs>
 80016a4:	4603      	mov	r3, r0
 80016a6:	75fb      	strb	r3, [r7, #23]
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <bno055_linear_acc+0x3e>
        return err;
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	e03f      	b.n	8001732 <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <bno055_linear_acc+0x4a>
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <bno055_linear_acc+0xc8>)
 80016bc:	e001      	b.n	80016c2 <bno055_linear_acc+0x4e>
 80016be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80016c2:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80016c4:	7a7b      	ldrb	r3, [r7, #9]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	7a3b      	ldrb	r3, [r7, #8]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016da:	ed97 7a04 	vldr	s14, [r7, #16]
 80016de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80016e8:	7afb      	ldrb	r3, [r7, #11]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	7abb      	ldrb	r3, [r7, #10]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 800170c:	7b7b      	ldrb	r3, [r7, #13]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21a      	sxth	r2, r3
 8001712:	7b3b      	ldrb	r3, [r7, #12]
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b21b      	sxth	r3, r3
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001722:	ed97 7a04 	vldr	s14, [r7, #16]
 8001726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001730:	2300      	movs	r3, #0
};
 8001732:	4618      	mov	r0, r3
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	bf00      	nop
 800173c:	42c80000 	.word	0x42c80000

08001740 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b0af      	sub	sp, #188	; 0xbc
 8001744:	af2a      	add	r7, sp, #168	; 0xa8
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 800174a:	687c      	ldr	r4, [r7, #4]
 800174c:	2302      	movs	r3, #2
 800174e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	9328      	str	r3, [sp, #160]	; 0xa0
 8001756:	2314      	movs	r3, #20
 8001758:	9327      	str	r3, [sp, #156]	; 0x9c
 800175a:	4668      	mov	r0, sp
 800175c:	f104 0310 	add.w	r3, r4, #16
 8001760:	229c      	movs	r2, #156	; 0x9c
 8001762:	4619      	mov	r1, r3
 8001764:	f004 f822 	bl	80057ac <memcpy>
 8001768:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800176c:	f000 ffb1 	bl	80026d2 <bno055_read_regs>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <bno055_gyro_x+0x3e>
        return err;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	e019      	b.n	80017b2 <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800177e:	7b7b      	ldrb	r3, [r7, #13]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b21a      	sxth	r2, r3
 8001784:	7b3b      	ldrb	r3, [r7, #12]
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b21b      	sxth	r3, r3
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <bno055_gyro_x+0x62>
 800179c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80017a0:	e001      	b.n	80017a6 <bno055_gyro_x+0x66>
 80017a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017bc <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80017a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80017b0:	2300      	movs	r3, #0
};
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	44610000 	.word	0x44610000

080017c0 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b0af      	sub	sp, #188	; 0xbc
 80017c4:	af2a      	add	r7, sp, #168	; 0xa8
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80017ca:	687c      	ldr	r4, [r7, #4]
 80017cc:	2302      	movs	r3, #2
 80017ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80017d6:	2316      	movs	r3, #22
 80017d8:	9327      	str	r3, [sp, #156]	; 0x9c
 80017da:	4668      	mov	r0, sp
 80017dc:	f104 0310 	add.w	r3, r4, #16
 80017e0:	229c      	movs	r2, #156	; 0x9c
 80017e2:	4619      	mov	r1, r3
 80017e4:	f003 ffe2 	bl	80057ac <memcpy>
 80017e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017ec:	f000 ff71 	bl	80026d2 <bno055_read_regs>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <bno055_gyro_y+0x3e>
        return err;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	e019      	b.n	8001832 <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80017fe:	7b7b      	ldrb	r3, [r7, #13]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	b21a      	sxth	r2, r3
 8001804:	7b3b      	ldrb	r3, [r7, #12]
 8001806:	b21b      	sxth	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b21b      	sxth	r3, r3
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <bno055_gyro_y+0x62>
 800181c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001820:	e001      	b.n	8001826 <bno055_gyro_y+0x66>
 8001822:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800183c <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001830:	2300      	movs	r3, #0
};
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	44610000 	.word	0x44610000

08001840 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b0af      	sub	sp, #188	; 0xbc
 8001844:	af2a      	add	r7, sp, #168	; 0xa8
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800184a:	687c      	ldr	r4, [r7, #4]
 800184c:	2302      	movs	r3, #2
 800184e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	9328      	str	r3, [sp, #160]	; 0xa0
 8001856:	2318      	movs	r3, #24
 8001858:	9327      	str	r3, [sp, #156]	; 0x9c
 800185a:	4668      	mov	r0, sp
 800185c:	f104 0310 	add.w	r3, r4, #16
 8001860:	229c      	movs	r2, #156	; 0x9c
 8001862:	4619      	mov	r1, r3
 8001864:	f003 ffa2 	bl	80057ac <memcpy>
 8001868:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800186c:	f000 ff31 	bl	80026d2 <bno055_read_regs>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <bno055_gyro_z+0x3e>
        return err;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	e019      	b.n	80018b2 <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800187e:	7b7b      	ldrb	r3, [r7, #13]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b21a      	sxth	r2, r3
 8001884:	7b3b      	ldrb	r3, [r7, #12]
 8001886:	b21b      	sxth	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	b21b      	sxth	r3, r3
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <bno055_gyro_z+0x62>
 800189c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80018a0:	e001      	b.n	80018a6 <bno055_gyro_z+0x66>
 80018a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80018bc <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80018a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80018b0:	2300      	movs	r3, #0
};
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd90      	pop	{r4, r7, pc}
 80018ba:	bf00      	nop
 80018bc:	44610000 	.word	0x44610000

080018c0 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b0b1      	sub	sp, #196	; 0xc4
 80018c4:	af2a      	add	r7, sp, #168	; 0xa8
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 80018ca:	687c      	ldr	r4, [r7, #4]
 80018cc:	2306      	movs	r3, #6
 80018ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80018d6:	2314      	movs	r3, #20
 80018d8:	9327      	str	r3, [sp, #156]	; 0x9c
 80018da:	4668      	mov	r0, sp
 80018dc:	f104 0310 	add.w	r3, r4, #16
 80018e0:	229c      	movs	r2, #156	; 0x9c
 80018e2:	4619      	mov	r1, r3
 80018e4:	f003 ff62 	bl	80057ac <memcpy>
 80018e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018ec:	f000 fef1 	bl	80026d2 <bno055_read_regs>
 80018f0:	4603      	mov	r3, r0
 80018f2:	75fb      	strb	r3, [r7, #23]
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <bno055_gyro+0x3e>
        return err;
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	e03f      	b.n	800197e <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <bno055_gyro+0x4c>
 8001906:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800190a:	e000      	b.n	800190e <bno055_gyro+0x4e>
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800190e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001910:	7a7b      	ldrb	r3, [r7, #9]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	b21a      	sxth	r2, r3
 8001916:	7a3b      	ldrb	r3, [r7, #8]
 8001918:	b21b      	sxth	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b21b      	sxth	r3, r3
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001926:	ed97 7a04 	vldr	s14, [r7, #16]
 800192a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001934:	7afb      	ldrb	r3, [r7, #11]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	7abb      	ldrb	r3, [r7, #10]
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b21b      	sxth	r3, r3
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800194a:	ed97 7a04 	vldr	s14, [r7, #16]
 800194e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001958:	7b7b      	ldrb	r3, [r7, #13]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21a      	sxth	r2, r3
 800195e:	7b3b      	ldrb	r3, [r7, #12]
 8001960:	b21b      	sxth	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b21b      	sxth	r3, r3
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800196e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}
 8001986:	bf00      	nop
 8001988:	44610000 	.word	0x44610000

0800198c <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b0af      	sub	sp, #188	; 0xbc
 8001990:	af2a      	add	r7, sp, #168	; 0xa8
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001996:	687c      	ldr	r4, [r7, #4]
 8001998:	2302      	movs	r3, #2
 800199a:	9329      	str	r3, [sp, #164]	; 0xa4
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80019a2:	230e      	movs	r3, #14
 80019a4:	9327      	str	r3, [sp, #156]	; 0x9c
 80019a6:	4668      	mov	r0, sp
 80019a8:	f104 0310 	add.w	r3, r4, #16
 80019ac:	229c      	movs	r2, #156	; 0x9c
 80019ae:	4619      	mov	r1, r3
 80019b0:	f003 fefc 	bl	80057ac <memcpy>
 80019b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019b8:	f000 fe8b 	bl	80026d2 <bno055_read_regs>
 80019bc:	4603      	mov	r3, r0
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <bno055_mag_x+0x3e>
        return err;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	e012      	b.n	80019f0 <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	7b3b      	ldrb	r3, [r7, #12]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80019e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}

080019f8 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b0af      	sub	sp, #188	; 0xbc
 80019fc:	af2a      	add	r7, sp, #168	; 0xa8
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001a02:	687c      	ldr	r4, [r7, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a0e:	2310      	movs	r3, #16
 8001a10:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a12:	4668      	mov	r0, sp
 8001a14:	f104 0310 	add.w	r3, r4, #16
 8001a18:	229c      	movs	r2, #156	; 0x9c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f003 fec6 	bl	80057ac <memcpy>
 8001a20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a24:	f000 fe55 	bl	80026d2 <bno055_read_regs>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <bno055_mag_y+0x3e>
        return err;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	e012      	b.n	8001a5c <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001a36:	7b7b      	ldrb	r3, [r7, #13]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	7b3b      	ldrb	r3, [r7, #12]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a4c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001a50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd90      	pop	{r4, r7, pc}

08001a64 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b0af      	sub	sp, #188	; 0xbc
 8001a68:	af2a      	add	r7, sp, #168	; 0xa8
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001a6e:	687c      	ldr	r4, [r7, #4]
 8001a70:	2302      	movs	r3, #2
 8001a72:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a7a:	2312      	movs	r3, #18
 8001a7c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a7e:	4668      	mov	r0, sp
 8001a80:	f104 0310 	add.w	r3, r4, #16
 8001a84:	229c      	movs	r2, #156	; 0x9c
 8001a86:	4619      	mov	r1, r3
 8001a88:	f003 fe90 	bl	80057ac <memcpy>
 8001a8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a90:	f000 fe1f 	bl	80026d2 <bno055_read_regs>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <bno055_mag_z+0x3e>
        return err;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	e012      	b.n	8001ac8 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001aa2:	7b7b      	ldrb	r3, [r7, #13]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	b21a      	sxth	r2, r3
 8001aa8:	7b3b      	ldrb	r3, [r7, #12]
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}

08001ad0 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b0af      	sub	sp, #188	; 0xbc
 8001ad4:	af2a      	add	r7, sp, #168	; 0xa8
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001ada:	687c      	ldr	r4, [r7, #4]
 8001adc:	2306      	movs	r3, #6
 8001ade:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ae6:	230e      	movs	r3, #14
 8001ae8:	9327      	str	r3, [sp, #156]	; 0x9c
 8001aea:	4668      	mov	r0, sp
 8001aec:	f104 0310 	add.w	r3, r4, #16
 8001af0:	229c      	movs	r2, #156	; 0x9c
 8001af2:	4619      	mov	r1, r3
 8001af4:	f003 fe5a 	bl	80057ac <memcpy>
 8001af8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001afc:	f000 fde9 	bl	80026d2 <bno055_read_regs>
 8001b00:	4603      	mov	r3, r0
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <bno055_mag+0x3e>
        return err;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	e036      	b.n	8001b7c <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001b0e:	7a7b      	ldrb	r3, [r7, #9]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	7a3b      	ldrb	r3, [r7, #8]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b24:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	7abb      	ldrb	r3, [r7, #10]
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b48:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001b56:	7b7b      	ldrb	r3, [r7, #13]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	7b3b      	ldrb	r3, [r7, #12]
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001b7a:	2300      	movs	r3, #0
};
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b0b1      	sub	sp, #196	; 0xc4
 8001b88:	af2a      	add	r7, sp, #168	; 0xa8
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001b8e:	687c      	ldr	r4, [r7, #4]
 8001b90:	2302      	movs	r3, #2
 8001b92:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b9a:	232e      	movs	r3, #46	; 0x2e
 8001b9c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b9e:	4668      	mov	r0, sp
 8001ba0:	f104 0310 	add.w	r3, r4, #16
 8001ba4:	229c      	movs	r2, #156	; 0x9c
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f003 fe00 	bl	80057ac <memcpy>
 8001bac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bb0:	f000 fd8f 	bl	80026d2 <bno055_read_regs>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	75fb      	strb	r3, [r7, #23]
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <bno055_gravity_x+0x3e>
        return err;
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	e01b      	b.n	8001bfa <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <bno055_gravity_x+0x4a>
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <bno055_gravity_x+0x80>)
 8001bcc:	e001      	b.n	8001bd2 <bno055_gravity_x+0x4e>
 8001bce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bd2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001bd4:	7b7b      	ldrb	r3, [r7, #13]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	7b3b      	ldrb	r3, [r7, #12]
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4313      	orrs	r3, r2
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bea:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	42c80000 	.word	0x42c80000

08001c08 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b0b1      	sub	sp, #196	; 0xc4
 8001c0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001c12:	687c      	ldr	r4, [r7, #4]
 8001c14:	2302      	movs	r3, #2
 8001c16:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c1e:	2330      	movs	r3, #48	; 0x30
 8001c20:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c22:	4668      	mov	r0, sp
 8001c24:	f104 0310 	add.w	r3, r4, #16
 8001c28:	229c      	movs	r2, #156	; 0x9c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f003 fdbe 	bl	80057ac <memcpy>
 8001c30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c34:	f000 fd4d 	bl	80026d2 <bno055_read_regs>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	75fb      	strb	r3, [r7, #23]
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <bno055_gravity_y+0x3e>
        return err;
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	e01b      	b.n	8001c7e <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <bno055_gravity_y+0x4a>
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <bno055_gravity_y+0x80>)
 8001c50:	e001      	b.n	8001c56 <bno055_gravity_y+0x4e>
 8001c52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c56:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001c58:	7b7b      	ldrb	r3, [r7, #13]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	7b3b      	ldrb	r3, [r7, #12]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	42c80000 	.word	0x42c80000

08001c8c <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b0b1      	sub	sp, #196	; 0xc4
 8001c90:	af2a      	add	r7, sp, #168	; 0xa8
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001c96:	687c      	ldr	r4, [r7, #4]
 8001c98:	2302      	movs	r3, #2
 8001c9a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ca2:	2332      	movs	r3, #50	; 0x32
 8001ca4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ca6:	4668      	mov	r0, sp
 8001ca8:	f104 0310 	add.w	r3, r4, #16
 8001cac:	229c      	movs	r2, #156	; 0x9c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f003 fd7c 	bl	80057ac <memcpy>
 8001cb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cb8:	f000 fd0b 	bl	80026d2 <bno055_read_regs>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	75fb      	strb	r3, [r7, #23]
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <bno055_gravity_z+0x3e>
        return err;
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	e01b      	b.n	8001d02 <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <bno055_gravity_z+0x4a>
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <bno055_gravity_z+0x80>)
 8001cd4:	e001      	b.n	8001cda <bno055_gravity_z+0x4e>
 8001cd6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001cda:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001cdc:	7b7b      	ldrb	r3, [r7, #13]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	7b3b      	ldrb	r3, [r7, #12]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cf2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	42c80000 	.word	0x42c80000

08001d10 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b0b1      	sub	sp, #196	; 0xc4
 8001d14:	af2a      	add	r7, sp, #168	; 0xa8
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001d1a:	687c      	ldr	r4, [r7, #4]
 8001d1c:	2306      	movs	r3, #6
 8001d1e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d26:	232e      	movs	r3, #46	; 0x2e
 8001d28:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d2a:	4668      	mov	r0, sp
 8001d2c:	f104 0310 	add.w	r3, r4, #16
 8001d30:	229c      	movs	r2, #156	; 0x9c
 8001d32:	4619      	mov	r1, r3
 8001d34:	f003 fd3a 	bl	80057ac <memcpy>
 8001d38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d3c:	f000 fcc9 	bl	80026d2 <bno055_read_regs>
 8001d40:	4603      	mov	r3, r0
 8001d42:	75fb      	strb	r3, [r7, #23]
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <bno055_gravity+0x3e>
        return err;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	e03f      	b.n	8001dce <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <bno055_gravity+0x4a>
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <bno055_gravity+0xc8>)
 8001d58:	e001      	b.n	8001d5e <bno055_gravity+0x4e>
 8001d5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001d5e:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001d60:	7a7b      	ldrb	r3, [r7, #9]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	7a3b      	ldrb	r3, [r7, #8]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d76:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001d84:	7afb      	ldrb	r3, [r7, #11]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	7abb      	ldrb	r3, [r7, #10]
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	b21b      	sxth	r3, r3
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001da8:	7b7b      	ldrb	r3, [r7, #13]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	7b3b      	ldrb	r3, [r7, #12]
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	4313      	orrs	r3, r2
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	371c      	adds	r7, #28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	42c80000 	.word	0x42c80000

08001ddc <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b0b1      	sub	sp, #196	; 0xc4
 8001de0:	af2a      	add	r7, sp, #168	; 0xa8
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001de6:	687c      	ldr	r4, [r7, #4]
 8001de8:	2302      	movs	r3, #2
 8001dea:	9329      	str	r3, [sp, #164]	; 0xa4
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001df2:	231a      	movs	r3, #26
 8001df4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001df6:	4668      	mov	r0, sp
 8001df8:	f104 0310 	add.w	r3, r4, #16
 8001dfc:	229c      	movs	r2, #156	; 0x9c
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f003 fcd4 	bl	80057ac <memcpy>
 8001e04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e08:	f000 fc63 	bl	80026d2 <bno055_read_regs>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	75fb      	strb	r3, [r7, #23]
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	e01b      	b.n	8001e52 <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d102      	bne.n	8001e28 <bno055_euler_yaw+0x4c>
 8001e22:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001e26:	e000      	b.n	8001e2a <bno055_euler_yaw+0x4e>
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e2a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001e2c:	7b7b      	ldrb	r3, [r7, #13]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	b21a      	sxth	r2, r3
 8001e32:	7b3b      	ldrb	r3, [r7, #12]
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4313      	orrs	r3, r2
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e42:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	44610000 	.word	0x44610000

08001e60 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b0b1      	sub	sp, #196	; 0xc4
 8001e64:	af2a      	add	r7, sp, #168	; 0xa8
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001e6a:	687c      	ldr	r4, [r7, #4]
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e76:	231c      	movs	r3, #28
 8001e78:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e7a:	4668      	mov	r0, sp
 8001e7c:	f104 0310 	add.w	r3, r4, #16
 8001e80:	229c      	movs	r2, #156	; 0x9c
 8001e82:	4619      	mov	r1, r3
 8001e84:	f003 fc92 	bl	80057ac <memcpy>
 8001e88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e8c:	f000 fc21 	bl	80026d2 <bno055_read_regs>
 8001e90:	4603      	mov	r3, r0
 8001e92:	75fb      	strb	r3, [r7, #23]
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <bno055_euler_roll+0x3e>
        return err;
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
 8001e9c:	e01b      	b.n	8001ed6 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <bno055_euler_roll+0x4c>
 8001ea6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001eaa:	e000      	b.n	8001eae <bno055_euler_roll+0x4e>
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001eae:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001eb0:	7b7b      	ldrb	r3, [r7, #13]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	7b3b      	ldrb	r3, [r7, #12]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ec6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	44610000 	.word	0x44610000

08001ee4 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b0b1      	sub	sp, #196	; 0xc4
 8001ee8:	af2a      	add	r7, sp, #168	; 0xa8
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001eee:	687c      	ldr	r4, [r7, #4]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001efa:	231e      	movs	r3, #30
 8001efc:	9327      	str	r3, [sp, #156]	; 0x9c
 8001efe:	4668      	mov	r0, sp
 8001f00:	f104 0310 	add.w	r3, r4, #16
 8001f04:	229c      	movs	r2, #156	; 0x9c
 8001f06:	4619      	mov	r1, r3
 8001f08:	f003 fc50 	bl	80057ac <memcpy>
 8001f0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f10:	f000 fbdf 	bl	80026d2 <bno055_read_regs>
 8001f14:	4603      	mov	r3, r0
 8001f16:	75fb      	strb	r3, [r7, #23]
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <bno055_euler_pitch+0x3e>
        return err;
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	e01b      	b.n	8001f5a <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <bno055_euler_pitch+0x4c>
 8001f2a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001f2e:	e000      	b.n	8001f32 <bno055_euler_pitch+0x4e>
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001f32:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001f34:	7b7b      	ldrb	r3, [r7, #13]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	7b3b      	ldrb	r3, [r7, #12]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	44610000 	.word	0x44610000

08001f68 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b0b1      	sub	sp, #196	; 0xc4
 8001f6c:	af2a      	add	r7, sp, #168	; 0xa8
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001f72:	687c      	ldr	r4, [r7, #4]
 8001f74:	2306      	movs	r3, #6
 8001f76:	9329      	str	r3, [sp, #164]	; 0xa4
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	9328      	str	r3, [sp, #160]	; 0xa0
 8001f7e:	231a      	movs	r3, #26
 8001f80:	9327      	str	r3, [sp, #156]	; 0x9c
 8001f82:	4668      	mov	r0, sp
 8001f84:	f104 0310 	add.w	r3, r4, #16
 8001f88:	229c      	movs	r2, #156	; 0x9c
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f003 fc0e 	bl	80057ac <memcpy>
 8001f90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f94:	f000 fb9d 	bl	80026d2 <bno055_read_regs>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	75fb      	strb	r3, [r7, #23]
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
 8001fa4:	e03f      	b.n	8002026 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <bno055_euler+0x4c>
 8001fae:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001fb2:	e000      	b.n	8001fb6 <bno055_euler+0x4e>
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001fb6:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001fb8:	7a7b      	ldrb	r3, [r7, #9]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	b21a      	sxth	r2, r3
 8001fbe:	7a3b      	ldrb	r3, [r7, #8]
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fce:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	b21a      	sxth	r2, r3
 8001fe2:	7abb      	ldrb	r3, [r7, #10]
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ff2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8002000:	7b7b      	ldrb	r3, [r7, #13]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	b21a      	sxth	r2, r3
 8002006:	7b3b      	ldrb	r3, [r7, #12]
 8002008:	b21b      	sxth	r3, r3
 800200a:	4313      	orrs	r3, r2
 800200c:	b21b      	sxth	r3, r3
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002016:	ed97 7a04 	vldr	s14, [r7, #16]
 800201a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop
 8002030:	44610000 	.word	0x44610000

08002034 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b0af      	sub	sp, #188	; 0xbc
 8002038:	af2a      	add	r7, sp, #168	; 0xa8
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 800203e:	687c      	ldr	r4, [r7, #4]
 8002040:	2302      	movs	r3, #2
 8002042:	9329      	str	r3, [sp, #164]	; 0xa4
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	9328      	str	r3, [sp, #160]	; 0xa0
 800204a:	2320      	movs	r3, #32
 800204c:	9327      	str	r3, [sp, #156]	; 0x9c
 800204e:	4668      	mov	r0, sp
 8002050:	f104 0310 	add.w	r3, r4, #16
 8002054:	229c      	movs	r2, #156	; 0x9c
 8002056:	4619      	mov	r1, r3
 8002058:	f003 fba8 	bl	80057ac <memcpy>
 800205c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002060:	f000 fb37 	bl	80026d2 <bno055_read_regs>
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <bno055_quaternion_w+0x3e>
        return err;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	e012      	b.n	8002098 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002072:	7b7b      	ldrb	r3, [r7, #13]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	7b3b      	ldrb	r3, [r7, #12]
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21b      	sxth	r3, r3
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002088:	eddf 6a05 	vldr	s13, [pc, #20]	; 80020a0 <bno055_quaternion_w+0x6c>
 800208c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	46800000 	.word	0x46800000

080020a4 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b0af      	sub	sp, #188	; 0xbc
 80020a8:	af2a      	add	r7, sp, #168	; 0xa8
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80020ae:	687c      	ldr	r4, [r7, #4]
 80020b0:	2302      	movs	r3, #2
 80020b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	9328      	str	r3, [sp, #160]	; 0xa0
 80020ba:	2322      	movs	r3, #34	; 0x22
 80020bc:	9327      	str	r3, [sp, #156]	; 0x9c
 80020be:	4668      	mov	r0, sp
 80020c0:	f104 0310 	add.w	r3, r4, #16
 80020c4:	229c      	movs	r2, #156	; 0x9c
 80020c6:	4619      	mov	r1, r3
 80020c8:	f003 fb70 	bl	80057ac <memcpy>
 80020cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020d0:	f000 faff 	bl	80026d2 <bno055_read_regs>
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <bno055_quaternion_x+0x3e>
        return err;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	e012      	b.n	8002108 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80020e2:	7b7b      	ldrb	r3, [r7, #13]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f8:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002110 <bno055_quaternion_x+0x6c>
 80020fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bd90      	pop	{r4, r7, pc}
 8002110:	46800000 	.word	0x46800000

08002114 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b0af      	sub	sp, #188	; 0xbc
 8002118:	af2a      	add	r7, sp, #168	; 0xa8
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800211e:	687c      	ldr	r4, [r7, #4]
 8002120:	2302      	movs	r3, #2
 8002122:	9329      	str	r3, [sp, #164]	; 0xa4
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	9328      	str	r3, [sp, #160]	; 0xa0
 800212a:	2324      	movs	r3, #36	; 0x24
 800212c:	9327      	str	r3, [sp, #156]	; 0x9c
 800212e:	4668      	mov	r0, sp
 8002130:	f104 0310 	add.w	r3, r4, #16
 8002134:	229c      	movs	r2, #156	; 0x9c
 8002136:	4619      	mov	r1, r3
 8002138:	f003 fb38 	bl	80057ac <memcpy>
 800213c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002140:	f000 fac7 	bl	80026d2 <bno055_read_regs>
 8002144:	4603      	mov	r3, r0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <bno055_quaternion_y+0x3e>
        return err;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	e012      	b.n	8002178 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002152:	7b7b      	ldrb	r3, [r7, #13]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	b21a      	sxth	r2, r3
 8002158:	7b3b      	ldrb	r3, [r7, #12]
 800215a:	b21b      	sxth	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b21b      	sxth	r3, r3
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002168:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002180 <bno055_quaternion_y+0x6c>
 800216c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}
 8002180:	46800000 	.word	0x46800000

08002184 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b0af      	sub	sp, #188	; 0xbc
 8002188:	af2a      	add	r7, sp, #168	; 0xa8
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800218e:	687c      	ldr	r4, [r7, #4]
 8002190:	2302      	movs	r3, #2
 8002192:	9329      	str	r3, [sp, #164]	; 0xa4
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	9328      	str	r3, [sp, #160]	; 0xa0
 800219a:	2326      	movs	r3, #38	; 0x26
 800219c:	9327      	str	r3, [sp, #156]	; 0x9c
 800219e:	4668      	mov	r0, sp
 80021a0:	f104 0310 	add.w	r3, r4, #16
 80021a4:	229c      	movs	r2, #156	; 0x9c
 80021a6:	4619      	mov	r1, r3
 80021a8:	f003 fb00 	bl	80057ac <memcpy>
 80021ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021b0:	f000 fa8f 	bl	80026d2 <bno055_read_regs>
 80021b4:	4603      	mov	r3, r0
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <bno055_quaternion_z+0x3e>
        return err;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	e012      	b.n	80021e8 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80021c2:	7b7b      	ldrb	r3, [r7, #13]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	7b3b      	ldrb	r3, [r7, #12]
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d8:	eddf 6a05 	vldr	s13, [pc, #20]	; 80021f0 <bno055_quaternion_z+0x6c>
 80021dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd90      	pop	{r4, r7, pc}
 80021f0:	46800000 	.word	0x46800000

080021f4 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b0b1      	sub	sp, #196	; 0xc4
 80021f8:	af2a      	add	r7, sp, #168	; 0xa8
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80021fe:	687c      	ldr	r4, [r7, #4]
 8002200:	2308      	movs	r3, #8
 8002202:	9329      	str	r3, [sp, #164]	; 0xa4
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	9328      	str	r3, [sp, #160]	; 0xa0
 800220a:	2320      	movs	r3, #32
 800220c:	9327      	str	r3, [sp, #156]	; 0x9c
 800220e:	4668      	mov	r0, sp
 8002210:	f104 0310 	add.w	r3, r4, #16
 8002214:	229c      	movs	r2, #156	; 0x9c
 8002216:	4619      	mov	r1, r3
 8002218:	f003 fac8 	bl	80057ac <memcpy>
 800221c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002220:	f000 fa57 	bl	80026d2 <bno055_read_regs>
 8002224:	4603      	mov	r3, r0
 8002226:	75fb      	strb	r3, [r7, #23]
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <bno055_quaternion+0x3e>
        return err;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	e048      	b.n	80022c4 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002232:	7b7b      	ldrb	r3, [r7, #13]
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	b21a      	sxth	r2, r3
 8002238:	7b3b      	ldrb	r3, [r7, #12]
 800223a:	b21b      	sxth	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b21b      	sxth	r3, r3
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002248:	eddf 6a20 	vldr	s13, [pc, #128]	; 80022cc <bno055_quaternion+0xd8>
 800224c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	b21a      	sxth	r2, r3
 800225c:	7bbb      	ldrb	r3, [r7, #14]
 800225e:	b21b      	sxth	r3, r3
 8002260:	4313      	orrs	r3, r2
 8002262:	b21b      	sxth	r3, r3
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800226c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80022cc <bno055_quaternion+0xd8>
 8002270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 800227a:	7c7b      	ldrb	r3, [r7, #17]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	b21a      	sxth	r2, r3
 8002280:	7c3b      	ldrb	r3, [r7, #16]
 8002282:	b21b      	sxth	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	b21b      	sxth	r3, r3
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002290:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80022cc <bno055_quaternion+0xd8>
 8002294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	7cbb      	ldrb	r3, [r7, #18]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022b4:	eddf 6a05 	vldr	s13, [pc, #20]	; 80022cc <bno055_quaternion+0xd8>
 80022b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	46800000 	.word	0x46800000

080022d0 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b0af      	sub	sp, #188	; 0xbc
 80022d4:	af2a      	add	r7, sp, #168	; 0xa8
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	4608      	mov	r0, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	70fb      	strb	r3, [r7, #3]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70bb      	strb	r3, [r7, #2]
 80022e6:	4613      	mov	r3, r2
 80022e8:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80022ea:	2101      	movs	r1, #1
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fa53 	bl	8002798 <bno055_set_page>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <bno055_acc_conf+0x30>
        return err;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	e04b      	b.n	8002398 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002300:	2100      	movs	r1, #0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f91b 	bl	800253e <bno055_set_opmode>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <bno055_acc_conf+0x46>
        return err;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	e040      	b.n	8002398 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002316:	200c      	movs	r0, #12
 8002318:	f000 feb4 	bl	8003084 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	78bb      	ldrb	r3, [r7, #2]
 8002320:	4313      	orrs	r3, r2
 8002322:	b2da      	uxtb	r2, r3
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	4313      	orrs	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 800232c:	687c      	ldr	r4, [r7, #4]
 800232e:	2301      	movs	r3, #1
 8002330:	9329      	str	r3, [sp, #164]	; 0xa4
 8002332:	f107 030e 	add.w	r3, r7, #14
 8002336:	9328      	str	r3, [sp, #160]	; 0xa0
 8002338:	2308      	movs	r3, #8
 800233a:	9327      	str	r3, [sp, #156]	; 0x9c
 800233c:	4668      	mov	r0, sp
 800233e:	f104 0310 	add.w	r3, r4, #16
 8002342:	229c      	movs	r2, #156	; 0x9c
 8002344:	4619      	mov	r1, r3
 8002346:	f003 fa31 	bl	80057ac <memcpy>
 800234a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800234e:	f000 f9f6 	bl	800273e <bno055_write_regs>
 8002352:	4603      	mov	r3, r0
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <bno055_acc_conf+0x90>
        return err;
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	e01b      	b.n	8002398 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	791b      	ldrb	r3, [r3, #4]
 8002364:	4619      	mov	r1, r3
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f8e9 	bl	800253e <bno055_set_opmode>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <bno055_acc_conf+0xaa>
        return err;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	e00e      	b.n	8002398 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800237a:	2018      	movs	r0, #24
 800237c:	f000 fe82 	bl	8003084 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002380:	2100      	movs	r1, #0
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fa08 	bl	8002798 <bno055_set_page>
 8002388:	4603      	mov	r3, r0
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <bno055_acc_conf+0xc6>
        return err;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	e000      	b.n	8002398 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	bd90      	pop	{r4, r7, pc}

080023a0 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b0af      	sub	sp, #188	; 0xbc
 80023a4:	af2a      	add	r7, sp, #168	; 0xa8
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	70fb      	strb	r3, [r7, #3]
 80023b2:	460b      	mov	r3, r1
 80023b4:	70bb      	strb	r3, [r7, #2]
 80023b6:	4613      	mov	r3, r2
 80023b8:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80023ba:	2101      	movs	r1, #1
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f9eb 	bl	8002798 <bno055_set_page>
 80023c2:	4603      	mov	r3, r0
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <bno055_gyr_conf+0x30>
        return err;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	e04a      	b.n	8002466 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80023d0:	2100      	movs	r1, #0
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8b3 	bl	800253e <bno055_set_opmode>
 80023d8:	4603      	mov	r3, r0
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <bno055_gyr_conf+0x46>
        return err;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	e03f      	b.n	8002466 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80023e6:	200c      	movs	r0, #12
 80023e8:	f000 fe4c 	bl	8003084 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	78bb      	ldrb	r3, [r7, #2]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	733b      	strb	r3, [r7, #12]
 80023f6:	787b      	ldrb	r3, [r7, #1]
 80023f8:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80023fa:	687c      	ldr	r4, [r7, #4]
 80023fc:	2302      	movs	r3, #2
 80023fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	9328      	str	r3, [sp, #160]	; 0xa0
 8002406:	230a      	movs	r3, #10
 8002408:	9327      	str	r3, [sp, #156]	; 0x9c
 800240a:	4668      	mov	r0, sp
 800240c:	f104 0310 	add.w	r3, r4, #16
 8002410:	229c      	movs	r2, #156	; 0x9c
 8002412:	4619      	mov	r1, r3
 8002414:	f003 f9ca 	bl	80057ac <memcpy>
 8002418:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800241c:	f000 f98f 	bl	800273e <bno055_write_regs>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	e01b      	b.n	8002466 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	791b      	ldrb	r3, [r3, #4]
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f882 	bl	800253e <bno055_set_opmode>
 800243a:	4603      	mov	r3, r0
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <bno055_gyr_conf+0xa8>
        return err;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	e00e      	b.n	8002466 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002448:	2018      	movs	r0, #24
 800244a:	f000 fe1b 	bl	8003084 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800244e:	2100      	movs	r1, #0
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f9a1 	bl	8002798 <bno055_set_page>
 8002456:	4603      	mov	r3, r0
 8002458:	73fb      	strb	r3, [r7, #15]
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <bno055_gyr_conf+0xc4>
        return err;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	e000      	b.n	8002466 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}

0800246e <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 800246e:	b590      	push	{r4, r7, lr}
 8002470:	b0af      	sub	sp, #188	; 0xbc
 8002472:	af2a      	add	r7, sp, #168	; 0xa8
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	4608      	mov	r0, r1
 8002478:	4611      	mov	r1, r2
 800247a:	461a      	mov	r2, r3
 800247c:	4603      	mov	r3, r0
 800247e:	70fb      	strb	r3, [r7, #3]
 8002480:	460b      	mov	r3, r1
 8002482:	70bb      	strb	r3, [r7, #2]
 8002484:	4613      	mov	r3, r2
 8002486:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002488:	2101      	movs	r1, #1
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f984 	bl	8002798 <bno055_set_page>
 8002490:	4603      	mov	r3, r0
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <bno055_mag_conf+0x30>
        return err;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	e04b      	b.n	8002536 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800249e:	2100      	movs	r1, #0
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f84c 	bl	800253e <bno055_set_opmode>
 80024a6:	4603      	mov	r3, r0
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <bno055_mag_conf+0x46>
        return err;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	e040      	b.n	8002536 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80024b4:	200c      	movs	r0, #12
 80024b6:	f000 fde5 	bl	8003084 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	78bb      	ldrb	r3, [r7, #2]
 80024be:	4313      	orrs	r3, r2
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	787b      	ldrb	r3, [r7, #1]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 80024ca:	687c      	ldr	r4, [r7, #4]
 80024cc:	2301      	movs	r3, #1
 80024ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80024d0:	f107 030e 	add.w	r3, r7, #14
 80024d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80024d6:	2309      	movs	r3, #9
 80024d8:	9327      	str	r3, [sp, #156]	; 0x9c
 80024da:	4668      	mov	r0, sp
 80024dc:	f104 0310 	add.w	r3, r4, #16
 80024e0:	229c      	movs	r2, #156	; 0x9c
 80024e2:	4619      	mov	r1, r3
 80024e4:	f003 f962 	bl	80057ac <memcpy>
 80024e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024ec:	f000 f927 	bl	800273e <bno055_write_regs>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <bno055_mag_conf+0x90>
        return err;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	e01b      	b.n	8002536 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	791b      	ldrb	r3, [r3, #4]
 8002502:	4619      	mov	r1, r3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f81a 	bl	800253e <bno055_set_opmode>
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <bno055_mag_conf+0xaa>
        return err;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	e00e      	b.n	8002536 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002518:	2018      	movs	r0, #24
 800251a:	f000 fdb3 	bl	8003084 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800251e:	2100      	movs	r1, #0
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f939 	bl	8002798 <bno055_set_page>
 8002526:	4603      	mov	r3, r0
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <bno055_mag_conf+0xc6>
        return err;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	e000      	b.n	8002536 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bd90      	pop	{r4, r7, pc}

0800253e <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 800253e:	b590      	push	{r4, r7, lr}
 8002540:	b0af      	sub	sp, #188	; 0xbc
 8002542:	af2a      	add	r7, sp, #168	; 0xa8
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 800254a:	687c      	ldr	r4, [r7, #4]
 800254c:	2301      	movs	r3, #1
 800254e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002550:	1cfb      	adds	r3, r7, #3
 8002552:	9328      	str	r3, [sp, #160]	; 0xa0
 8002554:	233d      	movs	r3, #61	; 0x3d
 8002556:	9327      	str	r3, [sp, #156]	; 0x9c
 8002558:	4668      	mov	r0, sp
 800255a:	f104 0310 	add.w	r3, r4, #16
 800255e:	229c      	movs	r2, #156	; 0x9c
 8002560:	4619      	mov	r1, r3
 8002562:	f003 f923 	bl	80057ac <memcpy>
 8002566:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800256a:	f000 f8e8 	bl	800273e <bno055_write_regs>
 800256e:	4603      	mov	r3, r0
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	e003      	b.n	8002584 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800257c:	2018      	movs	r0, #24
 800257e:	f000 fd81 	bl	8003084 <HAL_Delay>
    return BNO_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bd90      	pop	{r4, r7, pc}

0800258c <bno055_set_pwr_mode>:
        return err;
    }
    return BNO_OK;
}

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b0af      	sub	sp, #188	; 0xbc
 8002590:	af2a      	add	r7, sp, #168	; 0xa8
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 800259e:	2304      	movs	r3, #4
 80025a0:	e04d      	b.n	800263e <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80025a2:	2100      	movs	r1, #0
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ffca 	bl	800253e <bno055_set_opmode>
 80025aa:	4603      	mov	r3, r0
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <bno055_set_pwr_mode+0x2c>
        return err;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	e042      	b.n	800263e <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80025b8:	2100      	movs	r1, #0
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8ec 	bl	8002798 <bno055_set_page>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <bno055_set_pwr_mode+0x42>
        return err;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	e037      	b.n	800263e <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 80025ce:	687c      	ldr	r4, [r7, #4]
 80025d0:	2301      	movs	r3, #1
 80025d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80025d4:	1cfb      	adds	r3, r7, #3
 80025d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80025d8:	233e      	movs	r3, #62	; 0x3e
 80025da:	9327      	str	r3, [sp, #156]	; 0x9c
 80025dc:	4668      	mov	r0, sp
 80025de:	f104 0310 	add.w	r3, r4, #16
 80025e2:	229c      	movs	r2, #156	; 0x9c
 80025e4:	4619      	mov	r1, r3
 80025e6:	f003 f8e1 	bl	80057ac <memcpy>
 80025ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025ee:	f000 f8a6 	bl	800273e <bno055_write_regs>
 80025f2:	4603      	mov	r3, r0
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	e01e      	b.n	800263e <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002606:	2100      	movs	r1, #0
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8c5 	bl	8002798 <bno055_set_page>
 800260e:	4603      	mov	r3, r0
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <bno055_set_pwr_mode+0x90>
        return err;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	e010      	b.n	800263e <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	791b      	ldrb	r3, [r3, #4]
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff8b 	bl	800253e <bno055_set_opmode>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <bno055_set_pwr_mode+0xaa>
        return err;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	e003      	b.n	800263e <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8002636:	2002      	movs	r0, #2
 8002638:	f000 fd24 	bl	8003084 <HAL_Delay>
    return BNO_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bd90      	pop	{r4, r7, pc}

08002646 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8002646:	b590      	push	{r4, r7, lr}
 8002648:	b0af      	sub	sp, #188	; 0xbc
 800264a:	af2a      	add	r7, sp, #168	; 0xa8
 800264c:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 800264e:	2320      	movs	r3, #32
 8002650:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002652:	687c      	ldr	r4, [r7, #4]
 8002654:	2301      	movs	r3, #1
 8002656:	9329      	str	r3, [sp, #164]	; 0xa4
 8002658:	f107 030f 	add.w	r3, r7, #15
 800265c:	9328      	str	r3, [sp, #160]	; 0xa0
 800265e:	233f      	movs	r3, #63	; 0x3f
 8002660:	9327      	str	r3, [sp, #156]	; 0x9c
 8002662:	4668      	mov	r0, sp
 8002664:	f104 0310 	add.w	r3, r4, #16
 8002668:	229c      	movs	r2, #156	; 0x9c
 800266a:	4619      	mov	r1, r3
 800266c:	f003 f89e 	bl	80057ac <memcpy>
 8002670:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002674:	f000 f863 	bl	800273e <bno055_write_regs>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bd90      	pop	{r4, r7, pc}

0800268c <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b0af      	sub	sp, #188	; 0xbc
 8002690:	af2a      	add	r7, sp, #168	; 0xa8
 8002692:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002698:	687c      	ldr	r4, [r7, #4]
 800269a:	2301      	movs	r3, #1
 800269c:	9329      	str	r3, [sp, #164]	; 0xa4
 800269e:	f107 030f 	add.w	r3, r7, #15
 80026a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80026a4:	233f      	movs	r3, #63	; 0x3f
 80026a6:	9327      	str	r3, [sp, #156]	; 0x9c
 80026a8:	4668      	mov	r0, sp
 80026aa:	f104 0310 	add.w	r3, r4, #16
 80026ae:	229c      	movs	r2, #156	; 0x9c
 80026b0:	4619      	mov	r1, r3
 80026b2:	f003 f87b 	bl	80057ac <memcpy>
 80026b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026ba:	f000 f840 	bl	800273e <bno055_write_regs>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <bno055_on+0x3e>
    }
    return BNO_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}

080026d2 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 80026d2:	b084      	sub	sp, #16
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af02      	add	r7, sp, #8
 80026da:	f107 0c10 	add.w	ip, r7, #16
 80026de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 80026e2:	6938      	ldr	r0, [r7, #16]
 80026e4:	7dbb      	ldrb	r3, [r7, #22]
 80026e6:	b299      	uxth	r1, r3
 80026e8:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	2301      	movs	r3, #1
 80026f4:	f001 f8b0 	bl	8003858 <HAL_I2C_Master_Transmit>
 80026f8:	4603      	mov	r3, r0
 80026fa:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8002702:	2301      	movs	r3, #1
 8002704:	e014      	b.n	8002730 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8002706:	6938      	ldr	r0, [r7, #16]
 8002708:	7dbb      	ldrb	r3, [r7, #22]
 800270a:	b299      	uxth	r1, r3
 800270c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002710:	b29b      	uxth	r3, r3
 8002712:	f04f 32ff 	mov.w	r2, #4294967295
 8002716:	9200      	str	r2, [sp, #0]
 8002718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800271c:	f001 f99a 	bl	8003a54 <HAL_I2C_Master_Receive>
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800273a:	b004      	add	sp, #16
 800273c:	4770      	bx	lr

0800273e <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 800273e:	b084      	sub	sp, #16
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af04      	add	r7, sp, #16
 8002746:	f107 0418 	add.w	r4, r7, #24
 800274a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 800274e:	69b8      	ldr	r0, [r7, #24]
 8002750:	7fbb      	ldrb	r3, [r7, #30]
 8002752:	b299      	uxth	r1, r3
 8002754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002758:	b29a      	uxth	r2, r3
 800275a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800275e:	b29c      	uxth	r4, r3
 8002760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002764:	b29b      	uxth	r3, r3
 8002766:	f04f 35ff 	mov.w	r5, #4294967295
 800276a:	9502      	str	r5, [sp, #8]
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4623      	mov	r3, r4
 8002776:	f001 fb93 	bl	8003ea0 <HAL_I2C_Mem_Write>
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002794:	b004      	add	sp, #16
 8002796:	4770      	bx	lr

08002798 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b0af      	sub	sp, #188	; 0xbc
 800279c:	af2a      	add	r7, sp, #168	; 0xa8
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7b5a      	ldrb	r2, [r3, #13]
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <bno055_set_page+0x1a>
        return BNO_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e024      	b.n	80027fc <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d901      	bls.n	80027bc <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 80027b8:	2302      	movs	r3, #2
 80027ba:	e01f      	b.n	80027fc <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 80027bc:	687c      	ldr	r4, [r7, #4]
 80027be:	2301      	movs	r3, #1
 80027c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80027c2:	1cfb      	adds	r3, r7, #3
 80027c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80027c6:	2307      	movs	r3, #7
 80027c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80027ca:	4668      	mov	r0, sp
 80027cc:	f104 0310 	add.w	r3, r4, #16
 80027d0:	229c      	movs	r2, #156	; 0x9c
 80027d2:	4619      	mov	r1, r3
 80027d4:	f002 ffea 	bl	80057ac <memcpy>
 80027d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027dc:	f7ff ffaf 	bl	800273e <bno055_write_regs>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <bno055_set_page+0x56>
        return err;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	e006      	b.n	80027fc <bno055_set_page+0x64>
    }
    imu->_page = page;
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 80027f4:	2002      	movs	r0, #2
 80027f6:	f000 fc45 	bl	8003084 <HAL_Delay>
    return BNO_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}

08002804 <send_data_to_e22>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float A_X = 0, A_Y = 0, A_Z = 0;
float G_X = 0, G_Y = 0, G_Z = 0;
void send_data_to_e22(float A_X,float A_Y,float A_Z,float G_X,float G_Y,float G_Z ) {
 8002804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002808:	b0ae      	sub	sp, #184	; 0xb8
 800280a:	af0a      	add	r7, sp, #40	; 0x28
 800280c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8002810:	edc7 0a08 	vstr	s1, [r7, #32]
 8002814:	ed87 1a07 	vstr	s2, [r7, #28]
 8002818:	edc7 1a06 	vstr	s3, [r7, #24]
 800281c:	ed87 2a05 	vstr	s4, [r7, #20]
 8002820:	edc7 2a04 	vstr	s5, [r7, #16]
  char buf[100];

  sprintf(buf, "Gyroscope:\tX=%f\tY=%f\tZ=%f\nAccelerometer:\tX=%f\tY=%f\tZ=%f\n", G_X, G_Y, G_Z, A_X, A_Y, A_Z);
 8002824:	69b8      	ldr	r0, [r7, #24]
 8002826:	f7fd fe8f 	bl	8000548 <__aeabi_f2d>
 800282a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f7fd fe8a 	bl	8000548 <__aeabi_f2d>
 8002834:	4604      	mov	r4, r0
 8002836:	460d      	mov	r5, r1
 8002838:	6938      	ldr	r0, [r7, #16]
 800283a:	f7fd fe85 	bl	8000548 <__aeabi_f2d>
 800283e:	4680      	mov	r8, r0
 8002840:	4689      	mov	r9, r1
 8002842:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002844:	f7fd fe80 	bl	8000548 <__aeabi_f2d>
 8002848:	4682      	mov	sl, r0
 800284a:	468b      	mov	fp, r1
 800284c:	6a38      	ldr	r0, [r7, #32]
 800284e:	f7fd fe7b 	bl	8000548 <__aeabi_f2d>
 8002852:	e9c7 0100 	strd	r0, r1, [r7]
 8002856:	69f8      	ldr	r0, [r7, #28]
 8002858:	f7fd fe76 	bl	8000548 <__aeabi_f2d>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002864:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002868:	ed97 7b00 	vldr	d7, [r7]
 800286c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002870:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002874:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002878:	e9cd 4500 	strd	r4, r5, [sp]
 800287c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002880:	490a      	ldr	r1, [pc, #40]	; (80028ac <send_data_to_e22+0xa8>)
 8002882:	f003 fe29 	bl	80064d8 <siprintf>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)buf, strlen(buf));
 8002886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fca0 	bl	80001d0 <strlen>
 8002890:	4603      	mov	r3, r0
 8002892:	b29a      	uxth	r2, r3
 8002894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002898:	4619      	mov	r1, r3
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <send_data_to_e22+0xac>)
 800289c:	f002 fca3 	bl	80051e6 <HAL_UART_Transmit_IT>
}
 80028a0:	bf00      	nop
 80028a2:	3790      	adds	r7, #144	; 0x90
 80028a4:	46bd      	mov	sp, r7
 80028a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028aa:	bf00      	nop
 80028ac:	0800a0b0 	.word	0x0800a0b0
 80028b0:	20000250 	.word	0x20000250

080028b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b0dc      	sub	sp, #368	; 0x170
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	bno055_t bno = (bno055_t){
 80028ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028be:	22ac      	movs	r2, #172	; 0xac
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 ff80 	bl	80057c8 <memset>
 80028c8:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <main+0x10c>)
 80028ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028ce:	2308      	movs	r3, #8
 80028d0:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 80028d4:	2329      	movs	r3, #41	; 0x29
 80028d6:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
	    .i2c = &hi2c1, .addr = BNO_ADDR, .mode = BNO_MODE_IMU,
	};

	bno055_init(&bno);
 80028da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fb8a 	bl	8000ff8 <bno055_init>
	bno055_set_opmode(&bno, BNO_MODE_IMU);
 80028e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028e8:	2108      	movs	r1, #8
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fe27 	bl	800253e <bno055_set_opmode>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f0:	f000 fb56 	bl	8002fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028f4:	f000 f872 	bl	80029dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028f8:	f000 f932 	bl	8002b60 <MX_GPIO_Init>
  MX_I2C1_Init();
 80028fc:	f000 f8d8 	bl	8002ab0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002900:	f000 f904 	bl	8002b0c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bno055_gyro(&bno, &gyroscope);
 8002904:	f107 020c 	add.w	r2, r7, #12
 8002908:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe ffd6 	bl	80018c0 <bno055_gyro>

	  bno055_acc(&bno, &accelerometer);
 8002914:	463a      	mov	r2, r7
 8002916:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fd83 	bl	8001428 <bno055_acc>
	  A_X=accelerometer.x;
 8002922:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002926:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a25      	ldr	r2, [pc, #148]	; (80029c4 <main+0x110>)
 800292e:	6013      	str	r3, [r2, #0]
	  A_Y=accelerometer.y;
 8002930:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002934:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <main+0x114>)
 800293c:	6013      	str	r3, [r2, #0]
	  A_Z=accelerometer.z;
 800293e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002942:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <main+0x118>)
 800294a:	6013      	str	r3, [r2, #0]
	  G_X=gyroscope.x;
 800294c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002950:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <main+0x11c>)
 8002958:	6013      	str	r3, [r2, #0]
	  G_Y=gyroscope.y;
 800295a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800295e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <main+0x120>)
 8002966:	6013      	str	r3, [r2, #0]
	  G_Z=gyroscope.z;
 8002968:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800296c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <main+0x124>)
 8002974:	6013      	str	r3, [r2, #0]
	  send_data_to_e22(A_X, A_Y, A_Z,G_X, G_Y, G_Z);
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <main+0x110>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <main+0x114>)
 800297e:	ed93 7a00 	vldr	s14, [r3]
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <main+0x118>)
 8002984:	edd3 6a00 	vldr	s13, [r3]
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <main+0x11c>)
 800298a:	ed93 6a00 	vldr	s12, [r3]
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <main+0x120>)
 8002990:	edd3 5a00 	vldr	s11, [r3]
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <main+0x124>)
 8002996:	ed93 5a00 	vldr	s10, [r3]
 800299a:	eef0 2a45 	vmov.f32	s5, s10
 800299e:	eeb0 2a65 	vmov.f32	s4, s11
 80029a2:	eef0 1a46 	vmov.f32	s3, s12
 80029a6:	eeb0 1a66 	vmov.f32	s2, s13
 80029aa:	eef0 0a47 	vmov.f32	s1, s14
 80029ae:	eeb0 0a67 	vmov.f32	s0, s15
 80029b2:	f7ff ff27 	bl	8002804 <send_data_to_e22>
	  HAL_Delay(500);
 80029b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029ba:	f000 fb63 	bl	8003084 <HAL_Delay>
	  bno055_gyro(&bno, &gyroscope);
 80029be:	e7a1      	b.n	8002904 <main+0x50>
 80029c0:	200001fc 	.word	0x200001fc
 80029c4:	20000294 	.word	0x20000294
 80029c8:	20000298 	.word	0x20000298
 80029cc:	2000029c 	.word	0x2000029c
 80029d0:	200002a0 	.word	0x200002a0
 80029d4:	200002a4 	.word	0x200002a4
 80029d8:	200002a8 	.word	0x200002a8

080029dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b094      	sub	sp, #80	; 0x50
 80029e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e2:	f107 0320 	add.w	r3, r7, #32
 80029e6:	2230      	movs	r2, #48	; 0x30
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 feec 	bl	80057c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <SystemClock_Config+0xcc>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <SystemClock_Config+0xcc>)
 8002a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <SystemClock_Config+0xcc>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	4b22      	ldr	r3, [pc, #136]	; (8002aac <SystemClock_Config+0xd0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a21      	ldr	r2, [pc, #132]	; (8002aac <SystemClock_Config+0xd0>)
 8002a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <SystemClock_Config+0xd0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a42:	2302      	movs	r3, #2
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a50:	23a8      	movs	r3, #168	; 0xa8
 8002a52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a54:	2302      	movs	r3, #2
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a58:	2304      	movs	r3, #4
 8002a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a5c:	f107 0320 	add.w	r3, r7, #32
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 fedb 	bl	800481c <HAL_RCC_OscConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a6c:	f000 f8ae 	bl	8002bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a70:	230f      	movs	r3, #15
 8002a72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a74:	2302      	movs	r3, #2
 8002a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2105      	movs	r1, #5
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 f93c 	bl	8004d0c <HAL_RCC_ClockConfig>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a9a:	f000 f897 	bl	8002bcc <Error_Handler>
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3750      	adds	r7, #80	; 0x50
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40007000 	.word	0x40007000

08002ab0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <MX_I2C1_Init+0x50>)
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <MX_I2C1_Init+0x54>)
 8002ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <MX_I2C1_Init+0x50>)
 8002abc:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <MX_I2C1_Init+0x58>)
 8002abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <MX_I2C1_Init+0x50>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_I2C1_Init+0x50>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_I2C1_Init+0x50>)
 8002ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ad2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <MX_I2C1_Init+0x50>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_I2C1_Init+0x50>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <MX_I2C1_Init+0x50>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_I2C1_Init+0x50>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002aec:	4804      	ldr	r0, [pc, #16]	; (8002b00 <MX_I2C1_Init+0x50>)
 8002aee:	f000 fd6f 	bl	80035d0 <HAL_I2C_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002af8:	f000 f868 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200001fc 	.word	0x200001fc
 8002b04:	40005400 	.word	0x40005400
 8002b08:	000186a0 	.word	0x000186a0

08002b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <MX_USART2_UART_Init+0x50>)
 8002b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b32:	220c      	movs	r2, #12
 8002b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b44:	f002 fb02 	bl	800514c <HAL_UART_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b4e:	f000 f83d 	bl	8002bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000250 	.word	0x20000250
 8002b5c:	40004400 	.word	0x40004400

08002b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <MX_GPIO_Init+0x68>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <MX_GPIO_Init+0x68>)
 8002b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <MX_GPIO_Init+0x68>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <MX_GPIO_Init+0x68>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <MX_GPIO_Init+0x68>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <MX_GPIO_Init+0x68>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <MX_GPIO_Init+0x68>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <MX_GPIO_Init+0x68>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <MX_GPIO_Init+0x68>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]

}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800

08002bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd0:	b672      	cpsid	i
}
 8002bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <Error_Handler+0x8>
	...

08002bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_MspInit+0x4c>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_MspInit+0x4c>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_MspInit+0x4c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_MspInit+0x4c>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <HAL_MspInit+0x4c>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_MspInit+0x4c>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800

08002c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a19      	ldr	r2, [pc, #100]	; (8002cac <HAL_I2C_MspInit+0x84>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d12b      	bne.n	8002ca2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_I2C_MspInit+0x88>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <HAL_I2C_MspInit+0x88>)
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_I2C_MspInit+0x88>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c66:	23c0      	movs	r3, #192	; 0xc0
 8002c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c6a:	2312      	movs	r3, #18
 8002c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c72:	2303      	movs	r3, #3
 8002c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c76:	2304      	movs	r3, #4
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480c      	ldr	r0, [pc, #48]	; (8002cb4 <HAL_I2C_MspInit+0x8c>)
 8002c82:	f000 fb09 	bl	8003298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_I2C_MspInit+0x88>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <HAL_I2C_MspInit+0x88>)
 8002c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_I2C_MspInit+0x88>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ca2:	bf00      	nop
 8002ca4:	3728      	adds	r7, #40	; 0x28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40005400 	.word	0x40005400
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020400 	.word	0x40020400

08002cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_UART_MspInit+0x84>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d12b      	bne.n	8002d32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d12:	230c      	movs	r3, #12
 8002d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d22:	2307      	movs	r3, #7
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4805      	ldr	r0, [pc, #20]	; (8002d44 <HAL_UART_MspInit+0x8c>)
 8002d2e:	f000 fab3 	bl	8003298 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d32:	bf00      	nop
 8002d34:	3728      	adds	r7, #40	; 0x28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40004400 	.word	0x40004400
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020000 	.word	0x40020000

08002d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <NMI_Handler+0x4>

08002d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <HardFault_Handler+0x4>

08002d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <MemManage_Handler+0x4>

08002d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5e:	e7fe      	b.n	8002d5e <BusFault_Handler+0x4>

08002d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <UsageFault_Handler+0x4>

08002d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d94:	f000 f956 	bl	8003044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return 1;
 8002da0:	2301      	movs	r3, #1
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <_kill>:

int _kill(int pid, int sig)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002db6:	f002 fccf 	bl	8005758 <__errno>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2216      	movs	r2, #22
 8002dbe:	601a      	str	r2, [r3, #0]
  return -1;
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <_exit>:

void _exit (int status)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ffe7 	bl	8002dac <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dde:	e7fe      	b.n	8002dde <_exit+0x12>

08002de0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e00a      	b.n	8002e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002df2:	f3af 8000 	nop.w
 8002df6:	4601      	mov	r1, r0
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	60ba      	str	r2, [r7, #8]
 8002dfe:	b2ca      	uxtb	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	3301      	adds	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	dbf0      	blt.n	8002df2 <_read+0x12>
  }

  return len;
 8002e10:	687b      	ldr	r3, [r7, #4]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e009      	b.n	8002e40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	60ba      	str	r2, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	dbf1      	blt.n	8002e2c <_write+0x12>
  }
  return len;
 8002e48:	687b      	ldr	r3, [r7, #4]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <_close>:

int _close(int file)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <_isatty>:

int _isatty(int file)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <_sbrk+0x5c>)
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <_sbrk+0x60>)
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <_sbrk+0x64>)
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <_sbrk+0x68>)
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <_sbrk+0x64>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d207      	bcs.n	8002efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eec:	f002 fc34 	bl	8005758 <__errno>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8002efa:	e009      	b.n	8002f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <_sbrk+0x64>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <_sbrk+0x64>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <_sbrk+0x64>)
 8002f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20020000 	.word	0x20020000
 8002f1c:	00000400 	.word	0x00000400
 8002f20:	200002ac 	.word	0x200002ac
 8002f24:	200002c8 	.word	0x200002c8

08002f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <SystemInit+0x20>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <SystemInit+0x20>)
 8002f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f50:	480d      	ldr	r0, [pc, #52]	; (8002f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f52:	490e      	ldr	r1, [pc, #56]	; (8002f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f54:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f58:	e002      	b.n	8002f60 <LoopCopyDataInit>

08002f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5e:	3304      	adds	r3, #4

08002f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f64:	d3f9      	bcc.n	8002f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f66:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f68:	4c0b      	ldr	r4, [pc, #44]	; (8002f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f6c:	e001      	b.n	8002f72 <LoopFillZerobss>

08002f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f70:	3204      	adds	r2, #4

08002f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f74:	d3fb      	bcc.n	8002f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f76:	f7ff ffd7 	bl	8002f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f7a:	f002 fbf3 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f7e:	f7ff fc99 	bl	80028b4 <main>
  bx  lr    
 8002f82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f8c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002f90:	0800a5bc 	.word	0x0800a5bc
  ldr r2, =_sbss
 8002f94:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002f98:	200002c4 	.word	0x200002c4

08002f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f9c:	e7fe      	b.n	8002f9c <ADC_IRQHandler>
	...

08002fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <HAL_Init+0x40>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <HAL_Init+0x40>)
 8002faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_Init+0x40>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_Init+0x40>)
 8002fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_Init+0x40>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <HAL_Init+0x40>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc8:	2003      	movs	r0, #3
 8002fca:	f000 f931 	bl	8003230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fce:	200f      	movs	r0, #15
 8002fd0:	f000 f808 	bl	8002fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fd4:	f7ff fe00 	bl	8002bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00

08002fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_InitTick+0x54>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_InitTick+0x58>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f93b 	bl	800327e <HAL_SYSTICK_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e00e      	b.n	8003030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d80a      	bhi.n	800302e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003018:	2200      	movs	r2, #0
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	f000 f911 	bl	8003246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003024:	4a06      	ldr	r2, [pc, #24]	; (8003040 <HAL_InitTick+0x5c>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000000 	.word	0x20000000
 800303c:	20000008 	.word	0x20000008
 8003040:	20000004 	.word	0x20000004

08003044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_IncTick+0x20>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_IncTick+0x24>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4413      	add	r3, r2
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_IncTick+0x24>)
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000008 	.word	0x20000008
 8003068:	200002b0 	.word	0x200002b0

0800306c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return uwTick;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_GetTick+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	200002b0 	.word	0x200002b0

08003084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff ffee 	bl	800306c <HAL_GetTick>
 8003090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d005      	beq.n	80030aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_Delay+0x44>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030aa:	bf00      	nop
 80030ac:	f7ff ffde 	bl	800306c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d8f7      	bhi.n	80030ac <HAL_Delay+0x28>
  {
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000008 	.word	0x20000008

080030cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e8:	4013      	ands	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030fe:	4a04      	ldr	r2, [pc, #16]	; (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	60d3      	str	r3, [r2, #12]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <__NVIC_GetPriorityGrouping+0x18>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 0307 	and.w	r3, r3, #7
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003140:	2b00      	cmp	r3, #0
 8003142:	db0a      	blt.n	800315a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	490c      	ldr	r1, [pc, #48]	; (800317c <__NVIC_SetPriority+0x4c>)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	0112      	lsls	r2, r2, #4
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	440b      	add	r3, r1
 8003154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003158:	e00a      	b.n	8003170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4908      	ldr	r1, [pc, #32]	; (8003180 <__NVIC_SetPriority+0x50>)
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	3b04      	subs	r3, #4
 8003168:	0112      	lsls	r2, r2, #4
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	440b      	add	r3, r1
 800316e:	761a      	strb	r2, [r3, #24]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000e100 	.word	0xe000e100
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f1c3 0307 	rsb	r3, r3, #7
 800319e:	2b04      	cmp	r3, #4
 80031a0:	bf28      	it	cs
 80031a2:	2304      	movcs	r3, #4
 80031a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2b06      	cmp	r3, #6
 80031ac:	d902      	bls.n	80031b4 <NVIC_EncodePriority+0x30>
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3b03      	subs	r3, #3
 80031b2:	e000      	b.n	80031b6 <NVIC_EncodePriority+0x32>
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	401a      	ands	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031cc:	f04f 31ff 	mov.w	r1, #4294967295
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	43d9      	mvns	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	4313      	orrs	r3, r2
         );
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3724      	adds	r7, #36	; 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031fc:	d301      	bcc.n	8003202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fe:	2301      	movs	r3, #1
 8003200:	e00f      	b.n	8003222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <SysTick_Config+0x40>)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320a:	210f      	movs	r1, #15
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f7ff ff8e 	bl	8003130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <SysTick_Config+0x40>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321a:	4b04      	ldr	r3, [pc, #16]	; (800322c <SysTick_Config+0x40>)
 800321c:	2207      	movs	r2, #7
 800321e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	e000e010 	.word	0xe000e010

08003230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ff47 	bl	80030cc <__NVIC_SetPriorityGrouping>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003258:	f7ff ff5c 	bl	8003114 <__NVIC_GetPriorityGrouping>
 800325c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	6978      	ldr	r0, [r7, #20]
 8003264:	f7ff ff8e 	bl	8003184 <NVIC_EncodePriority>
 8003268:	4602      	mov	r2, r0
 800326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff5d 	bl	8003130 <__NVIC_SetPriority>
}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ffb0 	bl	80031ec <SysTick_Config>
 800328c:	4603      	mov	r3, r0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e16b      	b.n	800358c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032b4:	2201      	movs	r2, #1
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	f040 815a 	bne.w	8003586 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d005      	beq.n	80032ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d130      	bne.n	800334c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	2203      	movs	r2, #3
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003320:	2201      	movs	r2, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 0201 	and.w	r2, r3, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b03      	cmp	r3, #3
 8003356:	d017      	beq.n	8003388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	2203      	movs	r2, #3
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d123      	bne.n	80033dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	08da      	lsrs	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3208      	adds	r2, #8
 800339c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	220f      	movs	r2, #15
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	08da      	lsrs	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3208      	adds	r2, #8
 80033d6:	69b9      	ldr	r1, [r7, #24]
 80033d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0203 	and.w	r2, r3, #3
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80b4 	beq.w	8003586 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	4b60      	ldr	r3, [pc, #384]	; (80035a4 <HAL_GPIO_Init+0x30c>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4a5f      	ldr	r2, [pc, #380]	; (80035a4 <HAL_GPIO_Init+0x30c>)
 8003428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800342c:	6453      	str	r3, [r2, #68]	; 0x44
 800342e:	4b5d      	ldr	r3, [pc, #372]	; (80035a4 <HAL_GPIO_Init+0x30c>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800343a:	4a5b      	ldr	r2, [pc, #364]	; (80035a8 <HAL_GPIO_Init+0x310>)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	3302      	adds	r3, #2
 8003442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	220f      	movs	r2, #15
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a52      	ldr	r2, [pc, #328]	; (80035ac <HAL_GPIO_Init+0x314>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02b      	beq.n	80034be <HAL_GPIO_Init+0x226>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a51      	ldr	r2, [pc, #324]	; (80035b0 <HAL_GPIO_Init+0x318>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d025      	beq.n	80034ba <HAL_GPIO_Init+0x222>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a50      	ldr	r2, [pc, #320]	; (80035b4 <HAL_GPIO_Init+0x31c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01f      	beq.n	80034b6 <HAL_GPIO_Init+0x21e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a4f      	ldr	r2, [pc, #316]	; (80035b8 <HAL_GPIO_Init+0x320>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d019      	beq.n	80034b2 <HAL_GPIO_Init+0x21a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4e      	ldr	r2, [pc, #312]	; (80035bc <HAL_GPIO_Init+0x324>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_GPIO_Init+0x216>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4d      	ldr	r2, [pc, #308]	; (80035c0 <HAL_GPIO_Init+0x328>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00d      	beq.n	80034aa <HAL_GPIO_Init+0x212>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4c      	ldr	r2, [pc, #304]	; (80035c4 <HAL_GPIO_Init+0x32c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <HAL_GPIO_Init+0x20e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4b      	ldr	r2, [pc, #300]	; (80035c8 <HAL_GPIO_Init+0x330>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_GPIO_Init+0x20a>
 800349e:	2307      	movs	r3, #7
 80034a0:	e00e      	b.n	80034c0 <HAL_GPIO_Init+0x228>
 80034a2:	2308      	movs	r3, #8
 80034a4:	e00c      	b.n	80034c0 <HAL_GPIO_Init+0x228>
 80034a6:	2306      	movs	r3, #6
 80034a8:	e00a      	b.n	80034c0 <HAL_GPIO_Init+0x228>
 80034aa:	2305      	movs	r3, #5
 80034ac:	e008      	b.n	80034c0 <HAL_GPIO_Init+0x228>
 80034ae:	2304      	movs	r3, #4
 80034b0:	e006      	b.n	80034c0 <HAL_GPIO_Init+0x228>
 80034b2:	2303      	movs	r3, #3
 80034b4:	e004      	b.n	80034c0 <HAL_GPIO_Init+0x228>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e002      	b.n	80034c0 <HAL_GPIO_Init+0x228>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_GPIO_Init+0x228>
 80034be:	2300      	movs	r3, #0
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	f002 0203 	and.w	r2, r2, #3
 80034c6:	0092      	lsls	r2, r2, #2
 80034c8:	4093      	lsls	r3, r2
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d0:	4935      	ldr	r1, [pc, #212]	; (80035a8 <HAL_GPIO_Init+0x310>)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034de:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_GPIO_Init+0x334>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003502:	4a32      	ldr	r2, [pc, #200]	; (80035cc <HAL_GPIO_Init+0x334>)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003508:	4b30      	ldr	r3, [pc, #192]	; (80035cc <HAL_GPIO_Init+0x334>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800352c:	4a27      	ldr	r2, [pc, #156]	; (80035cc <HAL_GPIO_Init+0x334>)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <HAL_GPIO_Init+0x334>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <HAL_GPIO_Init+0x334>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_GPIO_Init+0x334>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003580:	4a12      	ldr	r2, [pc, #72]	; (80035cc <HAL_GPIO_Init+0x334>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3301      	adds	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b0f      	cmp	r3, #15
 8003590:	f67f ae90 	bls.w	80032b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40013800 	.word	0x40013800
 80035ac:	40020000 	.word	0x40020000
 80035b0:	40020400 	.word	0x40020400
 80035b4:	40020800 	.word	0x40020800
 80035b8:	40020c00 	.word	0x40020c00
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40021400 	.word	0x40021400
 80035c4:	40021800 	.word	0x40021800
 80035c8:	40021c00 	.word	0x40021c00
 80035cc:	40013c00 	.word	0x40013c00

080035d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e12b      	b.n	800383a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fb16 	bl	8002c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003622:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003632:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003634:	f001 fd62 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 8003638:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4a81      	ldr	r2, [pc, #516]	; (8003844 <HAL_I2C_Init+0x274>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d807      	bhi.n	8003654 <HAL_I2C_Init+0x84>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4a80      	ldr	r2, [pc, #512]	; (8003848 <HAL_I2C_Init+0x278>)
 8003648:	4293      	cmp	r3, r2
 800364a:	bf94      	ite	ls
 800364c:	2301      	movls	r3, #1
 800364e:	2300      	movhi	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e006      	b.n	8003662 <HAL_I2C_Init+0x92>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a7d      	ldr	r2, [pc, #500]	; (800384c <HAL_I2C_Init+0x27c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	bf94      	ite	ls
 800365c:	2301      	movls	r3, #1
 800365e:	2300      	movhi	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e0e7      	b.n	800383a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4a78      	ldr	r2, [pc, #480]	; (8003850 <HAL_I2C_Init+0x280>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0c9b      	lsrs	r3, r3, #18
 8003674:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a6a      	ldr	r2, [pc, #424]	; (8003844 <HAL_I2C_Init+0x274>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d802      	bhi.n	80036a4 <HAL_I2C_Init+0xd4>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	3301      	adds	r3, #1
 80036a2:	e009      	b.n	80036b8 <HAL_I2C_Init+0xe8>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	4a69      	ldr	r2, [pc, #420]	; (8003854 <HAL_I2C_Init+0x284>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	3301      	adds	r3, #1
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	430b      	orrs	r3, r1
 80036be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	495c      	ldr	r1, [pc, #368]	; (8003844 <HAL_I2C_Init+0x274>)
 80036d4:	428b      	cmp	r3, r1
 80036d6:	d819      	bhi.n	800370c <HAL_I2C_Init+0x13c>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1e59      	subs	r1, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e6:	1c59      	adds	r1, r3, #1
 80036e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036ec:	400b      	ands	r3, r1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_I2C_Init+0x138>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1e59      	subs	r1, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003700:	3301      	adds	r3, #1
 8003702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003706:	e051      	b.n	80037ac <HAL_I2C_Init+0x1dc>
 8003708:	2304      	movs	r3, #4
 800370a:	e04f      	b.n	80037ac <HAL_I2C_Init+0x1dc>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d111      	bne.n	8003738 <HAL_I2C_Init+0x168>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1e58      	subs	r0, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	440b      	add	r3, r1
 8003722:	fbb0 f3f3 	udiv	r3, r0, r3
 8003726:	3301      	adds	r3, #1
 8003728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e012      	b.n	800375e <HAL_I2C_Init+0x18e>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1e58      	subs	r0, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6859      	ldr	r1, [r3, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	0099      	lsls	r1, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	fbb0 f3f3 	udiv	r3, r0, r3
 800374e:	3301      	adds	r3, #1
 8003750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Init+0x196>
 8003762:	2301      	movs	r3, #1
 8003764:	e022      	b.n	80037ac <HAL_I2C_Init+0x1dc>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10e      	bne.n	800378c <HAL_I2C_Init+0x1bc>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1e58      	subs	r0, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	440b      	add	r3, r1
 800377c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003780:	3301      	adds	r3, #1
 8003782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378a:	e00f      	b.n	80037ac <HAL_I2C_Init+0x1dc>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e58      	subs	r0, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	0099      	lsls	r1, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	6809      	ldr	r1, [r1, #0]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6911      	ldr	r1, [r2, #16]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	4311      	orrs	r1, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	000186a0 	.word	0x000186a0
 8003848:	001e847f 	.word	0x001e847f
 800384c:	003d08ff 	.word	0x003d08ff
 8003850:	431bde83 	.word	0x431bde83
 8003854:	10624dd3 	.word	0x10624dd3

08003858 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	461a      	mov	r2, r3
 8003864:	460b      	mov	r3, r1
 8003866:	817b      	strh	r3, [r7, #10]
 8003868:	4613      	mov	r3, r2
 800386a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800386c:	f7ff fbfe 	bl	800306c <HAL_GetTick>
 8003870:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	f040 80e0 	bne.w	8003a40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2319      	movs	r3, #25
 8003886:	2201      	movs	r2, #1
 8003888:	4970      	ldr	r1, [pc, #448]	; (8003a4c <HAL_I2C_Master_Transmit+0x1f4>)
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fde8 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
 8003898:	e0d3      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_I2C_Master_Transmit+0x50>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0cc      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d007      	beq.n	80038ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2221      	movs	r2, #33	; 0x21
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2210      	movs	r2, #16
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	893a      	ldrh	r2, [r7, #8]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4a50      	ldr	r2, [pc, #320]	; (8003a50 <HAL_I2C_Master_Transmit+0x1f8>)
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003910:	8979      	ldrh	r1, [r7, #10]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	6a3a      	ldr	r2, [r7, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fbbc 	bl	8004094 <I2C_MasterRequestWrite>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e08d      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800393c:	e066      	b.n	8003a0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	6a39      	ldr	r1, [r7, #32]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fe62 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	2b04      	cmp	r3, #4
 8003954:	d107      	bne.n	8003966 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003964:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06b      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11b      	bne.n	80039e0 <HAL_I2C_Master_Transmit+0x188>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d017      	beq.n	80039e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	6a39      	ldr	r1, [r7, #32]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fe52 	bl	800468e <I2C_WaitOnBTFFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d107      	bne.n	8003a08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e01a      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d194      	bne.n	800393e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	00100002 	.word	0x00100002
 8003a50:	ffff0000 	.word	0xffff0000

08003a54 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	460b      	mov	r3, r1
 8003a62:	817b      	strh	r3, [r7, #10]
 8003a64:	4613      	mov	r3, r2
 8003a66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a68:	f7ff fb00 	bl	800306c <HAL_GetTick>
 8003a6c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	f040 820b 	bne.w	8003e92 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2319      	movs	r3, #25
 8003a82:	2201      	movs	r2, #1
 8003a84:	497c      	ldr	r1, [pc, #496]	; (8003c78 <HAL_I2C_Master_Receive+0x224>)
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fcea 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
 8003a94:	e1fe      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_I2C_Master_Receive+0x50>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e1f7      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d007      	beq.n	8003aca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2222      	movs	r2, #34	; 0x22
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	893a      	ldrh	r2, [r7, #8]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a5c      	ldr	r2, [pc, #368]	; (8003c7c <HAL_I2C_Master_Receive+0x228>)
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b0c:	8979      	ldrh	r1, [r7, #10]
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fb40 	bl	8004198 <I2C_MasterRequestRead>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e1b8      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d113      	bne.n	8003b52 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	623b      	str	r3, [r7, #32]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e18c      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d11b      	bne.n	8003b92 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e16c      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d11b      	bne.n	8003bd2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	e14c      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bf8:	e138      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	f200 80f1 	bhi.w	8003de6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d123      	bne.n	8003c54 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fd7d 	bl	8004710 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e139      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c52:	e10b      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d14e      	bne.n	8003cfa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	2200      	movs	r2, #0
 8003c64:	4906      	ldr	r1, [pc, #24]	; (8003c80 <HAL_I2C_Master_Receive+0x22c>)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fbfa 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e10e      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
 8003c76:	bf00      	nop
 8003c78:	00100002 	.word	0x00100002
 8003c7c:	ffff0000 	.word	0xffff0000
 8003c80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cf8:	e0b8      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	2200      	movs	r2, #0
 8003d02:	4966      	ldr	r1, [pc, #408]	; (8003e9c <HAL_I2C_Master_Receive+0x448>)
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fbab 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0bf      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	494f      	ldr	r1, [pc, #316]	; (8003e9c <HAL_I2C_Master_Receive+0x448>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fb7d 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e091      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de4:	e042      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fc90 	bl	8004710 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e04c      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d118      	bne.n	8003e6c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f47f aec2 	bne.w	8003bfa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3728      	adds	r7, #40	; 0x28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	00010004 	.word	0x00010004

08003ea0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	817b      	strh	r3, [r7, #10]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	813b      	strh	r3, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eba:	f7ff f8d7 	bl	800306c <HAL_GetTick>
 8003ebe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	f040 80d9 	bne.w	8004080 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2319      	movs	r3, #25
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	496d      	ldr	r1, [pc, #436]	; (800408c <HAL_I2C_Mem_Write+0x1ec>)
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fac1 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e0cc      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2C_Mem_Write+0x56>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e0c5      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d007      	beq.n	8003f1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2221      	movs	r2, #33	; 0x21
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2240      	movs	r2, #64	; 0x40
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a4d      	ldr	r2, [pc, #308]	; (8004090 <HAL_I2C_Mem_Write+0x1f0>)
 8003f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f5e:	88f8      	ldrh	r0, [r7, #6]
 8003f60:	893a      	ldrh	r2, [r7, #8]
 8003f62:	8979      	ldrh	r1, [r7, #10]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f9e0 	bl	8004334 <I2C_RequestMemoryWrite>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d052      	beq.n	8004020 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e081      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fb42 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d107      	bne.n	8003fa6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06b      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d11b      	bne.n	8004020 <HAL_I2C_Mem_Write+0x180>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d017      	beq.n	8004020 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1aa      	bne.n	8003f7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fb2e 	bl	800468e <I2C_WaitOnBTFFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	2b04      	cmp	r3, #4
 800403e:	d107      	bne.n	8004050 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e016      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	00100002 	.word	0x00100002
 8004090:	ffff0000 	.word	0xffff0000

08004094 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	460b      	mov	r3, r1
 80040a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d006      	beq.n	80040be <I2C_MasterRequestWrite+0x2a>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d003      	beq.n	80040be <I2C_MasterRequestWrite+0x2a>
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040bc:	d108      	bne.n	80040d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e00b      	b.n	80040e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	2b12      	cmp	r3, #18
 80040d6:	d107      	bne.n	80040e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f9b3 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410e:	d103      	bne.n	8004118 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e035      	b.n	8004188 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004124:	d108      	bne.n	8004138 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004134:	611a      	str	r2, [r3, #16]
 8004136:	e01b      	b.n	8004170 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004138:	897b      	ldrh	r3, [r7, #10]
 800413a:	11db      	asrs	r3, r3, #7
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f003 0306 	and.w	r3, r3, #6
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f063 030f 	orn	r3, r3, #15
 8004148:	b2da      	uxtb	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	490e      	ldr	r1, [pc, #56]	; (8004190 <I2C_MasterRequestWrite+0xfc>)
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f9d9 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e010      	b.n	8004188 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004166:	897b      	ldrh	r3, [r7, #10]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4907      	ldr	r1, [pc, #28]	; (8004194 <I2C_MasterRequestWrite+0x100>)
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f9c9 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	00010008 	.word	0x00010008
 8004194:	00010002 	.word	0x00010002

08004198 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	460b      	mov	r3, r1
 80041a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d006      	beq.n	80041d2 <I2C_MasterRequestRead+0x3a>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d003      	beq.n	80041d2 <I2C_MasterRequestRead+0x3a>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041d0:	d108      	bne.n	80041e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e00b      	b.n	80041fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	2b11      	cmp	r3, #17
 80041ea:	d107      	bne.n	80041fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f929 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004222:	d103      	bne.n	800422c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e079      	b.n	8004324 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004238:	d108      	bne.n	800424c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800423a:	897b      	ldrh	r3, [r7, #10]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	611a      	str	r2, [r3, #16]
 800424a:	e05f      	b.n	800430c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800424c:	897b      	ldrh	r3, [r7, #10]
 800424e:	11db      	asrs	r3, r3, #7
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 0306 	and.w	r3, r3, #6
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f063 030f 	orn	r3, r3, #15
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4930      	ldr	r1, [pc, #192]	; (800432c <I2C_MasterRequestRead+0x194>)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f94f 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e054      	b.n	8004324 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800427a:	897b      	ldrh	r3, [r7, #10]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4929      	ldr	r1, [pc, #164]	; (8004330 <I2C_MasterRequestRead+0x198>)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f93f 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e044      	b.n	8004324 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f8c7 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00d      	beq.n	80042f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e6:	d103      	bne.n	80042f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e017      	b.n	8004324 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80042f4:	897b      	ldrh	r3, [r7, #10]
 80042f6:	11db      	asrs	r3, r3, #7
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0306 	and.w	r3, r3, #6
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f063 030e 	orn	r3, r3, #14
 8004304:	b2da      	uxtb	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4907      	ldr	r1, [pc, #28]	; (8004330 <I2C_MasterRequestRead+0x198>)
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f8fb 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	00010008 	.word	0x00010008
 8004330:	00010002 	.word	0x00010002

08004334 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2200      	movs	r2, #0
 8004366:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f878 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004384:	d103      	bne.n	800438e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e05f      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004392:	897b      	ldrh	r3, [r7, #10]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	492d      	ldr	r1, [pc, #180]	; (800445c <I2C_RequestMemoryWrite+0x128>)
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f8b0 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e04c      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d0:	6a39      	ldr	r1, [r7, #32]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f91a 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d107      	bne.n	80043f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e02b      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]
 800440a:	e021      	b.n	8004450 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800440c:	893b      	ldrh	r3, [r7, #8]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	b29b      	uxth	r3, r3
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	6a39      	ldr	r1, [r7, #32]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f8f4 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	2b04      	cmp	r3, #4
 8004430:	d107      	bne.n	8004442 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e005      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004446:	893b      	ldrh	r3, [r7, #8]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	00010002 	.word	0x00010002

08004460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004470:	e025      	b.n	80044be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d021      	beq.n	80044be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fe fdf7 	bl	800306c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d116      	bne.n	80044be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f043 0220 	orr.w	r2, r3, #32
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e023      	b.n	8004506 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10d      	bne.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	43da      	mvns	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	e00c      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	43da      	mvns	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	429a      	cmp	r2, r3
 8004502:	d0b6      	beq.n	8004472 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800451c:	e051      	b.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452c:	d123      	bne.n	8004576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004546:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f043 0204 	orr.w	r2, r3, #4
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e046      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d021      	beq.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457e:	f7fe fd75 	bl	800306c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d116      	bne.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e020      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d10c      	bne.n	80045e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	43da      	mvns	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4013      	ands	r3, r2
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bf14      	ite	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	2300      	moveq	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	e00b      	b.n	80045fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	43da      	mvns	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4013      	ands	r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d18d      	bne.n	800451e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004618:	e02d      	b.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f8ce 	bl	80047bc <I2C_IsAcknowledgeFailed>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e02d      	b.n	8004686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d021      	beq.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7fe fd1b 	bl	800306c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d116      	bne.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f043 0220 	orr.w	r2, r3, #32
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e007      	b.n	8004686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004680:	2b80      	cmp	r3, #128	; 0x80
 8004682:	d1ca      	bne.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800469a:	e02d      	b.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f88d 	bl	80047bc <I2C_IsAcknowledgeFailed>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e02d      	b.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d021      	beq.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fe fcda 	bl	800306c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d116      	bne.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e007      	b.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d1ca      	bne.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800471c:	e042      	b.n	80047a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b10      	cmp	r3, #16
 800472a:	d119      	bne.n	8004760 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0210 	mvn.w	r2, #16
 8004734:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e029      	b.n	80047b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004760:	f7fe fc84 	bl	800306c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	429a      	cmp	r2, r3
 800476e:	d302      	bcc.n	8004776 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d116      	bne.n	80047a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e007      	b.n	80047b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d1b5      	bne.n	800471e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d2:	d11b      	bne.n	800480c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	f043 0204 	orr.w	r2, r3, #4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e267      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d075      	beq.n	8004926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483a:	4b88      	ldr	r3, [pc, #544]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b04      	cmp	r3, #4
 8004844:	d00c      	beq.n	8004860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004846:	4b85      	ldr	r3, [pc, #532]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800484e:	2b08      	cmp	r3, #8
 8004850:	d112      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004852:	4b82      	ldr	r3, [pc, #520]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485e:	d10b      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	4b7e      	ldr	r3, [pc, #504]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05b      	beq.n	8004924 <HAL_RCC_OscConfig+0x108>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d157      	bne.n	8004924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e242      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d106      	bne.n	8004890 <HAL_RCC_OscConfig+0x74>
 8004882:	4b76      	ldr	r3, [pc, #472]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a75      	ldr	r2, [pc, #468]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x98>
 800489a:	4b70      	ldr	r3, [pc, #448]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a6f      	ldr	r2, [pc, #444]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b6d      	ldr	r3, [pc, #436]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a6c      	ldr	r2, [pc, #432]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 80048b4:	4b69      	ldr	r3, [pc, #420]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a68      	ldr	r2, [pc, #416]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a65      	ldr	r2, [pc, #404]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fe fbca 	bl	800306c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fe fbc6 	bl	800306c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e207      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b5b      	ldr	r3, [pc, #364]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xc0>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe fbb6 	bl	800306c <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004904:	f7fe fbb2 	bl	800306c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	; 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1f3      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	4b51      	ldr	r3, [pc, #324]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0xe8>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d063      	beq.n	80049fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004932:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493e:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004946:	2b08      	cmp	r3, #8
 8004948:	d11c      	bne.n	8004984 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494a:	4b44      	ldr	r3, [pc, #272]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	4b41      	ldr	r3, [pc, #260]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_RCC_OscConfig+0x152>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d001      	beq.n	800496e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e1c7      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496e:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4937      	ldr	r1, [pc, #220]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004982:	e03a      	b.n	80049fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498c:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <HAL_RCC_OscConfig+0x244>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fe fb6b 	bl	800306c <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800499a:	f7fe fb67 	bl	800306c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e1a8      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4925      	ldr	r1, [pc, #148]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
 80049cc:	e015      	b.n	80049fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <HAL_RCC_OscConfig+0x244>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fe fb4a 	bl	800306c <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fe fb46 	bl	800306c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e187      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d036      	beq.n	8004a74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <HAL_RCC_OscConfig+0x248>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fe fb2a 	bl	800306c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fe fb26 	bl	800306c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e167      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_RCC_OscConfig+0x240>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x200>
 8004a3a:	e01b      	b.n	8004a74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_RCC_OscConfig+0x248>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fe fb13 	bl	800306c <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a48:	e00e      	b.n	8004a68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fe fb0f 	bl	800306c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d907      	bls.n	8004a68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e150      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	42470000 	.word	0x42470000
 8004a64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ea      	bne.n	8004a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8097 	beq.w	8004bb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a82:	2300      	movs	r3, #0
 8004a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a86:	4b81      	ldr	r3, [pc, #516]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	4b7d      	ldr	r3, [pc, #500]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a7c      	ldr	r2, [pc, #496]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b7a      	ldr	r3, [pc, #488]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab2:	4b77      	ldr	r3, [pc, #476]	; (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d118      	bne.n	8004af0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004abe:	4b74      	ldr	r3, [pc, #464]	; (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a73      	ldr	r2, [pc, #460]	; (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aca:	f7fe facf 	bl	800306c <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad2:	f7fe facb 	bl	800306c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e10c      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae4:	4b6a      	ldr	r3, [pc, #424]	; (8004c90 <HAL_RCC_OscConfig+0x474>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d106      	bne.n	8004b06 <HAL_RCC_OscConfig+0x2ea>
 8004af8:	4b64      	ldr	r3, [pc, #400]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	4a63      	ldr	r2, [pc, #396]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70
 8004b04:	e01c      	b.n	8004b40 <HAL_RCC_OscConfig+0x324>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCC_OscConfig+0x30c>
 8004b0e:	4b5f      	ldr	r3, [pc, #380]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	4a5e      	ldr	r2, [pc, #376]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b14:	f043 0304 	orr.w	r3, r3, #4
 8004b18:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1a:	4b5c      	ldr	r3, [pc, #368]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1e:	4a5b      	ldr	r2, [pc, #364]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	6713      	str	r3, [r2, #112]	; 0x70
 8004b26:	e00b      	b.n	8004b40 <HAL_RCC_OscConfig+0x324>
 8004b28:	4b58      	ldr	r3, [pc, #352]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a57      	ldr	r2, [pc, #348]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	4b55      	ldr	r3, [pc, #340]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4a54      	ldr	r2, [pc, #336]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b3a:	f023 0304 	bic.w	r3, r3, #4
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d015      	beq.n	8004b74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fe fa90 	bl	800306c <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b50:	f7fe fa8c 	bl	800306c <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0cb      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b66:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ee      	beq.n	8004b50 <HAL_RCC_OscConfig+0x334>
 8004b72:	e014      	b.n	8004b9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b74:	f7fe fa7a 	bl	800306c <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7c:	f7fe fa76 	bl	800306c <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e0b5      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b92:	4b3e      	ldr	r3, [pc, #248]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1ee      	bne.n	8004b7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba4:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	4a38      	ldr	r2, [pc, #224]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80a1 	beq.w	8004cfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bba:	4b34      	ldr	r3, [pc, #208]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d05c      	beq.n	8004c80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d141      	bne.n	8004c52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bce:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <HAL_RCC_OscConfig+0x478>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fe fa4a 	bl	800306c <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bdc:	f7fe fa46 	bl	800306c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e087      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bee:	4b27      	ldr	r3, [pc, #156]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	3b01      	subs	r3, #1
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	491b      	ldr	r1, [pc, #108]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c24:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_RCC_OscConfig+0x478>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2a:	f7fe fa1f 	bl	800306c <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fe fa1b 	bl	800306c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e05c      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c44:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x416>
 8004c50:	e054      	b.n	8004cfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <HAL_RCC_OscConfig+0x478>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7fe fa08 	bl	800306c <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fe fa04 	bl	800306c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e045      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_RCC_OscConfig+0x470>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x444>
 8004c7e:	e03d      	b.n	8004cfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d107      	bne.n	8004c98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e038      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40007000 	.word	0x40007000
 8004c94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <HAL_RCC_OscConfig+0x4ec>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d028      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d121      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d11a      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d111      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800

08004d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0cc      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d20:	4b68      	ldr	r3, [pc, #416]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d90c      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b65      	ldr	r3, [pc, #404]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b63      	ldr	r3, [pc, #396]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0b8      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d60:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a58      	ldr	r2, [pc, #352]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d78:	4b53      	ldr	r3, [pc, #332]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4a52      	ldr	r2, [pc, #328]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d84:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	494d      	ldr	r1, [pc, #308]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d044      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004daa:	4b47      	ldr	r3, [pc, #284]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d119      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d003      	beq.n	8004dca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b3f      	ldr	r3, [pc, #252]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e067      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dea:	4b37      	ldr	r3, [pc, #220]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f023 0203 	bic.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4934      	ldr	r1, [pc, #208]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dfc:	f7fe f936 	bl	800306c <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e04:	f7fe f932 	bl	800306c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e04f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 020c 	and.w	r2, r3, #12
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d1eb      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d20c      	bcs.n	8004e54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e032      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4916      	ldr	r1, [pc, #88]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e92:	f000 f821 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004e96:	4602      	mov	r2, r0
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	490a      	ldr	r1, [pc, #40]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004ea4:	5ccb      	ldrb	r3, [r1, r3]
 8004ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eaa:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe f896 	bl	8002fe4 <HAL_InitTick>

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023c00 	.word	0x40023c00
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	0800a0ec 	.word	0x0800a0ec
 8004ed0:	20000000 	.word	0x20000000
 8004ed4:	20000004 	.word	0x20000004

08004ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004edc:	b094      	sub	sp, #80	; 0x50
 8004ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee8:	2300      	movs	r3, #0
 8004eea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef0:	4b79      	ldr	r3, [pc, #484]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d00d      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x40>
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	f200 80e1 	bhi.w	80050c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x34>
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d003      	beq.n	8004f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f0a:	e0db      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f0c:	4b73      	ldr	r3, [pc, #460]	; (80050dc <HAL_RCC_GetSysClockFreq+0x204>)
 8004f0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f10:	e0db      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f12:	4b73      	ldr	r3, [pc, #460]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f16:	e0d8      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f18:	4b6f      	ldr	r3, [pc, #444]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f22:	4b6d      	ldr	r3, [pc, #436]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d063      	beq.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2e:	4b6a      	ldr	r3, [pc, #424]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	099b      	lsrs	r3, r3, #6
 8004f34:	2200      	movs	r2, #0
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f40:	633b      	str	r3, [r7, #48]	; 0x30
 8004f42:	2300      	movs	r3, #0
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
 8004f46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	f04f 0000 	mov.w	r0, #0
 8004f52:	f04f 0100 	mov.w	r1, #0
 8004f56:	0159      	lsls	r1, r3, #5
 8004f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f5c:	0150      	lsls	r0, r2, #5
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4621      	mov	r1, r4
 8004f64:	1a51      	subs	r1, r2, r1
 8004f66:	6139      	str	r1, [r7, #16]
 8004f68:	4629      	mov	r1, r5
 8004f6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	018b      	lsls	r3, r1, #6
 8004f80:	4651      	mov	r1, sl
 8004f82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f86:	4651      	mov	r1, sl
 8004f88:	018a      	lsls	r2, r1, #6
 8004f8a:	4651      	mov	r1, sl
 8004f8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004f90:	4659      	mov	r1, fp
 8004f92:	eb63 0901 	sbc.w	r9, r3, r1
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004faa:	4690      	mov	r8, r2
 8004fac:	4699      	mov	r9, r3
 8004fae:	4623      	mov	r3, r4
 8004fb0:	eb18 0303 	adds.w	r3, r8, r3
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	462b      	mov	r3, r5
 8004fb8:	eb49 0303 	adc.w	r3, r9, r3
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fca:	4629      	mov	r1, r5
 8004fcc:	024b      	lsls	r3, r1, #9
 8004fce:	4621      	mov	r1, r4
 8004fd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	024a      	lsls	r2, r1, #9
 8004fd8:	4610      	mov	r0, r2
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fde:	2200      	movs	r2, #0
 8004fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fe4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fe8:	f7fb fe4e 	bl	8000c88 <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff4:	e058      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff6:	4b38      	ldr	r3, [pc, #224]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	099b      	lsrs	r3, r3, #6
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	4618      	mov	r0, r3
 8005000:	4611      	mov	r1, r2
 8005002:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005006:	623b      	str	r3, [r7, #32]
 8005008:	2300      	movs	r3, #0
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
 800500c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	f04f 0000 	mov.w	r0, #0
 8005018:	f04f 0100 	mov.w	r1, #0
 800501c:	0159      	lsls	r1, r3, #5
 800501e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005022:	0150      	lsls	r0, r2, #5
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4641      	mov	r1, r8
 800502a:	ebb2 0a01 	subs.w	sl, r2, r1
 800502e:	4649      	mov	r1, r9
 8005030:	eb63 0b01 	sbc.w	fp, r3, r1
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005040:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005044:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005048:	ebb2 040a 	subs.w	r4, r2, sl
 800504c:	eb63 050b 	sbc.w	r5, r3, fp
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	00eb      	lsls	r3, r5, #3
 800505a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800505e:	00e2      	lsls	r2, r4, #3
 8005060:	4614      	mov	r4, r2
 8005062:	461d      	mov	r5, r3
 8005064:	4643      	mov	r3, r8
 8005066:	18e3      	adds	r3, r4, r3
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	464b      	mov	r3, r9
 800506c:	eb45 0303 	adc.w	r3, r5, r3
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800507e:	4629      	mov	r1, r5
 8005080:	028b      	lsls	r3, r1, #10
 8005082:	4621      	mov	r1, r4
 8005084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005088:	4621      	mov	r1, r4
 800508a:	028a      	lsls	r2, r1, #10
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005092:	2200      	movs	r2, #0
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	61fa      	str	r2, [r7, #28]
 8005098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800509c:	f7fb fdf4 	bl	8000c88 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4613      	mov	r3, r2
 80050a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	3301      	adds	r3, #1
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050c2:	e002      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCC_GetSysClockFreq+0x204>)
 80050c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3750      	adds	r7, #80	; 0x50
 80050d0:	46bd      	mov	sp, r7
 80050d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800
 80050dc:	00f42400 	.word	0x00f42400
 80050e0:	007a1200 	.word	0x007a1200

080050e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000000 	.word	0x20000000

080050fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005100:	f7ff fff0 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	0a9b      	lsrs	r3, r3, #10
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	4903      	ldr	r1, [pc, #12]	; (8005120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005118:	4618      	mov	r0, r3
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40023800 	.word	0x40023800
 8005120:	0800a0fc 	.word	0x0800a0fc

08005124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005128:	f7ff ffdc 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 800512c:	4602      	mov	r2, r0
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	0b5b      	lsrs	r3, r3, #13
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	4903      	ldr	r1, [pc, #12]	; (8005148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800513a:	5ccb      	ldrb	r3, [r1, r3]
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40023800 	.word	0x40023800
 8005148:	0800a0fc 	.word	0x0800a0fc

0800514c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e03f      	b.n	80051de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fd fda0 	bl	8002cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	; 0x24
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800518e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f86d 	bl	8005270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695a      	ldr	r2, [r3, #20]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	4613      	mov	r3, r2
 80051f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d130      	bne.n	8005262 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Transmit_IT+0x26>
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e029      	b.n	8005264 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_UART_Transmit_IT+0x38>
 800521a:	2302      	movs	r3, #2
 800521c:	e022      	b.n	8005264 <HAL_UART_Transmit_IT+0x7e>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	88fa      	ldrh	r2, [r7, #6]
 8005236:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2221      	movs	r2, #33	; 0x21
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800525c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005262:	2302      	movs	r3, #2
  }
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005274:	b0c0      	sub	sp, #256	; 0x100
 8005276:	af00      	add	r7, sp, #0
 8005278:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	68d9      	ldr	r1, [r3, #12]
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	ea40 0301 	orr.w	r3, r0, r1
 8005298:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052c8:	f021 010c 	bic.w	r1, r1, #12
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052d6:	430b      	orrs	r3, r1
 80052d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ea:	6999      	ldr	r1, [r3, #24]
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	ea40 0301 	orr.w	r3, r0, r1
 80052f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b8f      	ldr	r3, [pc, #572]	; (800553c <UART_SetConfig+0x2cc>)
 8005300:	429a      	cmp	r2, r3
 8005302:	d005      	beq.n	8005310 <UART_SetConfig+0xa0>
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4b8d      	ldr	r3, [pc, #564]	; (8005540 <UART_SetConfig+0x2d0>)
 800530c:	429a      	cmp	r2, r3
 800530e:	d104      	bne.n	800531a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005310:	f7ff ff08 	bl	8005124 <HAL_RCC_GetPCLK2Freq>
 8005314:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005318:	e003      	b.n	8005322 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800531a:	f7ff feef 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 800531e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532c:	f040 810c 	bne.w	8005548 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005334:	2200      	movs	r2, #0
 8005336:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800533a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800533e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005342:	4622      	mov	r2, r4
 8005344:	462b      	mov	r3, r5
 8005346:	1891      	adds	r1, r2, r2
 8005348:	65b9      	str	r1, [r7, #88]	; 0x58
 800534a:	415b      	adcs	r3, r3
 800534c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800534e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005352:	4621      	mov	r1, r4
 8005354:	eb12 0801 	adds.w	r8, r2, r1
 8005358:	4629      	mov	r1, r5
 800535a:	eb43 0901 	adc.w	r9, r3, r1
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800536a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800536e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005372:	4690      	mov	r8, r2
 8005374:	4699      	mov	r9, r3
 8005376:	4623      	mov	r3, r4
 8005378:	eb18 0303 	adds.w	r3, r8, r3
 800537c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005380:	462b      	mov	r3, r5
 8005382:	eb49 0303 	adc.w	r3, r9, r3
 8005386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005396:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800539a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800539e:	460b      	mov	r3, r1
 80053a0:	18db      	adds	r3, r3, r3
 80053a2:	653b      	str	r3, [r7, #80]	; 0x50
 80053a4:	4613      	mov	r3, r2
 80053a6:	eb42 0303 	adc.w	r3, r2, r3
 80053aa:	657b      	str	r3, [r7, #84]	; 0x54
 80053ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053b4:	f7fb fc68 	bl	8000c88 <__aeabi_uldivmod>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4b61      	ldr	r3, [pc, #388]	; (8005544 <UART_SetConfig+0x2d4>)
 80053be:	fba3 2302 	umull	r2, r3, r3, r2
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	011c      	lsls	r4, r3, #4
 80053c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053d8:	4642      	mov	r2, r8
 80053da:	464b      	mov	r3, r9
 80053dc:	1891      	adds	r1, r2, r2
 80053de:	64b9      	str	r1, [r7, #72]	; 0x48
 80053e0:	415b      	adcs	r3, r3
 80053e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053e8:	4641      	mov	r1, r8
 80053ea:	eb12 0a01 	adds.w	sl, r2, r1
 80053ee:	4649      	mov	r1, r9
 80053f0:	eb43 0b01 	adc.w	fp, r3, r1
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005400:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005408:	4692      	mov	sl, r2
 800540a:	469b      	mov	fp, r3
 800540c:	4643      	mov	r3, r8
 800540e:	eb1a 0303 	adds.w	r3, sl, r3
 8005412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005416:	464b      	mov	r3, r9
 8005418:	eb4b 0303 	adc.w	r3, fp, r3
 800541c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800542c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005430:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005434:	460b      	mov	r3, r1
 8005436:	18db      	adds	r3, r3, r3
 8005438:	643b      	str	r3, [r7, #64]	; 0x40
 800543a:	4613      	mov	r3, r2
 800543c:	eb42 0303 	adc.w	r3, r2, r3
 8005440:	647b      	str	r3, [r7, #68]	; 0x44
 8005442:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005446:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800544a:	f7fb fc1d 	bl	8000c88 <__aeabi_uldivmod>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4611      	mov	r1, r2
 8005454:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <UART_SetConfig+0x2d4>)
 8005456:	fba3 2301 	umull	r2, r3, r3, r1
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	2264      	movs	r2, #100	; 0x64
 800545e:	fb02 f303 	mul.w	r3, r2, r3
 8005462:	1acb      	subs	r3, r1, r3
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800546a:	4b36      	ldr	r3, [pc, #216]	; (8005544 <UART_SetConfig+0x2d4>)
 800546c:	fba3 2302 	umull	r2, r3, r3, r2
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005478:	441c      	add	r4, r3
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800547e:	2200      	movs	r2, #0
 8005480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005484:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005488:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800548c:	4642      	mov	r2, r8
 800548e:	464b      	mov	r3, r9
 8005490:	1891      	adds	r1, r2, r2
 8005492:	63b9      	str	r1, [r7, #56]	; 0x38
 8005494:	415b      	adcs	r3, r3
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800549c:	4641      	mov	r1, r8
 800549e:	1851      	adds	r1, r2, r1
 80054a0:	6339      	str	r1, [r7, #48]	; 0x30
 80054a2:	4649      	mov	r1, r9
 80054a4:	414b      	adcs	r3, r1
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054b4:	4659      	mov	r1, fp
 80054b6:	00cb      	lsls	r3, r1, #3
 80054b8:	4651      	mov	r1, sl
 80054ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054be:	4651      	mov	r1, sl
 80054c0:	00ca      	lsls	r2, r1, #3
 80054c2:	4610      	mov	r0, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	4642      	mov	r2, r8
 80054ca:	189b      	adds	r3, r3, r2
 80054cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054d0:	464b      	mov	r3, r9
 80054d2:	460a      	mov	r2, r1
 80054d4:	eb42 0303 	adc.w	r3, r2, r3
 80054d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054f0:	460b      	mov	r3, r1
 80054f2:	18db      	adds	r3, r3, r3
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f6:	4613      	mov	r3, r2
 80054f8:	eb42 0303 	adc.w	r3, r2, r3
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005502:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005506:	f7fb fbbf 	bl	8000c88 <__aeabi_uldivmod>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <UART_SetConfig+0x2d4>)
 8005510:	fba3 1302 	umull	r1, r3, r3, r2
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	2164      	movs	r1, #100	; 0x64
 8005518:	fb01 f303 	mul.w	r3, r1, r3
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	3332      	adds	r3, #50	; 0x32
 8005522:	4a08      	ldr	r2, [pc, #32]	; (8005544 <UART_SetConfig+0x2d4>)
 8005524:	fba2 2303 	umull	r2, r3, r2, r3
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	f003 0207 	and.w	r2, r3, #7
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4422      	add	r2, r4
 8005536:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005538:	e105      	b.n	8005746 <UART_SetConfig+0x4d6>
 800553a:	bf00      	nop
 800553c:	40011000 	.word	0x40011000
 8005540:	40011400 	.word	0x40011400
 8005544:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800554c:	2200      	movs	r2, #0
 800554e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005552:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005556:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800555a:	4642      	mov	r2, r8
 800555c:	464b      	mov	r3, r9
 800555e:	1891      	adds	r1, r2, r2
 8005560:	6239      	str	r1, [r7, #32]
 8005562:	415b      	adcs	r3, r3
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
 8005566:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800556a:	4641      	mov	r1, r8
 800556c:	1854      	adds	r4, r2, r1
 800556e:	4649      	mov	r1, r9
 8005570:	eb43 0501 	adc.w	r5, r3, r1
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	00eb      	lsls	r3, r5, #3
 800557e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005582:	00e2      	lsls	r2, r4, #3
 8005584:	4614      	mov	r4, r2
 8005586:	461d      	mov	r5, r3
 8005588:	4643      	mov	r3, r8
 800558a:	18e3      	adds	r3, r4, r3
 800558c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005590:	464b      	mov	r3, r9
 8005592:	eb45 0303 	adc.w	r3, r5, r3
 8005596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055b6:	4629      	mov	r1, r5
 80055b8:	008b      	lsls	r3, r1, #2
 80055ba:	4621      	mov	r1, r4
 80055bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055c0:	4621      	mov	r1, r4
 80055c2:	008a      	lsls	r2, r1, #2
 80055c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055c8:	f7fb fb5e 	bl	8000c88 <__aeabi_uldivmod>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4b60      	ldr	r3, [pc, #384]	; (8005754 <UART_SetConfig+0x4e4>)
 80055d2:	fba3 2302 	umull	r2, r3, r3, r2
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	011c      	lsls	r4, r3, #4
 80055da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055ec:	4642      	mov	r2, r8
 80055ee:	464b      	mov	r3, r9
 80055f0:	1891      	adds	r1, r2, r2
 80055f2:	61b9      	str	r1, [r7, #24]
 80055f4:	415b      	adcs	r3, r3
 80055f6:	61fb      	str	r3, [r7, #28]
 80055f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055fc:	4641      	mov	r1, r8
 80055fe:	1851      	adds	r1, r2, r1
 8005600:	6139      	str	r1, [r7, #16]
 8005602:	4649      	mov	r1, r9
 8005604:	414b      	adcs	r3, r1
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005614:	4659      	mov	r1, fp
 8005616:	00cb      	lsls	r3, r1, #3
 8005618:	4651      	mov	r1, sl
 800561a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800561e:	4651      	mov	r1, sl
 8005620:	00ca      	lsls	r2, r1, #3
 8005622:	4610      	mov	r0, r2
 8005624:	4619      	mov	r1, r3
 8005626:	4603      	mov	r3, r0
 8005628:	4642      	mov	r2, r8
 800562a:	189b      	adds	r3, r3, r2
 800562c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005630:	464b      	mov	r3, r9
 8005632:	460a      	mov	r2, r1
 8005634:	eb42 0303 	adc.w	r3, r2, r3
 8005638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	67bb      	str	r3, [r7, #120]	; 0x78
 8005646:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005654:	4649      	mov	r1, r9
 8005656:	008b      	lsls	r3, r1, #2
 8005658:	4641      	mov	r1, r8
 800565a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800565e:	4641      	mov	r1, r8
 8005660:	008a      	lsls	r2, r1, #2
 8005662:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005666:	f7fb fb0f 	bl	8000c88 <__aeabi_uldivmod>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4b39      	ldr	r3, [pc, #228]	; (8005754 <UART_SetConfig+0x4e4>)
 8005670:	fba3 1302 	umull	r1, r3, r3, r2
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	2164      	movs	r1, #100	; 0x64
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	3332      	adds	r3, #50	; 0x32
 8005682:	4a34      	ldr	r2, [pc, #208]	; (8005754 <UART_SetConfig+0x4e4>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800568e:	441c      	add	r4, r3
 8005690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005694:	2200      	movs	r2, #0
 8005696:	673b      	str	r3, [r7, #112]	; 0x70
 8005698:	677a      	str	r2, [r7, #116]	; 0x74
 800569a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800569e:	4642      	mov	r2, r8
 80056a0:	464b      	mov	r3, r9
 80056a2:	1891      	adds	r1, r2, r2
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	415b      	adcs	r3, r3
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056ae:	4641      	mov	r1, r8
 80056b0:	1851      	adds	r1, r2, r1
 80056b2:	6039      	str	r1, [r7, #0]
 80056b4:	4649      	mov	r1, r9
 80056b6:	414b      	adcs	r3, r1
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056c6:	4659      	mov	r1, fp
 80056c8:	00cb      	lsls	r3, r1, #3
 80056ca:	4651      	mov	r1, sl
 80056cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d0:	4651      	mov	r1, sl
 80056d2:	00ca      	lsls	r2, r1, #3
 80056d4:	4610      	mov	r0, r2
 80056d6:	4619      	mov	r1, r3
 80056d8:	4603      	mov	r3, r0
 80056da:	4642      	mov	r2, r8
 80056dc:	189b      	adds	r3, r3, r2
 80056de:	66bb      	str	r3, [r7, #104]	; 0x68
 80056e0:	464b      	mov	r3, r9
 80056e2:	460a      	mov	r2, r1
 80056e4:	eb42 0303 	adc.w	r3, r2, r3
 80056e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	663b      	str	r3, [r7, #96]	; 0x60
 80056f4:	667a      	str	r2, [r7, #100]	; 0x64
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005702:	4649      	mov	r1, r9
 8005704:	008b      	lsls	r3, r1, #2
 8005706:	4641      	mov	r1, r8
 8005708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800570c:	4641      	mov	r1, r8
 800570e:	008a      	lsls	r2, r1, #2
 8005710:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005714:	f7fb fab8 	bl	8000c88 <__aeabi_uldivmod>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <UART_SetConfig+0x4e4>)
 800571e:	fba3 1302 	umull	r1, r3, r3, r2
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	2164      	movs	r1, #100	; 0x64
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	3332      	adds	r3, #50	; 0x32
 8005730:	4a08      	ldr	r2, [pc, #32]	; (8005754 <UART_SetConfig+0x4e4>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	f003 020f 	and.w	r2, r3, #15
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4422      	add	r2, r4
 8005744:	609a      	str	r2, [r3, #8]
}
 8005746:	bf00      	nop
 8005748:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800574c:	46bd      	mov	sp, r7
 800574e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005752:	bf00      	nop
 8005754:	51eb851f 	.word	0x51eb851f

08005758 <__errno>:
 8005758:	4b01      	ldr	r3, [pc, #4]	; (8005760 <__errno+0x8>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	2000000c 	.word	0x2000000c

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4d0d      	ldr	r5, [pc, #52]	; (800579c <__libc_init_array+0x38>)
 8005768:	4c0d      	ldr	r4, [pc, #52]	; (80057a0 <__libc_init_array+0x3c>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	2600      	movs	r6, #0
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	4d0b      	ldr	r5, [pc, #44]	; (80057a4 <__libc_init_array+0x40>)
 8005776:	4c0c      	ldr	r4, [pc, #48]	; (80057a8 <__libc_init_array+0x44>)
 8005778:	f004 fc8e 	bl	800a098 <_init>
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	2600      	movs	r6, #0
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f855 3b04 	ldr.w	r3, [r5], #4
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f855 3b04 	ldr.w	r3, [r5], #4
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	0800a5b4 	.word	0x0800a5b4
 80057a0:	0800a5b4 	.word	0x0800a5b4
 80057a4:	0800a5b4 	.word	0x0800a5b4
 80057a8:	0800a5b8 	.word	0x0800a5b8

080057ac <memcpy>:
 80057ac:	440a      	add	r2, r1
 80057ae:	4291      	cmp	r1, r2
 80057b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80057b4:	d100      	bne.n	80057b8 <memcpy+0xc>
 80057b6:	4770      	bx	lr
 80057b8:	b510      	push	{r4, lr}
 80057ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057c2:	4291      	cmp	r1, r2
 80057c4:	d1f9      	bne.n	80057ba <memcpy+0xe>
 80057c6:	bd10      	pop	{r4, pc}

080057c8 <memset>:
 80057c8:	4402      	add	r2, r0
 80057ca:	4603      	mov	r3, r0
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d100      	bne.n	80057d2 <memset+0xa>
 80057d0:	4770      	bx	lr
 80057d2:	f803 1b01 	strb.w	r1, [r3], #1
 80057d6:	e7f9      	b.n	80057cc <memset+0x4>

080057d8 <__cvt>:
 80057d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	ec55 4b10 	vmov	r4, r5, d0
 80057e0:	2d00      	cmp	r5, #0
 80057e2:	460e      	mov	r6, r1
 80057e4:	4619      	mov	r1, r3
 80057e6:	462b      	mov	r3, r5
 80057e8:	bfbb      	ittet	lt
 80057ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057ee:	461d      	movlt	r5, r3
 80057f0:	2300      	movge	r3, #0
 80057f2:	232d      	movlt	r3, #45	; 0x2d
 80057f4:	700b      	strb	r3, [r1, #0]
 80057f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057fc:	4691      	mov	r9, r2
 80057fe:	f023 0820 	bic.w	r8, r3, #32
 8005802:	bfbc      	itt	lt
 8005804:	4622      	movlt	r2, r4
 8005806:	4614      	movlt	r4, r2
 8005808:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800580c:	d005      	beq.n	800581a <__cvt+0x42>
 800580e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005812:	d100      	bne.n	8005816 <__cvt+0x3e>
 8005814:	3601      	adds	r6, #1
 8005816:	2102      	movs	r1, #2
 8005818:	e000      	b.n	800581c <__cvt+0x44>
 800581a:	2103      	movs	r1, #3
 800581c:	ab03      	add	r3, sp, #12
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	ab02      	add	r3, sp, #8
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	ec45 4b10 	vmov	d0, r4, r5
 8005828:	4653      	mov	r3, sl
 800582a:	4632      	mov	r2, r6
 800582c:	f001 fdac 	bl	8007388 <_dtoa_r>
 8005830:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005834:	4607      	mov	r7, r0
 8005836:	d102      	bne.n	800583e <__cvt+0x66>
 8005838:	f019 0f01 	tst.w	r9, #1
 800583c:	d022      	beq.n	8005884 <__cvt+0xac>
 800583e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005842:	eb07 0906 	add.w	r9, r7, r6
 8005846:	d110      	bne.n	800586a <__cvt+0x92>
 8005848:	783b      	ldrb	r3, [r7, #0]
 800584a:	2b30      	cmp	r3, #48	; 0x30
 800584c:	d10a      	bne.n	8005864 <__cvt+0x8c>
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	4620      	mov	r0, r4
 8005854:	4629      	mov	r1, r5
 8005856:	f7fb f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800585a:	b918      	cbnz	r0, 8005864 <__cvt+0x8c>
 800585c:	f1c6 0601 	rsb	r6, r6, #1
 8005860:	f8ca 6000 	str.w	r6, [sl]
 8005864:	f8da 3000 	ldr.w	r3, [sl]
 8005868:	4499      	add	r9, r3
 800586a:	2200      	movs	r2, #0
 800586c:	2300      	movs	r3, #0
 800586e:	4620      	mov	r0, r4
 8005870:	4629      	mov	r1, r5
 8005872:	f7fb f929 	bl	8000ac8 <__aeabi_dcmpeq>
 8005876:	b108      	cbz	r0, 800587c <__cvt+0xa4>
 8005878:	f8cd 900c 	str.w	r9, [sp, #12]
 800587c:	2230      	movs	r2, #48	; 0x30
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	454b      	cmp	r3, r9
 8005882:	d307      	bcc.n	8005894 <__cvt+0xbc>
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005888:	1bdb      	subs	r3, r3, r7
 800588a:	4638      	mov	r0, r7
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	b004      	add	sp, #16
 8005890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005894:	1c59      	adds	r1, r3, #1
 8005896:	9103      	str	r1, [sp, #12]
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e7f0      	b.n	800587e <__cvt+0xa6>

0800589c <__exponent>:
 800589c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800589e:	4603      	mov	r3, r0
 80058a0:	2900      	cmp	r1, #0
 80058a2:	bfb8      	it	lt
 80058a4:	4249      	neglt	r1, r1
 80058a6:	f803 2b02 	strb.w	r2, [r3], #2
 80058aa:	bfb4      	ite	lt
 80058ac:	222d      	movlt	r2, #45	; 0x2d
 80058ae:	222b      	movge	r2, #43	; 0x2b
 80058b0:	2909      	cmp	r1, #9
 80058b2:	7042      	strb	r2, [r0, #1]
 80058b4:	dd2a      	ble.n	800590c <__exponent+0x70>
 80058b6:	f10d 0407 	add.w	r4, sp, #7
 80058ba:	46a4      	mov	ip, r4
 80058bc:	270a      	movs	r7, #10
 80058be:	46a6      	mov	lr, r4
 80058c0:	460a      	mov	r2, r1
 80058c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80058c6:	fb07 1516 	mls	r5, r7, r6, r1
 80058ca:	3530      	adds	r5, #48	; 0x30
 80058cc:	2a63      	cmp	r2, #99	; 0x63
 80058ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80058d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058d6:	4631      	mov	r1, r6
 80058d8:	dcf1      	bgt.n	80058be <__exponent+0x22>
 80058da:	3130      	adds	r1, #48	; 0x30
 80058dc:	f1ae 0502 	sub.w	r5, lr, #2
 80058e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058e4:	1c44      	adds	r4, r0, #1
 80058e6:	4629      	mov	r1, r5
 80058e8:	4561      	cmp	r1, ip
 80058ea:	d30a      	bcc.n	8005902 <__exponent+0x66>
 80058ec:	f10d 0209 	add.w	r2, sp, #9
 80058f0:	eba2 020e 	sub.w	r2, r2, lr
 80058f4:	4565      	cmp	r5, ip
 80058f6:	bf88      	it	hi
 80058f8:	2200      	movhi	r2, #0
 80058fa:	4413      	add	r3, r2
 80058fc:	1a18      	subs	r0, r3, r0
 80058fe:	b003      	add	sp, #12
 8005900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005906:	f804 2f01 	strb.w	r2, [r4, #1]!
 800590a:	e7ed      	b.n	80058e8 <__exponent+0x4c>
 800590c:	2330      	movs	r3, #48	; 0x30
 800590e:	3130      	adds	r1, #48	; 0x30
 8005910:	7083      	strb	r3, [r0, #2]
 8005912:	70c1      	strb	r1, [r0, #3]
 8005914:	1d03      	adds	r3, r0, #4
 8005916:	e7f1      	b.n	80058fc <__exponent+0x60>

08005918 <_printf_float>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	ed2d 8b02 	vpush	{d8}
 8005920:	b08d      	sub	sp, #52	; 0x34
 8005922:	460c      	mov	r4, r1
 8005924:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005928:	4616      	mov	r6, r2
 800592a:	461f      	mov	r7, r3
 800592c:	4605      	mov	r5, r0
 800592e:	f002 fe89 	bl	8008644 <_localeconv_r>
 8005932:	f8d0 a000 	ldr.w	sl, [r0]
 8005936:	4650      	mov	r0, sl
 8005938:	f7fa fc4a 	bl	80001d0 <strlen>
 800593c:	2300      	movs	r3, #0
 800593e:	930a      	str	r3, [sp, #40]	; 0x28
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	9305      	str	r3, [sp, #20]
 8005944:	f8d8 3000 	ldr.w	r3, [r8]
 8005948:	f894 b018 	ldrb.w	fp, [r4, #24]
 800594c:	3307      	adds	r3, #7
 800594e:	f023 0307 	bic.w	r3, r3, #7
 8005952:	f103 0208 	add.w	r2, r3, #8
 8005956:	f8c8 2000 	str.w	r2, [r8]
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005962:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005966:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800596a:	9307      	str	r3, [sp, #28]
 800596c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005970:	ee08 0a10 	vmov	s16, r0
 8005974:	4b9f      	ldr	r3, [pc, #636]	; (8005bf4 <_printf_float+0x2dc>)
 8005976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800597a:	f04f 32ff 	mov.w	r2, #4294967295
 800597e:	f7fb f8d5 	bl	8000b2c <__aeabi_dcmpun>
 8005982:	bb88      	cbnz	r0, 80059e8 <_printf_float+0xd0>
 8005984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005988:	4b9a      	ldr	r3, [pc, #616]	; (8005bf4 <_printf_float+0x2dc>)
 800598a:	f04f 32ff 	mov.w	r2, #4294967295
 800598e:	f7fb f8af 	bl	8000af0 <__aeabi_dcmple>
 8005992:	bb48      	cbnz	r0, 80059e8 <_printf_float+0xd0>
 8005994:	2200      	movs	r2, #0
 8005996:	2300      	movs	r3, #0
 8005998:	4640      	mov	r0, r8
 800599a:	4649      	mov	r1, r9
 800599c:	f7fb f89e 	bl	8000adc <__aeabi_dcmplt>
 80059a0:	b110      	cbz	r0, 80059a8 <_printf_float+0x90>
 80059a2:	232d      	movs	r3, #45	; 0x2d
 80059a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a8:	4b93      	ldr	r3, [pc, #588]	; (8005bf8 <_printf_float+0x2e0>)
 80059aa:	4894      	ldr	r0, [pc, #592]	; (8005bfc <_printf_float+0x2e4>)
 80059ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059b0:	bf94      	ite	ls
 80059b2:	4698      	movls	r8, r3
 80059b4:	4680      	movhi	r8, r0
 80059b6:	2303      	movs	r3, #3
 80059b8:	6123      	str	r3, [r4, #16]
 80059ba:	9b05      	ldr	r3, [sp, #20]
 80059bc:	f023 0204 	bic.w	r2, r3, #4
 80059c0:	6022      	str	r2, [r4, #0]
 80059c2:	f04f 0900 	mov.w	r9, #0
 80059c6:	9700      	str	r7, [sp, #0]
 80059c8:	4633      	mov	r3, r6
 80059ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80059cc:	4621      	mov	r1, r4
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 f9d8 	bl	8005d84 <_printf_common>
 80059d4:	3001      	adds	r0, #1
 80059d6:	f040 8090 	bne.w	8005afa <_printf_float+0x1e2>
 80059da:	f04f 30ff 	mov.w	r0, #4294967295
 80059de:	b00d      	add	sp, #52	; 0x34
 80059e0:	ecbd 8b02 	vpop	{d8}
 80059e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e8:	4642      	mov	r2, r8
 80059ea:	464b      	mov	r3, r9
 80059ec:	4640      	mov	r0, r8
 80059ee:	4649      	mov	r1, r9
 80059f0:	f7fb f89c 	bl	8000b2c <__aeabi_dcmpun>
 80059f4:	b140      	cbz	r0, 8005a08 <_printf_float+0xf0>
 80059f6:	464b      	mov	r3, r9
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bfbc      	itt	lt
 80059fc:	232d      	movlt	r3, #45	; 0x2d
 80059fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a02:	487f      	ldr	r0, [pc, #508]	; (8005c00 <_printf_float+0x2e8>)
 8005a04:	4b7f      	ldr	r3, [pc, #508]	; (8005c04 <_printf_float+0x2ec>)
 8005a06:	e7d1      	b.n	80059ac <_printf_float+0x94>
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a0e:	9206      	str	r2, [sp, #24]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	d13f      	bne.n	8005a94 <_printf_float+0x17c>
 8005a14:	2306      	movs	r3, #6
 8005a16:	6063      	str	r3, [r4, #4]
 8005a18:	9b05      	ldr	r3, [sp, #20]
 8005a1a:	6861      	ldr	r1, [r4, #4]
 8005a1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a20:	2300      	movs	r3, #0
 8005a22:	9303      	str	r3, [sp, #12]
 8005a24:	ab0a      	add	r3, sp, #40	; 0x28
 8005a26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a2a:	ab09      	add	r3, sp, #36	; 0x24
 8005a2c:	ec49 8b10 	vmov	d0, r8, r9
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	6022      	str	r2, [r4, #0]
 8005a34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f7ff fecd 	bl	80057d8 <__cvt>
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a42:	2b47      	cmp	r3, #71	; 0x47
 8005a44:	4680      	mov	r8, r0
 8005a46:	d108      	bne.n	8005a5a <_printf_float+0x142>
 8005a48:	1cc8      	adds	r0, r1, #3
 8005a4a:	db02      	blt.n	8005a52 <_printf_float+0x13a>
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	4299      	cmp	r1, r3
 8005a50:	dd41      	ble.n	8005ad6 <_printf_float+0x1be>
 8005a52:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a56:	fa5f fb8b 	uxtb.w	fp, fp
 8005a5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a5e:	d820      	bhi.n	8005aa2 <_printf_float+0x18a>
 8005a60:	3901      	subs	r1, #1
 8005a62:	465a      	mov	r2, fp
 8005a64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a68:	9109      	str	r1, [sp, #36]	; 0x24
 8005a6a:	f7ff ff17 	bl	800589c <__exponent>
 8005a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a70:	1813      	adds	r3, r2, r0
 8005a72:	2a01      	cmp	r2, #1
 8005a74:	4681      	mov	r9, r0
 8005a76:	6123      	str	r3, [r4, #16]
 8005a78:	dc02      	bgt.n	8005a80 <_printf_float+0x168>
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	07d2      	lsls	r2, r2, #31
 8005a7e:	d501      	bpl.n	8005a84 <_printf_float+0x16c>
 8005a80:	3301      	adds	r3, #1
 8005a82:	6123      	str	r3, [r4, #16]
 8005a84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d09c      	beq.n	80059c6 <_printf_float+0xae>
 8005a8c:	232d      	movs	r3, #45	; 0x2d
 8005a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a92:	e798      	b.n	80059c6 <_printf_float+0xae>
 8005a94:	9a06      	ldr	r2, [sp, #24]
 8005a96:	2a47      	cmp	r2, #71	; 0x47
 8005a98:	d1be      	bne.n	8005a18 <_printf_float+0x100>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1bc      	bne.n	8005a18 <_printf_float+0x100>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e7b9      	b.n	8005a16 <_printf_float+0xfe>
 8005aa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005aa6:	d118      	bne.n	8005ada <_printf_float+0x1c2>
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	6863      	ldr	r3, [r4, #4]
 8005aac:	dd0b      	ble.n	8005ac6 <_printf_float+0x1ae>
 8005aae:	6121      	str	r1, [r4, #16]
 8005ab0:	b913      	cbnz	r3, 8005ab8 <_printf_float+0x1a0>
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	07d0      	lsls	r0, r2, #31
 8005ab6:	d502      	bpl.n	8005abe <_printf_float+0x1a6>
 8005ab8:	3301      	adds	r3, #1
 8005aba:	440b      	add	r3, r1
 8005abc:	6123      	str	r3, [r4, #16]
 8005abe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ac0:	f04f 0900 	mov.w	r9, #0
 8005ac4:	e7de      	b.n	8005a84 <_printf_float+0x16c>
 8005ac6:	b913      	cbnz	r3, 8005ace <_printf_float+0x1b6>
 8005ac8:	6822      	ldr	r2, [r4, #0]
 8005aca:	07d2      	lsls	r2, r2, #31
 8005acc:	d501      	bpl.n	8005ad2 <_printf_float+0x1ba>
 8005ace:	3302      	adds	r3, #2
 8005ad0:	e7f4      	b.n	8005abc <_printf_float+0x1a4>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e7f2      	b.n	8005abc <_printf_float+0x1a4>
 8005ad6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005adc:	4299      	cmp	r1, r3
 8005ade:	db05      	blt.n	8005aec <_printf_float+0x1d4>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	6121      	str	r1, [r4, #16]
 8005ae4:	07d8      	lsls	r0, r3, #31
 8005ae6:	d5ea      	bpl.n	8005abe <_printf_float+0x1a6>
 8005ae8:	1c4b      	adds	r3, r1, #1
 8005aea:	e7e7      	b.n	8005abc <_printf_float+0x1a4>
 8005aec:	2900      	cmp	r1, #0
 8005aee:	bfd4      	ite	le
 8005af0:	f1c1 0202 	rsble	r2, r1, #2
 8005af4:	2201      	movgt	r2, #1
 8005af6:	4413      	add	r3, r2
 8005af8:	e7e0      	b.n	8005abc <_printf_float+0x1a4>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	055a      	lsls	r2, r3, #21
 8005afe:	d407      	bmi.n	8005b10 <_printf_float+0x1f8>
 8005b00:	6923      	ldr	r3, [r4, #16]
 8005b02:	4642      	mov	r2, r8
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d12c      	bne.n	8005b68 <_printf_float+0x250>
 8005b0e:	e764      	b.n	80059da <_printf_float+0xc2>
 8005b10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b14:	f240 80e0 	bls.w	8005cd8 <_printf_float+0x3c0>
 8005b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f7fa ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d034      	beq.n	8005b92 <_printf_float+0x27a>
 8005b28:	4a37      	ldr	r2, [pc, #220]	; (8005c08 <_printf_float+0x2f0>)
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4628      	mov	r0, r5
 8005b30:	47b8      	blx	r7
 8005b32:	3001      	adds	r0, #1
 8005b34:	f43f af51 	beq.w	80059da <_printf_float+0xc2>
 8005b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	db02      	blt.n	8005b46 <_printf_float+0x22e>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	07d8      	lsls	r0, r3, #31
 8005b44:	d510      	bpl.n	8005b68 <_printf_float+0x250>
 8005b46:	ee18 3a10 	vmov	r3, s16
 8005b4a:	4652      	mov	r2, sl
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b8      	blx	r7
 8005b52:	3001      	adds	r0, #1
 8005b54:	f43f af41 	beq.w	80059da <_printf_float+0xc2>
 8005b58:	f04f 0800 	mov.w	r8, #0
 8005b5c:	f104 091a 	add.w	r9, r4, #26
 8005b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b62:	3b01      	subs	r3, #1
 8005b64:	4543      	cmp	r3, r8
 8005b66:	dc09      	bgt.n	8005b7c <_printf_float+0x264>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	079b      	lsls	r3, r3, #30
 8005b6c:	f100 8105 	bmi.w	8005d7a <_printf_float+0x462>
 8005b70:	68e0      	ldr	r0, [r4, #12]
 8005b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b74:	4298      	cmp	r0, r3
 8005b76:	bfb8      	it	lt
 8005b78:	4618      	movlt	r0, r3
 8005b7a:	e730      	b.n	80059de <_printf_float+0xc6>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	464a      	mov	r2, r9
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b8      	blx	r7
 8005b86:	3001      	adds	r0, #1
 8005b88:	f43f af27 	beq.w	80059da <_printf_float+0xc2>
 8005b8c:	f108 0801 	add.w	r8, r8, #1
 8005b90:	e7e6      	b.n	8005b60 <_printf_float+0x248>
 8005b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	dc39      	bgt.n	8005c0c <_printf_float+0x2f4>
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <_printf_float+0x2f0>)
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f43f af19 	beq.w	80059da <_printf_float+0xc2>
 8005ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bac:	4313      	orrs	r3, r2
 8005bae:	d102      	bne.n	8005bb6 <_printf_float+0x29e>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	07d9      	lsls	r1, r3, #31
 8005bb4:	d5d8      	bpl.n	8005b68 <_printf_float+0x250>
 8005bb6:	ee18 3a10 	vmov	r3, s16
 8005bba:	4652      	mov	r2, sl
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	47b8      	blx	r7
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	f43f af09 	beq.w	80059da <_printf_float+0xc2>
 8005bc8:	f04f 0900 	mov.w	r9, #0
 8005bcc:	f104 0a1a 	add.w	sl, r4, #26
 8005bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd2:	425b      	negs	r3, r3
 8005bd4:	454b      	cmp	r3, r9
 8005bd6:	dc01      	bgt.n	8005bdc <_printf_float+0x2c4>
 8005bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bda:	e792      	b.n	8005b02 <_printf_float+0x1ea>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	4652      	mov	r2, sl
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b8      	blx	r7
 8005be6:	3001      	adds	r0, #1
 8005be8:	f43f aef7 	beq.w	80059da <_printf_float+0xc2>
 8005bec:	f109 0901 	add.w	r9, r9, #1
 8005bf0:	e7ee      	b.n	8005bd0 <_printf_float+0x2b8>
 8005bf2:	bf00      	nop
 8005bf4:	7fefffff 	.word	0x7fefffff
 8005bf8:	0800a108 	.word	0x0800a108
 8005bfc:	0800a10c 	.word	0x0800a10c
 8005c00:	0800a114 	.word	0x0800a114
 8005c04:	0800a110 	.word	0x0800a110
 8005c08:	0800a118 	.word	0x0800a118
 8005c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c10:	429a      	cmp	r2, r3
 8005c12:	bfa8      	it	ge
 8005c14:	461a      	movge	r2, r3
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	4691      	mov	r9, r2
 8005c1a:	dc37      	bgt.n	8005c8c <_printf_float+0x374>
 8005c1c:	f04f 0b00 	mov.w	fp, #0
 8005c20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c24:	f104 021a 	add.w	r2, r4, #26
 8005c28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c2a:	9305      	str	r3, [sp, #20]
 8005c2c:	eba3 0309 	sub.w	r3, r3, r9
 8005c30:	455b      	cmp	r3, fp
 8005c32:	dc33      	bgt.n	8005c9c <_printf_float+0x384>
 8005c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	db3b      	blt.n	8005cb4 <_printf_float+0x39c>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	07da      	lsls	r2, r3, #31
 8005c40:	d438      	bmi.n	8005cb4 <_printf_float+0x39c>
 8005c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c44:	9a05      	ldr	r2, [sp, #20]
 8005c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c48:	1a9a      	subs	r2, r3, r2
 8005c4a:	eba3 0901 	sub.w	r9, r3, r1
 8005c4e:	4591      	cmp	r9, r2
 8005c50:	bfa8      	it	ge
 8005c52:	4691      	movge	r9, r2
 8005c54:	f1b9 0f00 	cmp.w	r9, #0
 8005c58:	dc35      	bgt.n	8005cc6 <_printf_float+0x3ae>
 8005c5a:	f04f 0800 	mov.w	r8, #0
 8005c5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c62:	f104 0a1a 	add.w	sl, r4, #26
 8005c66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	eba3 0309 	sub.w	r3, r3, r9
 8005c70:	4543      	cmp	r3, r8
 8005c72:	f77f af79 	ble.w	8005b68 <_printf_float+0x250>
 8005c76:	2301      	movs	r3, #1
 8005c78:	4652      	mov	r2, sl
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	f43f aeaa 	beq.w	80059da <_printf_float+0xc2>
 8005c86:	f108 0801 	add.w	r8, r8, #1
 8005c8a:	e7ec      	b.n	8005c66 <_printf_float+0x34e>
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4642      	mov	r2, r8
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	d1c0      	bne.n	8005c1c <_printf_float+0x304>
 8005c9a:	e69e      	b.n	80059da <_printf_float+0xc2>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	9205      	str	r2, [sp, #20]
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	f43f ae97 	beq.w	80059da <_printf_float+0xc2>
 8005cac:	9a05      	ldr	r2, [sp, #20]
 8005cae:	f10b 0b01 	add.w	fp, fp, #1
 8005cb2:	e7b9      	b.n	8005c28 <_printf_float+0x310>
 8005cb4:	ee18 3a10 	vmov	r3, s16
 8005cb8:	4652      	mov	r2, sl
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d1be      	bne.n	8005c42 <_printf_float+0x32a>
 8005cc4:	e689      	b.n	80059da <_printf_float+0xc2>
 8005cc6:	9a05      	ldr	r2, [sp, #20]
 8005cc8:	464b      	mov	r3, r9
 8005cca:	4442      	add	r2, r8
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d1c1      	bne.n	8005c5a <_printf_float+0x342>
 8005cd6:	e680      	b.n	80059da <_printf_float+0xc2>
 8005cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cda:	2a01      	cmp	r2, #1
 8005cdc:	dc01      	bgt.n	8005ce2 <_printf_float+0x3ca>
 8005cde:	07db      	lsls	r3, r3, #31
 8005ce0:	d538      	bpl.n	8005d54 <_printf_float+0x43c>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	f43f ae74 	beq.w	80059da <_printf_float+0xc2>
 8005cf2:	ee18 3a10 	vmov	r3, s16
 8005cf6:	4652      	mov	r2, sl
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	47b8      	blx	r7
 8005cfe:	3001      	adds	r0, #1
 8005d00:	f43f ae6b 	beq.w	80059da <_printf_float+0xc2>
 8005d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f7fa fedc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d10:	b9d8      	cbnz	r0, 8005d4a <_printf_float+0x432>
 8005d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d14:	f108 0201 	add.w	r2, r8, #1
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b8      	blx	r7
 8005d20:	3001      	adds	r0, #1
 8005d22:	d10e      	bne.n	8005d42 <_printf_float+0x42a>
 8005d24:	e659      	b.n	80059da <_printf_float+0xc2>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4652      	mov	r2, sl
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	47b8      	blx	r7
 8005d30:	3001      	adds	r0, #1
 8005d32:	f43f ae52 	beq.w	80059da <_printf_float+0xc2>
 8005d36:	f108 0801 	add.w	r8, r8, #1
 8005d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	4543      	cmp	r3, r8
 8005d40:	dcf1      	bgt.n	8005d26 <_printf_float+0x40e>
 8005d42:	464b      	mov	r3, r9
 8005d44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d48:	e6dc      	b.n	8005b04 <_printf_float+0x1ec>
 8005d4a:	f04f 0800 	mov.w	r8, #0
 8005d4e:	f104 0a1a 	add.w	sl, r4, #26
 8005d52:	e7f2      	b.n	8005d3a <_printf_float+0x422>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4642      	mov	r2, r8
 8005d58:	e7df      	b.n	8005d1a <_printf_float+0x402>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	464a      	mov	r2, r9
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b8      	blx	r7
 8005d64:	3001      	adds	r0, #1
 8005d66:	f43f ae38 	beq.w	80059da <_printf_float+0xc2>
 8005d6a:	f108 0801 	add.w	r8, r8, #1
 8005d6e:	68e3      	ldr	r3, [r4, #12]
 8005d70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d72:	1a5b      	subs	r3, r3, r1
 8005d74:	4543      	cmp	r3, r8
 8005d76:	dcf0      	bgt.n	8005d5a <_printf_float+0x442>
 8005d78:	e6fa      	b.n	8005b70 <_printf_float+0x258>
 8005d7a:	f04f 0800 	mov.w	r8, #0
 8005d7e:	f104 0919 	add.w	r9, r4, #25
 8005d82:	e7f4      	b.n	8005d6e <_printf_float+0x456>

08005d84 <_printf_common>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	4616      	mov	r6, r2
 8005d8a:	4699      	mov	r9, r3
 8005d8c:	688a      	ldr	r2, [r1, #8]
 8005d8e:	690b      	ldr	r3, [r1, #16]
 8005d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d94:	4293      	cmp	r3, r2
 8005d96:	bfb8      	it	lt
 8005d98:	4613      	movlt	r3, r2
 8005d9a:	6033      	str	r3, [r6, #0]
 8005d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005da0:	4607      	mov	r7, r0
 8005da2:	460c      	mov	r4, r1
 8005da4:	b10a      	cbz	r2, 8005daa <_printf_common+0x26>
 8005da6:	3301      	adds	r3, #1
 8005da8:	6033      	str	r3, [r6, #0]
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	0699      	lsls	r1, r3, #26
 8005dae:	bf42      	ittt	mi
 8005db0:	6833      	ldrmi	r3, [r6, #0]
 8005db2:	3302      	addmi	r3, #2
 8005db4:	6033      	strmi	r3, [r6, #0]
 8005db6:	6825      	ldr	r5, [r4, #0]
 8005db8:	f015 0506 	ands.w	r5, r5, #6
 8005dbc:	d106      	bne.n	8005dcc <_printf_common+0x48>
 8005dbe:	f104 0a19 	add.w	sl, r4, #25
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	6832      	ldr	r2, [r6, #0]
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	42ab      	cmp	r3, r5
 8005dca:	dc26      	bgt.n	8005e1a <_printf_common+0x96>
 8005dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dd0:	1e13      	subs	r3, r2, #0
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	bf18      	it	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	0692      	lsls	r2, r2, #26
 8005dda:	d42b      	bmi.n	8005e34 <_printf_common+0xb0>
 8005ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005de0:	4649      	mov	r1, r9
 8005de2:	4638      	mov	r0, r7
 8005de4:	47c0      	blx	r8
 8005de6:	3001      	adds	r0, #1
 8005de8:	d01e      	beq.n	8005e28 <_printf_common+0xa4>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	68e5      	ldr	r5, [r4, #12]
 8005dee:	6832      	ldr	r2, [r6, #0]
 8005df0:	f003 0306 	and.w	r3, r3, #6
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	bf08      	it	eq
 8005df8:	1aad      	subeq	r5, r5, r2
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	6922      	ldr	r2, [r4, #16]
 8005dfe:	bf0c      	ite	eq
 8005e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e04:	2500      	movne	r5, #0
 8005e06:	4293      	cmp	r3, r2
 8005e08:	bfc4      	itt	gt
 8005e0a:	1a9b      	subgt	r3, r3, r2
 8005e0c:	18ed      	addgt	r5, r5, r3
 8005e0e:	2600      	movs	r6, #0
 8005e10:	341a      	adds	r4, #26
 8005e12:	42b5      	cmp	r5, r6
 8005e14:	d11a      	bne.n	8005e4c <_printf_common+0xc8>
 8005e16:	2000      	movs	r0, #0
 8005e18:	e008      	b.n	8005e2c <_printf_common+0xa8>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4652      	mov	r2, sl
 8005e1e:	4649      	mov	r1, r9
 8005e20:	4638      	mov	r0, r7
 8005e22:	47c0      	blx	r8
 8005e24:	3001      	adds	r0, #1
 8005e26:	d103      	bne.n	8005e30 <_printf_common+0xac>
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e30:	3501      	adds	r5, #1
 8005e32:	e7c6      	b.n	8005dc2 <_printf_common+0x3e>
 8005e34:	18e1      	adds	r1, r4, r3
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	2030      	movs	r0, #48	; 0x30
 8005e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e3e:	4422      	add	r2, r4
 8005e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e48:	3302      	adds	r3, #2
 8005e4a:	e7c7      	b.n	8005ddc <_printf_common+0x58>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4622      	mov	r2, r4
 8005e50:	4649      	mov	r1, r9
 8005e52:	4638      	mov	r0, r7
 8005e54:	47c0      	blx	r8
 8005e56:	3001      	adds	r0, #1
 8005e58:	d0e6      	beq.n	8005e28 <_printf_common+0xa4>
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7d9      	b.n	8005e12 <_printf_common+0x8e>
	...

08005e60 <_printf_i>:
 8005e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	7e0f      	ldrb	r7, [r1, #24]
 8005e66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e68:	2f78      	cmp	r7, #120	; 0x78
 8005e6a:	4691      	mov	r9, r2
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	469a      	mov	sl, r3
 8005e72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e76:	d807      	bhi.n	8005e88 <_printf_i+0x28>
 8005e78:	2f62      	cmp	r7, #98	; 0x62
 8005e7a:	d80a      	bhi.n	8005e92 <_printf_i+0x32>
 8005e7c:	2f00      	cmp	r7, #0
 8005e7e:	f000 80d8 	beq.w	8006032 <_printf_i+0x1d2>
 8005e82:	2f58      	cmp	r7, #88	; 0x58
 8005e84:	f000 80a3 	beq.w	8005fce <_printf_i+0x16e>
 8005e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e90:	e03a      	b.n	8005f08 <_printf_i+0xa8>
 8005e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e96:	2b15      	cmp	r3, #21
 8005e98:	d8f6      	bhi.n	8005e88 <_printf_i+0x28>
 8005e9a:	a101      	add	r1, pc, #4	; (adr r1, 8005ea0 <_printf_i+0x40>)
 8005e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ea0:	08005ef9 	.word	0x08005ef9
 8005ea4:	08005f0d 	.word	0x08005f0d
 8005ea8:	08005e89 	.word	0x08005e89
 8005eac:	08005e89 	.word	0x08005e89
 8005eb0:	08005e89 	.word	0x08005e89
 8005eb4:	08005e89 	.word	0x08005e89
 8005eb8:	08005f0d 	.word	0x08005f0d
 8005ebc:	08005e89 	.word	0x08005e89
 8005ec0:	08005e89 	.word	0x08005e89
 8005ec4:	08005e89 	.word	0x08005e89
 8005ec8:	08005e89 	.word	0x08005e89
 8005ecc:	08006019 	.word	0x08006019
 8005ed0:	08005f3d 	.word	0x08005f3d
 8005ed4:	08005ffb 	.word	0x08005ffb
 8005ed8:	08005e89 	.word	0x08005e89
 8005edc:	08005e89 	.word	0x08005e89
 8005ee0:	0800603b 	.word	0x0800603b
 8005ee4:	08005e89 	.word	0x08005e89
 8005ee8:	08005f3d 	.word	0x08005f3d
 8005eec:	08005e89 	.word	0x08005e89
 8005ef0:	08005e89 	.word	0x08005e89
 8005ef4:	08006003 	.word	0x08006003
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	1d1a      	adds	r2, r3, #4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	602a      	str	r2, [r5, #0]
 8005f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0a3      	b.n	8006054 <_printf_i+0x1f4>
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	6829      	ldr	r1, [r5, #0]
 8005f10:	0606      	lsls	r6, r0, #24
 8005f12:	f101 0304 	add.w	r3, r1, #4
 8005f16:	d50a      	bpl.n	8005f2e <_printf_i+0xce>
 8005f18:	680e      	ldr	r6, [r1, #0]
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	2e00      	cmp	r6, #0
 8005f1e:	da03      	bge.n	8005f28 <_printf_i+0xc8>
 8005f20:	232d      	movs	r3, #45	; 0x2d
 8005f22:	4276      	negs	r6, r6
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f28:	485e      	ldr	r0, [pc, #376]	; (80060a4 <_printf_i+0x244>)
 8005f2a:	230a      	movs	r3, #10
 8005f2c:	e019      	b.n	8005f62 <_printf_i+0x102>
 8005f2e:	680e      	ldr	r6, [r1, #0]
 8005f30:	602b      	str	r3, [r5, #0]
 8005f32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f36:	bf18      	it	ne
 8005f38:	b236      	sxthne	r6, r6
 8005f3a:	e7ef      	b.n	8005f1c <_printf_i+0xbc>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	6820      	ldr	r0, [r4, #0]
 8005f40:	1d19      	adds	r1, r3, #4
 8005f42:	6029      	str	r1, [r5, #0]
 8005f44:	0601      	lsls	r1, r0, #24
 8005f46:	d501      	bpl.n	8005f4c <_printf_i+0xec>
 8005f48:	681e      	ldr	r6, [r3, #0]
 8005f4a:	e002      	b.n	8005f52 <_printf_i+0xf2>
 8005f4c:	0646      	lsls	r6, r0, #25
 8005f4e:	d5fb      	bpl.n	8005f48 <_printf_i+0xe8>
 8005f50:	881e      	ldrh	r6, [r3, #0]
 8005f52:	4854      	ldr	r0, [pc, #336]	; (80060a4 <_printf_i+0x244>)
 8005f54:	2f6f      	cmp	r7, #111	; 0x6f
 8005f56:	bf0c      	ite	eq
 8005f58:	2308      	moveq	r3, #8
 8005f5a:	230a      	movne	r3, #10
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f62:	6865      	ldr	r5, [r4, #4]
 8005f64:	60a5      	str	r5, [r4, #8]
 8005f66:	2d00      	cmp	r5, #0
 8005f68:	bfa2      	ittt	ge
 8005f6a:	6821      	ldrge	r1, [r4, #0]
 8005f6c:	f021 0104 	bicge.w	r1, r1, #4
 8005f70:	6021      	strge	r1, [r4, #0]
 8005f72:	b90e      	cbnz	r6, 8005f78 <_printf_i+0x118>
 8005f74:	2d00      	cmp	r5, #0
 8005f76:	d04d      	beq.n	8006014 <_printf_i+0x1b4>
 8005f78:	4615      	mov	r5, r2
 8005f7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f7e:	fb03 6711 	mls	r7, r3, r1, r6
 8005f82:	5dc7      	ldrb	r7, [r0, r7]
 8005f84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f88:	4637      	mov	r7, r6
 8005f8a:	42bb      	cmp	r3, r7
 8005f8c:	460e      	mov	r6, r1
 8005f8e:	d9f4      	bls.n	8005f7a <_printf_i+0x11a>
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d10b      	bne.n	8005fac <_printf_i+0x14c>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	07de      	lsls	r6, r3, #31
 8005f98:	d508      	bpl.n	8005fac <_printf_i+0x14c>
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	6861      	ldr	r1, [r4, #4]
 8005f9e:	4299      	cmp	r1, r3
 8005fa0:	bfde      	ittt	le
 8005fa2:	2330      	movle	r3, #48	; 0x30
 8005fa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fac:	1b52      	subs	r2, r2, r5
 8005fae:	6122      	str	r2, [r4, #16]
 8005fb0:	f8cd a000 	str.w	sl, [sp]
 8005fb4:	464b      	mov	r3, r9
 8005fb6:	aa03      	add	r2, sp, #12
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4640      	mov	r0, r8
 8005fbc:	f7ff fee2 	bl	8005d84 <_printf_common>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d14c      	bne.n	800605e <_printf_i+0x1fe>
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc8:	b004      	add	sp, #16
 8005fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fce:	4835      	ldr	r0, [pc, #212]	; (80060a4 <_printf_i+0x244>)
 8005fd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fd4:	6829      	ldr	r1, [r5, #0]
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fdc:	6029      	str	r1, [r5, #0]
 8005fde:	061d      	lsls	r5, r3, #24
 8005fe0:	d514      	bpl.n	800600c <_printf_i+0x1ac>
 8005fe2:	07df      	lsls	r7, r3, #31
 8005fe4:	bf44      	itt	mi
 8005fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8005fea:	6023      	strmi	r3, [r4, #0]
 8005fec:	b91e      	cbnz	r6, 8005ff6 <_printf_i+0x196>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	f023 0320 	bic.w	r3, r3, #32
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	2310      	movs	r3, #16
 8005ff8:	e7b0      	b.n	8005f5c <_printf_i+0xfc>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	f043 0320 	orr.w	r3, r3, #32
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	2378      	movs	r3, #120	; 0x78
 8006004:	4828      	ldr	r0, [pc, #160]	; (80060a8 <_printf_i+0x248>)
 8006006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800600a:	e7e3      	b.n	8005fd4 <_printf_i+0x174>
 800600c:	0659      	lsls	r1, r3, #25
 800600e:	bf48      	it	mi
 8006010:	b2b6      	uxthmi	r6, r6
 8006012:	e7e6      	b.n	8005fe2 <_printf_i+0x182>
 8006014:	4615      	mov	r5, r2
 8006016:	e7bb      	b.n	8005f90 <_printf_i+0x130>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	6826      	ldr	r6, [r4, #0]
 800601c:	6961      	ldr	r1, [r4, #20]
 800601e:	1d18      	adds	r0, r3, #4
 8006020:	6028      	str	r0, [r5, #0]
 8006022:	0635      	lsls	r5, r6, #24
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	d501      	bpl.n	800602c <_printf_i+0x1cc>
 8006028:	6019      	str	r1, [r3, #0]
 800602a:	e002      	b.n	8006032 <_printf_i+0x1d2>
 800602c:	0670      	lsls	r0, r6, #25
 800602e:	d5fb      	bpl.n	8006028 <_printf_i+0x1c8>
 8006030:	8019      	strh	r1, [r3, #0]
 8006032:	2300      	movs	r3, #0
 8006034:	6123      	str	r3, [r4, #16]
 8006036:	4615      	mov	r5, r2
 8006038:	e7ba      	b.n	8005fb0 <_printf_i+0x150>
 800603a:	682b      	ldr	r3, [r5, #0]
 800603c:	1d1a      	adds	r2, r3, #4
 800603e:	602a      	str	r2, [r5, #0]
 8006040:	681d      	ldr	r5, [r3, #0]
 8006042:	6862      	ldr	r2, [r4, #4]
 8006044:	2100      	movs	r1, #0
 8006046:	4628      	mov	r0, r5
 8006048:	f7fa f8ca 	bl	80001e0 <memchr>
 800604c:	b108      	cbz	r0, 8006052 <_printf_i+0x1f2>
 800604e:	1b40      	subs	r0, r0, r5
 8006050:	6060      	str	r0, [r4, #4]
 8006052:	6863      	ldr	r3, [r4, #4]
 8006054:	6123      	str	r3, [r4, #16]
 8006056:	2300      	movs	r3, #0
 8006058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800605c:	e7a8      	b.n	8005fb0 <_printf_i+0x150>
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	462a      	mov	r2, r5
 8006062:	4649      	mov	r1, r9
 8006064:	4640      	mov	r0, r8
 8006066:	47d0      	blx	sl
 8006068:	3001      	adds	r0, #1
 800606a:	d0ab      	beq.n	8005fc4 <_printf_i+0x164>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	079b      	lsls	r3, r3, #30
 8006070:	d413      	bmi.n	800609a <_printf_i+0x23a>
 8006072:	68e0      	ldr	r0, [r4, #12]
 8006074:	9b03      	ldr	r3, [sp, #12]
 8006076:	4298      	cmp	r0, r3
 8006078:	bfb8      	it	lt
 800607a:	4618      	movlt	r0, r3
 800607c:	e7a4      	b.n	8005fc8 <_printf_i+0x168>
 800607e:	2301      	movs	r3, #1
 8006080:	4632      	mov	r2, r6
 8006082:	4649      	mov	r1, r9
 8006084:	4640      	mov	r0, r8
 8006086:	47d0      	blx	sl
 8006088:	3001      	adds	r0, #1
 800608a:	d09b      	beq.n	8005fc4 <_printf_i+0x164>
 800608c:	3501      	adds	r5, #1
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	9903      	ldr	r1, [sp, #12]
 8006092:	1a5b      	subs	r3, r3, r1
 8006094:	42ab      	cmp	r3, r5
 8006096:	dcf2      	bgt.n	800607e <_printf_i+0x21e>
 8006098:	e7eb      	b.n	8006072 <_printf_i+0x212>
 800609a:	2500      	movs	r5, #0
 800609c:	f104 0619 	add.w	r6, r4, #25
 80060a0:	e7f5      	b.n	800608e <_printf_i+0x22e>
 80060a2:	bf00      	nop
 80060a4:	0800a11a 	.word	0x0800a11a
 80060a8:	0800a12b 	.word	0x0800a12b

080060ac <_scanf_float>:
 80060ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b0:	b087      	sub	sp, #28
 80060b2:	4617      	mov	r7, r2
 80060b4:	9303      	str	r3, [sp, #12]
 80060b6:	688b      	ldr	r3, [r1, #8]
 80060b8:	1e5a      	subs	r2, r3, #1
 80060ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80060be:	bf83      	ittte	hi
 80060c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80060c4:	195b      	addhi	r3, r3, r5
 80060c6:	9302      	strhi	r3, [sp, #8]
 80060c8:	2300      	movls	r3, #0
 80060ca:	bf86      	itte	hi
 80060cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80060d0:	608b      	strhi	r3, [r1, #8]
 80060d2:	9302      	strls	r3, [sp, #8]
 80060d4:	680b      	ldr	r3, [r1, #0]
 80060d6:	468b      	mov	fp, r1
 80060d8:	2500      	movs	r5, #0
 80060da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80060de:	f84b 3b1c 	str.w	r3, [fp], #28
 80060e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80060e6:	4680      	mov	r8, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	465e      	mov	r6, fp
 80060ec:	46aa      	mov	sl, r5
 80060ee:	46a9      	mov	r9, r5
 80060f0:	9501      	str	r5, [sp, #4]
 80060f2:	68a2      	ldr	r2, [r4, #8]
 80060f4:	b152      	cbz	r2, 800610c <_scanf_float+0x60>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b4e      	cmp	r3, #78	; 0x4e
 80060fc:	d864      	bhi.n	80061c8 <_scanf_float+0x11c>
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d83c      	bhi.n	800617c <_scanf_float+0xd0>
 8006102:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006106:	b2c8      	uxtb	r0, r1
 8006108:	280e      	cmp	r0, #14
 800610a:	d93a      	bls.n	8006182 <_scanf_float+0xd6>
 800610c:	f1b9 0f00 	cmp.w	r9, #0
 8006110:	d003      	beq.n	800611a <_scanf_float+0x6e>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800611e:	f1ba 0f01 	cmp.w	sl, #1
 8006122:	f200 8113 	bhi.w	800634c <_scanf_float+0x2a0>
 8006126:	455e      	cmp	r6, fp
 8006128:	f200 8105 	bhi.w	8006336 <_scanf_float+0x28a>
 800612c:	2501      	movs	r5, #1
 800612e:	4628      	mov	r0, r5
 8006130:	b007      	add	sp, #28
 8006132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006136:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800613a:	2a0d      	cmp	r2, #13
 800613c:	d8e6      	bhi.n	800610c <_scanf_float+0x60>
 800613e:	a101      	add	r1, pc, #4	; (adr r1, 8006144 <_scanf_float+0x98>)
 8006140:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006144:	08006283 	.word	0x08006283
 8006148:	0800610d 	.word	0x0800610d
 800614c:	0800610d 	.word	0x0800610d
 8006150:	0800610d 	.word	0x0800610d
 8006154:	080062e3 	.word	0x080062e3
 8006158:	080062bb 	.word	0x080062bb
 800615c:	0800610d 	.word	0x0800610d
 8006160:	0800610d 	.word	0x0800610d
 8006164:	08006291 	.word	0x08006291
 8006168:	0800610d 	.word	0x0800610d
 800616c:	0800610d 	.word	0x0800610d
 8006170:	0800610d 	.word	0x0800610d
 8006174:	0800610d 	.word	0x0800610d
 8006178:	08006249 	.word	0x08006249
 800617c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006180:	e7db      	b.n	800613a <_scanf_float+0x8e>
 8006182:	290e      	cmp	r1, #14
 8006184:	d8c2      	bhi.n	800610c <_scanf_float+0x60>
 8006186:	a001      	add	r0, pc, #4	; (adr r0, 800618c <_scanf_float+0xe0>)
 8006188:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800618c:	0800623b 	.word	0x0800623b
 8006190:	0800610d 	.word	0x0800610d
 8006194:	0800623b 	.word	0x0800623b
 8006198:	080062cf 	.word	0x080062cf
 800619c:	0800610d 	.word	0x0800610d
 80061a0:	080061e9 	.word	0x080061e9
 80061a4:	08006225 	.word	0x08006225
 80061a8:	08006225 	.word	0x08006225
 80061ac:	08006225 	.word	0x08006225
 80061b0:	08006225 	.word	0x08006225
 80061b4:	08006225 	.word	0x08006225
 80061b8:	08006225 	.word	0x08006225
 80061bc:	08006225 	.word	0x08006225
 80061c0:	08006225 	.word	0x08006225
 80061c4:	08006225 	.word	0x08006225
 80061c8:	2b6e      	cmp	r3, #110	; 0x6e
 80061ca:	d809      	bhi.n	80061e0 <_scanf_float+0x134>
 80061cc:	2b60      	cmp	r3, #96	; 0x60
 80061ce:	d8b2      	bhi.n	8006136 <_scanf_float+0x8a>
 80061d0:	2b54      	cmp	r3, #84	; 0x54
 80061d2:	d077      	beq.n	80062c4 <_scanf_float+0x218>
 80061d4:	2b59      	cmp	r3, #89	; 0x59
 80061d6:	d199      	bne.n	800610c <_scanf_float+0x60>
 80061d8:	2d07      	cmp	r5, #7
 80061da:	d197      	bne.n	800610c <_scanf_float+0x60>
 80061dc:	2508      	movs	r5, #8
 80061de:	e029      	b.n	8006234 <_scanf_float+0x188>
 80061e0:	2b74      	cmp	r3, #116	; 0x74
 80061e2:	d06f      	beq.n	80062c4 <_scanf_float+0x218>
 80061e4:	2b79      	cmp	r3, #121	; 0x79
 80061e6:	e7f6      	b.n	80061d6 <_scanf_float+0x12a>
 80061e8:	6821      	ldr	r1, [r4, #0]
 80061ea:	05c8      	lsls	r0, r1, #23
 80061ec:	d51a      	bpl.n	8006224 <_scanf_float+0x178>
 80061ee:	9b02      	ldr	r3, [sp, #8]
 80061f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80061f4:	6021      	str	r1, [r4, #0]
 80061f6:	f109 0901 	add.w	r9, r9, #1
 80061fa:	b11b      	cbz	r3, 8006204 <_scanf_float+0x158>
 80061fc:	3b01      	subs	r3, #1
 80061fe:	3201      	adds	r2, #1
 8006200:	9302      	str	r3, [sp, #8]
 8006202:	60a2      	str	r2, [r4, #8]
 8006204:	68a3      	ldr	r3, [r4, #8]
 8006206:	3b01      	subs	r3, #1
 8006208:	60a3      	str	r3, [r4, #8]
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	3301      	adds	r3, #1
 800620e:	6123      	str	r3, [r4, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3b01      	subs	r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	607b      	str	r3, [r7, #4]
 8006218:	f340 8084 	ble.w	8006324 <_scanf_float+0x278>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	3301      	adds	r3, #1
 8006220:	603b      	str	r3, [r7, #0]
 8006222:	e766      	b.n	80060f2 <_scanf_float+0x46>
 8006224:	eb1a 0f05 	cmn.w	sl, r5
 8006228:	f47f af70 	bne.w	800610c <_scanf_float+0x60>
 800622c:	6822      	ldr	r2, [r4, #0]
 800622e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006232:	6022      	str	r2, [r4, #0]
 8006234:	f806 3b01 	strb.w	r3, [r6], #1
 8006238:	e7e4      	b.n	8006204 <_scanf_float+0x158>
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	0610      	lsls	r0, r2, #24
 800623e:	f57f af65 	bpl.w	800610c <_scanf_float+0x60>
 8006242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006246:	e7f4      	b.n	8006232 <_scanf_float+0x186>
 8006248:	f1ba 0f00 	cmp.w	sl, #0
 800624c:	d10e      	bne.n	800626c <_scanf_float+0x1c0>
 800624e:	f1b9 0f00 	cmp.w	r9, #0
 8006252:	d10e      	bne.n	8006272 <_scanf_float+0x1c6>
 8006254:	6822      	ldr	r2, [r4, #0]
 8006256:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800625a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800625e:	d108      	bne.n	8006272 <_scanf_float+0x1c6>
 8006260:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006264:	6022      	str	r2, [r4, #0]
 8006266:	f04f 0a01 	mov.w	sl, #1
 800626a:	e7e3      	b.n	8006234 <_scanf_float+0x188>
 800626c:	f1ba 0f02 	cmp.w	sl, #2
 8006270:	d055      	beq.n	800631e <_scanf_float+0x272>
 8006272:	2d01      	cmp	r5, #1
 8006274:	d002      	beq.n	800627c <_scanf_float+0x1d0>
 8006276:	2d04      	cmp	r5, #4
 8006278:	f47f af48 	bne.w	800610c <_scanf_float+0x60>
 800627c:	3501      	adds	r5, #1
 800627e:	b2ed      	uxtb	r5, r5
 8006280:	e7d8      	b.n	8006234 <_scanf_float+0x188>
 8006282:	f1ba 0f01 	cmp.w	sl, #1
 8006286:	f47f af41 	bne.w	800610c <_scanf_float+0x60>
 800628a:	f04f 0a02 	mov.w	sl, #2
 800628e:	e7d1      	b.n	8006234 <_scanf_float+0x188>
 8006290:	b97d      	cbnz	r5, 80062b2 <_scanf_float+0x206>
 8006292:	f1b9 0f00 	cmp.w	r9, #0
 8006296:	f47f af3c 	bne.w	8006112 <_scanf_float+0x66>
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062a4:	f47f af39 	bne.w	800611a <_scanf_float+0x6e>
 80062a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062ac:	6022      	str	r2, [r4, #0]
 80062ae:	2501      	movs	r5, #1
 80062b0:	e7c0      	b.n	8006234 <_scanf_float+0x188>
 80062b2:	2d03      	cmp	r5, #3
 80062b4:	d0e2      	beq.n	800627c <_scanf_float+0x1d0>
 80062b6:	2d05      	cmp	r5, #5
 80062b8:	e7de      	b.n	8006278 <_scanf_float+0x1cc>
 80062ba:	2d02      	cmp	r5, #2
 80062bc:	f47f af26 	bne.w	800610c <_scanf_float+0x60>
 80062c0:	2503      	movs	r5, #3
 80062c2:	e7b7      	b.n	8006234 <_scanf_float+0x188>
 80062c4:	2d06      	cmp	r5, #6
 80062c6:	f47f af21 	bne.w	800610c <_scanf_float+0x60>
 80062ca:	2507      	movs	r5, #7
 80062cc:	e7b2      	b.n	8006234 <_scanf_float+0x188>
 80062ce:	6822      	ldr	r2, [r4, #0]
 80062d0:	0591      	lsls	r1, r2, #22
 80062d2:	f57f af1b 	bpl.w	800610c <_scanf_float+0x60>
 80062d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80062da:	6022      	str	r2, [r4, #0]
 80062dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80062e0:	e7a8      	b.n	8006234 <_scanf_float+0x188>
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80062e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80062ec:	d006      	beq.n	80062fc <_scanf_float+0x250>
 80062ee:	0550      	lsls	r0, r2, #21
 80062f0:	f57f af0c 	bpl.w	800610c <_scanf_float+0x60>
 80062f4:	f1b9 0f00 	cmp.w	r9, #0
 80062f8:	f43f af0f 	beq.w	800611a <_scanf_float+0x6e>
 80062fc:	0591      	lsls	r1, r2, #22
 80062fe:	bf58      	it	pl
 8006300:	9901      	ldrpl	r1, [sp, #4]
 8006302:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006306:	bf58      	it	pl
 8006308:	eba9 0101 	subpl.w	r1, r9, r1
 800630c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006310:	bf58      	it	pl
 8006312:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006316:	6022      	str	r2, [r4, #0]
 8006318:	f04f 0900 	mov.w	r9, #0
 800631c:	e78a      	b.n	8006234 <_scanf_float+0x188>
 800631e:	f04f 0a03 	mov.w	sl, #3
 8006322:	e787      	b.n	8006234 <_scanf_float+0x188>
 8006324:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006328:	4639      	mov	r1, r7
 800632a:	4640      	mov	r0, r8
 800632c:	4798      	blx	r3
 800632e:	2800      	cmp	r0, #0
 8006330:	f43f aedf 	beq.w	80060f2 <_scanf_float+0x46>
 8006334:	e6ea      	b.n	800610c <_scanf_float+0x60>
 8006336:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800633a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800633e:	463a      	mov	r2, r7
 8006340:	4640      	mov	r0, r8
 8006342:	4798      	blx	r3
 8006344:	6923      	ldr	r3, [r4, #16]
 8006346:	3b01      	subs	r3, #1
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	e6ec      	b.n	8006126 <_scanf_float+0x7a>
 800634c:	1e6b      	subs	r3, r5, #1
 800634e:	2b06      	cmp	r3, #6
 8006350:	d825      	bhi.n	800639e <_scanf_float+0x2f2>
 8006352:	2d02      	cmp	r5, #2
 8006354:	d836      	bhi.n	80063c4 <_scanf_float+0x318>
 8006356:	455e      	cmp	r6, fp
 8006358:	f67f aee8 	bls.w	800612c <_scanf_float+0x80>
 800635c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006360:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006364:	463a      	mov	r2, r7
 8006366:	4640      	mov	r0, r8
 8006368:	4798      	blx	r3
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	3b01      	subs	r3, #1
 800636e:	6123      	str	r3, [r4, #16]
 8006370:	e7f1      	b.n	8006356 <_scanf_float+0x2aa>
 8006372:	9802      	ldr	r0, [sp, #8]
 8006374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006378:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800637c:	9002      	str	r0, [sp, #8]
 800637e:	463a      	mov	r2, r7
 8006380:	4640      	mov	r0, r8
 8006382:	4798      	blx	r3
 8006384:	6923      	ldr	r3, [r4, #16]
 8006386:	3b01      	subs	r3, #1
 8006388:	6123      	str	r3, [r4, #16]
 800638a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800638e:	fa5f fa8a 	uxtb.w	sl, sl
 8006392:	f1ba 0f02 	cmp.w	sl, #2
 8006396:	d1ec      	bne.n	8006372 <_scanf_float+0x2c6>
 8006398:	3d03      	subs	r5, #3
 800639a:	b2ed      	uxtb	r5, r5
 800639c:	1b76      	subs	r6, r6, r5
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	05da      	lsls	r2, r3, #23
 80063a2:	d52f      	bpl.n	8006404 <_scanf_float+0x358>
 80063a4:	055b      	lsls	r3, r3, #21
 80063a6:	d510      	bpl.n	80063ca <_scanf_float+0x31e>
 80063a8:	455e      	cmp	r6, fp
 80063aa:	f67f aebf 	bls.w	800612c <_scanf_float+0x80>
 80063ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063b6:	463a      	mov	r2, r7
 80063b8:	4640      	mov	r0, r8
 80063ba:	4798      	blx	r3
 80063bc:	6923      	ldr	r3, [r4, #16]
 80063be:	3b01      	subs	r3, #1
 80063c0:	6123      	str	r3, [r4, #16]
 80063c2:	e7f1      	b.n	80063a8 <_scanf_float+0x2fc>
 80063c4:	46aa      	mov	sl, r5
 80063c6:	9602      	str	r6, [sp, #8]
 80063c8:	e7df      	b.n	800638a <_scanf_float+0x2de>
 80063ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	2965      	cmp	r1, #101	; 0x65
 80063d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80063da:	6123      	str	r3, [r4, #16]
 80063dc:	d00c      	beq.n	80063f8 <_scanf_float+0x34c>
 80063de:	2945      	cmp	r1, #69	; 0x45
 80063e0:	d00a      	beq.n	80063f8 <_scanf_float+0x34c>
 80063e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063e6:	463a      	mov	r2, r7
 80063e8:	4640      	mov	r0, r8
 80063ea:	4798      	blx	r3
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	1eb5      	subs	r5, r6, #2
 80063f6:	6123      	str	r3, [r4, #16]
 80063f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063fc:	463a      	mov	r2, r7
 80063fe:	4640      	mov	r0, r8
 8006400:	4798      	blx	r3
 8006402:	462e      	mov	r6, r5
 8006404:	6825      	ldr	r5, [r4, #0]
 8006406:	f015 0510 	ands.w	r5, r5, #16
 800640a:	d159      	bne.n	80064c0 <_scanf_float+0x414>
 800640c:	7035      	strb	r5, [r6, #0]
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006418:	d11b      	bne.n	8006452 <_scanf_float+0x3a6>
 800641a:	9b01      	ldr	r3, [sp, #4]
 800641c:	454b      	cmp	r3, r9
 800641e:	eba3 0209 	sub.w	r2, r3, r9
 8006422:	d123      	bne.n	800646c <_scanf_float+0x3c0>
 8006424:	2200      	movs	r2, #0
 8006426:	4659      	mov	r1, fp
 8006428:	4640      	mov	r0, r8
 800642a:	f000 fe97 	bl	800715c <_strtod_r>
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	f012 0f02 	tst.w	r2, #2
 8006436:	ec57 6b10 	vmov	r6, r7, d0
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	d021      	beq.n	8006482 <_scanf_float+0x3d6>
 800643e:	9903      	ldr	r1, [sp, #12]
 8006440:	1d1a      	adds	r2, r3, #4
 8006442:	600a      	str	r2, [r1, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	e9c3 6700 	strd	r6, r7, [r3]
 800644a:	68e3      	ldr	r3, [r4, #12]
 800644c:	3301      	adds	r3, #1
 800644e:	60e3      	str	r3, [r4, #12]
 8006450:	e66d      	b.n	800612e <_scanf_float+0x82>
 8006452:	9b04      	ldr	r3, [sp, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0e5      	beq.n	8006424 <_scanf_float+0x378>
 8006458:	9905      	ldr	r1, [sp, #20]
 800645a:	230a      	movs	r3, #10
 800645c:	462a      	mov	r2, r5
 800645e:	3101      	adds	r1, #1
 8006460:	4640      	mov	r0, r8
 8006462:	f000 ff03 	bl	800726c <_strtol_r>
 8006466:	9b04      	ldr	r3, [sp, #16]
 8006468:	9e05      	ldr	r6, [sp, #20]
 800646a:	1ac2      	subs	r2, r0, r3
 800646c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006470:	429e      	cmp	r6, r3
 8006472:	bf28      	it	cs
 8006474:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006478:	4912      	ldr	r1, [pc, #72]	; (80064c4 <_scanf_float+0x418>)
 800647a:	4630      	mov	r0, r6
 800647c:	f000 f82c 	bl	80064d8 <siprintf>
 8006480:	e7d0      	b.n	8006424 <_scanf_float+0x378>
 8006482:	9903      	ldr	r1, [sp, #12]
 8006484:	f012 0f04 	tst.w	r2, #4
 8006488:	f103 0204 	add.w	r2, r3, #4
 800648c:	600a      	str	r2, [r1, #0]
 800648e:	d1d9      	bne.n	8006444 <_scanf_float+0x398>
 8006490:	f8d3 8000 	ldr.w	r8, [r3]
 8006494:	ee10 2a10 	vmov	r2, s0
 8006498:	ee10 0a10 	vmov	r0, s0
 800649c:	463b      	mov	r3, r7
 800649e:	4639      	mov	r1, r7
 80064a0:	f7fa fb44 	bl	8000b2c <__aeabi_dcmpun>
 80064a4:	b128      	cbz	r0, 80064b2 <_scanf_float+0x406>
 80064a6:	4808      	ldr	r0, [pc, #32]	; (80064c8 <_scanf_float+0x41c>)
 80064a8:	f000 f810 	bl	80064cc <nanf>
 80064ac:	ed88 0a00 	vstr	s0, [r8]
 80064b0:	e7cb      	b.n	800644a <_scanf_float+0x39e>
 80064b2:	4630      	mov	r0, r6
 80064b4:	4639      	mov	r1, r7
 80064b6:	f7fa fb97 	bl	8000be8 <__aeabi_d2f>
 80064ba:	f8c8 0000 	str.w	r0, [r8]
 80064be:	e7c4      	b.n	800644a <_scanf_float+0x39e>
 80064c0:	2500      	movs	r5, #0
 80064c2:	e634      	b.n	800612e <_scanf_float+0x82>
 80064c4:	0800a13c 	.word	0x0800a13c
 80064c8:	0800a548 	.word	0x0800a548

080064cc <nanf>:
 80064cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80064d4 <nanf+0x8>
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	7fc00000 	.word	0x7fc00000

080064d8 <siprintf>:
 80064d8:	b40e      	push	{r1, r2, r3}
 80064da:	b500      	push	{lr}
 80064dc:	b09c      	sub	sp, #112	; 0x70
 80064de:	ab1d      	add	r3, sp, #116	; 0x74
 80064e0:	9002      	str	r0, [sp, #8]
 80064e2:	9006      	str	r0, [sp, #24]
 80064e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064e8:	4809      	ldr	r0, [pc, #36]	; (8006510 <siprintf+0x38>)
 80064ea:	9107      	str	r1, [sp, #28]
 80064ec:	9104      	str	r1, [sp, #16]
 80064ee:	4909      	ldr	r1, [pc, #36]	; (8006514 <siprintf+0x3c>)
 80064f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f4:	9105      	str	r1, [sp, #20]
 80064f6:	6800      	ldr	r0, [r0, #0]
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	a902      	add	r1, sp, #8
 80064fc:	f002 fed4 	bl	80092a8 <_svfiprintf_r>
 8006500:	9b02      	ldr	r3, [sp, #8]
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	b01c      	add	sp, #112	; 0x70
 8006508:	f85d eb04 	ldr.w	lr, [sp], #4
 800650c:	b003      	add	sp, #12
 800650e:	4770      	bx	lr
 8006510:	2000000c 	.word	0x2000000c
 8006514:	ffff0208 	.word	0xffff0208

08006518 <sulp>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	4604      	mov	r4, r0
 800651c:	460d      	mov	r5, r1
 800651e:	ec45 4b10 	vmov	d0, r4, r5
 8006522:	4616      	mov	r6, r2
 8006524:	f002 fc1e 	bl	8008d64 <__ulp>
 8006528:	ec51 0b10 	vmov	r0, r1, d0
 800652c:	b17e      	cbz	r6, 800654e <sulp+0x36>
 800652e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006532:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006536:	2b00      	cmp	r3, #0
 8006538:	dd09      	ble.n	800654e <sulp+0x36>
 800653a:	051b      	lsls	r3, r3, #20
 800653c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006540:	2400      	movs	r4, #0
 8006542:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006546:	4622      	mov	r2, r4
 8006548:	462b      	mov	r3, r5
 800654a:	f7fa f855 	bl	80005f8 <__aeabi_dmul>
 800654e:	bd70      	pop	{r4, r5, r6, pc}

08006550 <_strtod_l>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	ed2d 8b02 	vpush	{d8}
 8006558:	b09d      	sub	sp, #116	; 0x74
 800655a:	461f      	mov	r7, r3
 800655c:	2300      	movs	r3, #0
 800655e:	9318      	str	r3, [sp, #96]	; 0x60
 8006560:	4ba2      	ldr	r3, [pc, #648]	; (80067ec <_strtod_l+0x29c>)
 8006562:	9213      	str	r2, [sp, #76]	; 0x4c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	9305      	str	r3, [sp, #20]
 8006568:	4604      	mov	r4, r0
 800656a:	4618      	mov	r0, r3
 800656c:	4688      	mov	r8, r1
 800656e:	f7f9 fe2f 	bl	80001d0 <strlen>
 8006572:	f04f 0a00 	mov.w	sl, #0
 8006576:	4605      	mov	r5, r0
 8006578:	f04f 0b00 	mov.w	fp, #0
 800657c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006582:	781a      	ldrb	r2, [r3, #0]
 8006584:	2a2b      	cmp	r2, #43	; 0x2b
 8006586:	d04e      	beq.n	8006626 <_strtod_l+0xd6>
 8006588:	d83b      	bhi.n	8006602 <_strtod_l+0xb2>
 800658a:	2a0d      	cmp	r2, #13
 800658c:	d834      	bhi.n	80065f8 <_strtod_l+0xa8>
 800658e:	2a08      	cmp	r2, #8
 8006590:	d834      	bhi.n	80065fc <_strtod_l+0xac>
 8006592:	2a00      	cmp	r2, #0
 8006594:	d03e      	beq.n	8006614 <_strtod_l+0xc4>
 8006596:	2300      	movs	r3, #0
 8006598:	930a      	str	r3, [sp, #40]	; 0x28
 800659a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800659c:	7833      	ldrb	r3, [r6, #0]
 800659e:	2b30      	cmp	r3, #48	; 0x30
 80065a0:	f040 80b0 	bne.w	8006704 <_strtod_l+0x1b4>
 80065a4:	7873      	ldrb	r3, [r6, #1]
 80065a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065aa:	2b58      	cmp	r3, #88	; 0x58
 80065ac:	d168      	bne.n	8006680 <_strtod_l+0x130>
 80065ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	ab18      	add	r3, sp, #96	; 0x60
 80065b4:	9702      	str	r7, [sp, #8]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	4a8d      	ldr	r2, [pc, #564]	; (80067f0 <_strtod_l+0x2a0>)
 80065ba:	ab19      	add	r3, sp, #100	; 0x64
 80065bc:	a917      	add	r1, sp, #92	; 0x5c
 80065be:	4620      	mov	r0, r4
 80065c0:	f001 fd38 	bl	8008034 <__gethex>
 80065c4:	f010 0707 	ands.w	r7, r0, #7
 80065c8:	4605      	mov	r5, r0
 80065ca:	d005      	beq.n	80065d8 <_strtod_l+0x88>
 80065cc:	2f06      	cmp	r7, #6
 80065ce:	d12c      	bne.n	800662a <_strtod_l+0xda>
 80065d0:	3601      	adds	r6, #1
 80065d2:	2300      	movs	r3, #0
 80065d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80065d6:	930a      	str	r3, [sp, #40]	; 0x28
 80065d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f040 8590 	bne.w	8007100 <_strtod_l+0xbb0>
 80065e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e2:	b1eb      	cbz	r3, 8006620 <_strtod_l+0xd0>
 80065e4:	4652      	mov	r2, sl
 80065e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80065ea:	ec43 2b10 	vmov	d0, r2, r3
 80065ee:	b01d      	add	sp, #116	; 0x74
 80065f0:	ecbd 8b02 	vpop	{d8}
 80065f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f8:	2a20      	cmp	r2, #32
 80065fa:	d1cc      	bne.n	8006596 <_strtod_l+0x46>
 80065fc:	3301      	adds	r3, #1
 80065fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8006600:	e7be      	b.n	8006580 <_strtod_l+0x30>
 8006602:	2a2d      	cmp	r2, #45	; 0x2d
 8006604:	d1c7      	bne.n	8006596 <_strtod_l+0x46>
 8006606:	2201      	movs	r2, #1
 8006608:	920a      	str	r2, [sp, #40]	; 0x28
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	9217      	str	r2, [sp, #92]	; 0x5c
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1c2      	bne.n	800659a <_strtod_l+0x4a>
 8006614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006616:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800661a:	2b00      	cmp	r3, #0
 800661c:	f040 856e 	bne.w	80070fc <_strtod_l+0xbac>
 8006620:	4652      	mov	r2, sl
 8006622:	465b      	mov	r3, fp
 8006624:	e7e1      	b.n	80065ea <_strtod_l+0x9a>
 8006626:	2200      	movs	r2, #0
 8006628:	e7ee      	b.n	8006608 <_strtod_l+0xb8>
 800662a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800662c:	b13a      	cbz	r2, 800663e <_strtod_l+0xee>
 800662e:	2135      	movs	r1, #53	; 0x35
 8006630:	a81a      	add	r0, sp, #104	; 0x68
 8006632:	f002 fca2 	bl	8008f7a <__copybits>
 8006636:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006638:	4620      	mov	r0, r4
 800663a:	f002 f861 	bl	8008700 <_Bfree>
 800663e:	3f01      	subs	r7, #1
 8006640:	2f04      	cmp	r7, #4
 8006642:	d806      	bhi.n	8006652 <_strtod_l+0x102>
 8006644:	e8df f007 	tbb	[pc, r7]
 8006648:	1714030a 	.word	0x1714030a
 800664c:	0a          	.byte	0x0a
 800664d:	00          	.byte	0x00
 800664e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006652:	0728      	lsls	r0, r5, #28
 8006654:	d5c0      	bpl.n	80065d8 <_strtod_l+0x88>
 8006656:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800665a:	e7bd      	b.n	80065d8 <_strtod_l+0x88>
 800665c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006660:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006662:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006666:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800666a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800666e:	e7f0      	b.n	8006652 <_strtod_l+0x102>
 8006670:	f8df b180 	ldr.w	fp, [pc, #384]	; 80067f4 <_strtod_l+0x2a4>
 8006674:	e7ed      	b.n	8006652 <_strtod_l+0x102>
 8006676:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800667a:	f04f 3aff 	mov.w	sl, #4294967295
 800667e:	e7e8      	b.n	8006652 <_strtod_l+0x102>
 8006680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	9217      	str	r2, [sp, #92]	; 0x5c
 8006686:	785b      	ldrb	r3, [r3, #1]
 8006688:	2b30      	cmp	r3, #48	; 0x30
 800668a:	d0f9      	beq.n	8006680 <_strtod_l+0x130>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0a3      	beq.n	80065d8 <_strtod_l+0x88>
 8006690:	2301      	movs	r3, #1
 8006692:	f04f 0900 	mov.w	r9, #0
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800669a:	9308      	str	r3, [sp, #32]
 800669c:	f8cd 901c 	str.w	r9, [sp, #28]
 80066a0:	464f      	mov	r7, r9
 80066a2:	220a      	movs	r2, #10
 80066a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80066a6:	7806      	ldrb	r6, [r0, #0]
 80066a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80066ac:	b2d9      	uxtb	r1, r3
 80066ae:	2909      	cmp	r1, #9
 80066b0:	d92a      	bls.n	8006708 <_strtod_l+0x1b8>
 80066b2:	9905      	ldr	r1, [sp, #20]
 80066b4:	462a      	mov	r2, r5
 80066b6:	f002 ff0f 	bl	80094d8 <strncmp>
 80066ba:	b398      	cbz	r0, 8006724 <_strtod_l+0x1d4>
 80066bc:	2000      	movs	r0, #0
 80066be:	4632      	mov	r2, r6
 80066c0:	463d      	mov	r5, r7
 80066c2:	9005      	str	r0, [sp, #20]
 80066c4:	4603      	mov	r3, r0
 80066c6:	2a65      	cmp	r2, #101	; 0x65
 80066c8:	d001      	beq.n	80066ce <_strtod_l+0x17e>
 80066ca:	2a45      	cmp	r2, #69	; 0x45
 80066cc:	d118      	bne.n	8006700 <_strtod_l+0x1b0>
 80066ce:	b91d      	cbnz	r5, 80066d8 <_strtod_l+0x188>
 80066d0:	9a04      	ldr	r2, [sp, #16]
 80066d2:	4302      	orrs	r2, r0
 80066d4:	d09e      	beq.n	8006614 <_strtod_l+0xc4>
 80066d6:	2500      	movs	r5, #0
 80066d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80066dc:	f108 0201 	add.w	r2, r8, #1
 80066e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80066e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80066e6:	2a2b      	cmp	r2, #43	; 0x2b
 80066e8:	d075      	beq.n	80067d6 <_strtod_l+0x286>
 80066ea:	2a2d      	cmp	r2, #45	; 0x2d
 80066ec:	d07b      	beq.n	80067e6 <_strtod_l+0x296>
 80066ee:	f04f 0c00 	mov.w	ip, #0
 80066f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80066f6:	2909      	cmp	r1, #9
 80066f8:	f240 8082 	bls.w	8006800 <_strtod_l+0x2b0>
 80066fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006700:	2600      	movs	r6, #0
 8006702:	e09d      	b.n	8006840 <_strtod_l+0x2f0>
 8006704:	2300      	movs	r3, #0
 8006706:	e7c4      	b.n	8006692 <_strtod_l+0x142>
 8006708:	2f08      	cmp	r7, #8
 800670a:	bfd8      	it	le
 800670c:	9907      	ldrle	r1, [sp, #28]
 800670e:	f100 0001 	add.w	r0, r0, #1
 8006712:	bfda      	itte	le
 8006714:	fb02 3301 	mlale	r3, r2, r1, r3
 8006718:	9307      	strle	r3, [sp, #28]
 800671a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800671e:	3701      	adds	r7, #1
 8006720:	9017      	str	r0, [sp, #92]	; 0x5c
 8006722:	e7bf      	b.n	80066a4 <_strtod_l+0x154>
 8006724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006726:	195a      	adds	r2, r3, r5
 8006728:	9217      	str	r2, [sp, #92]	; 0x5c
 800672a:	5d5a      	ldrb	r2, [r3, r5]
 800672c:	2f00      	cmp	r7, #0
 800672e:	d037      	beq.n	80067a0 <_strtod_l+0x250>
 8006730:	9005      	str	r0, [sp, #20]
 8006732:	463d      	mov	r5, r7
 8006734:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006738:	2b09      	cmp	r3, #9
 800673a:	d912      	bls.n	8006762 <_strtod_l+0x212>
 800673c:	2301      	movs	r3, #1
 800673e:	e7c2      	b.n	80066c6 <_strtod_l+0x176>
 8006740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	9217      	str	r2, [sp, #92]	; 0x5c
 8006746:	785a      	ldrb	r2, [r3, #1]
 8006748:	3001      	adds	r0, #1
 800674a:	2a30      	cmp	r2, #48	; 0x30
 800674c:	d0f8      	beq.n	8006740 <_strtod_l+0x1f0>
 800674e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006752:	2b08      	cmp	r3, #8
 8006754:	f200 84d9 	bhi.w	800710a <_strtod_l+0xbba>
 8006758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800675a:	9005      	str	r0, [sp, #20]
 800675c:	2000      	movs	r0, #0
 800675e:	9308      	str	r3, [sp, #32]
 8006760:	4605      	mov	r5, r0
 8006762:	3a30      	subs	r2, #48	; 0x30
 8006764:	f100 0301 	add.w	r3, r0, #1
 8006768:	d014      	beq.n	8006794 <_strtod_l+0x244>
 800676a:	9905      	ldr	r1, [sp, #20]
 800676c:	4419      	add	r1, r3
 800676e:	9105      	str	r1, [sp, #20]
 8006770:	462b      	mov	r3, r5
 8006772:	eb00 0e05 	add.w	lr, r0, r5
 8006776:	210a      	movs	r1, #10
 8006778:	4573      	cmp	r3, lr
 800677a:	d113      	bne.n	80067a4 <_strtod_l+0x254>
 800677c:	182b      	adds	r3, r5, r0
 800677e:	2b08      	cmp	r3, #8
 8006780:	f105 0501 	add.w	r5, r5, #1
 8006784:	4405      	add	r5, r0
 8006786:	dc1c      	bgt.n	80067c2 <_strtod_l+0x272>
 8006788:	9907      	ldr	r1, [sp, #28]
 800678a:	230a      	movs	r3, #10
 800678c:	fb03 2301 	mla	r3, r3, r1, r2
 8006790:	9307      	str	r3, [sp, #28]
 8006792:	2300      	movs	r3, #0
 8006794:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006796:	1c51      	adds	r1, r2, #1
 8006798:	9117      	str	r1, [sp, #92]	; 0x5c
 800679a:	7852      	ldrb	r2, [r2, #1]
 800679c:	4618      	mov	r0, r3
 800679e:	e7c9      	b.n	8006734 <_strtod_l+0x1e4>
 80067a0:	4638      	mov	r0, r7
 80067a2:	e7d2      	b.n	800674a <_strtod_l+0x1fa>
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	dc04      	bgt.n	80067b2 <_strtod_l+0x262>
 80067a8:	9e07      	ldr	r6, [sp, #28]
 80067aa:	434e      	muls	r6, r1
 80067ac:	9607      	str	r6, [sp, #28]
 80067ae:	3301      	adds	r3, #1
 80067b0:	e7e2      	b.n	8006778 <_strtod_l+0x228>
 80067b2:	f103 0c01 	add.w	ip, r3, #1
 80067b6:	f1bc 0f10 	cmp.w	ip, #16
 80067ba:	bfd8      	it	le
 80067bc:	fb01 f909 	mulle.w	r9, r1, r9
 80067c0:	e7f5      	b.n	80067ae <_strtod_l+0x25e>
 80067c2:	2d10      	cmp	r5, #16
 80067c4:	bfdc      	itt	le
 80067c6:	230a      	movle	r3, #10
 80067c8:	fb03 2909 	mlale	r9, r3, r9, r2
 80067cc:	e7e1      	b.n	8006792 <_strtod_l+0x242>
 80067ce:	2300      	movs	r3, #0
 80067d0:	9305      	str	r3, [sp, #20]
 80067d2:	2301      	movs	r3, #1
 80067d4:	e77c      	b.n	80066d0 <_strtod_l+0x180>
 80067d6:	f04f 0c00 	mov.w	ip, #0
 80067da:	f108 0202 	add.w	r2, r8, #2
 80067de:	9217      	str	r2, [sp, #92]	; 0x5c
 80067e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80067e4:	e785      	b.n	80066f2 <_strtod_l+0x1a2>
 80067e6:	f04f 0c01 	mov.w	ip, #1
 80067ea:	e7f6      	b.n	80067da <_strtod_l+0x28a>
 80067ec:	0800a390 	.word	0x0800a390
 80067f0:	0800a144 	.word	0x0800a144
 80067f4:	7ff00000 	.word	0x7ff00000
 80067f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067fa:	1c51      	adds	r1, r2, #1
 80067fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80067fe:	7852      	ldrb	r2, [r2, #1]
 8006800:	2a30      	cmp	r2, #48	; 0x30
 8006802:	d0f9      	beq.n	80067f8 <_strtod_l+0x2a8>
 8006804:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006808:	2908      	cmp	r1, #8
 800680a:	f63f af79 	bhi.w	8006700 <_strtod_l+0x1b0>
 800680e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006812:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006814:	9206      	str	r2, [sp, #24]
 8006816:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006818:	1c51      	adds	r1, r2, #1
 800681a:	9117      	str	r1, [sp, #92]	; 0x5c
 800681c:	7852      	ldrb	r2, [r2, #1]
 800681e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006822:	2e09      	cmp	r6, #9
 8006824:	d937      	bls.n	8006896 <_strtod_l+0x346>
 8006826:	9e06      	ldr	r6, [sp, #24]
 8006828:	1b89      	subs	r1, r1, r6
 800682a:	2908      	cmp	r1, #8
 800682c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006830:	dc02      	bgt.n	8006838 <_strtod_l+0x2e8>
 8006832:	4576      	cmp	r6, lr
 8006834:	bfa8      	it	ge
 8006836:	4676      	movge	r6, lr
 8006838:	f1bc 0f00 	cmp.w	ip, #0
 800683c:	d000      	beq.n	8006840 <_strtod_l+0x2f0>
 800683e:	4276      	negs	r6, r6
 8006840:	2d00      	cmp	r5, #0
 8006842:	d14d      	bne.n	80068e0 <_strtod_l+0x390>
 8006844:	9904      	ldr	r1, [sp, #16]
 8006846:	4301      	orrs	r1, r0
 8006848:	f47f aec6 	bne.w	80065d8 <_strtod_l+0x88>
 800684c:	2b00      	cmp	r3, #0
 800684e:	f47f aee1 	bne.w	8006614 <_strtod_l+0xc4>
 8006852:	2a69      	cmp	r2, #105	; 0x69
 8006854:	d027      	beq.n	80068a6 <_strtod_l+0x356>
 8006856:	dc24      	bgt.n	80068a2 <_strtod_l+0x352>
 8006858:	2a49      	cmp	r2, #73	; 0x49
 800685a:	d024      	beq.n	80068a6 <_strtod_l+0x356>
 800685c:	2a4e      	cmp	r2, #78	; 0x4e
 800685e:	f47f aed9 	bne.w	8006614 <_strtod_l+0xc4>
 8006862:	499f      	ldr	r1, [pc, #636]	; (8006ae0 <_strtod_l+0x590>)
 8006864:	a817      	add	r0, sp, #92	; 0x5c
 8006866:	f001 fe3d 	bl	80084e4 <__match>
 800686a:	2800      	cmp	r0, #0
 800686c:	f43f aed2 	beq.w	8006614 <_strtod_l+0xc4>
 8006870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b28      	cmp	r3, #40	; 0x28
 8006876:	d12d      	bne.n	80068d4 <_strtod_l+0x384>
 8006878:	499a      	ldr	r1, [pc, #616]	; (8006ae4 <_strtod_l+0x594>)
 800687a:	aa1a      	add	r2, sp, #104	; 0x68
 800687c:	a817      	add	r0, sp, #92	; 0x5c
 800687e:	f001 fe45 	bl	800850c <__hexnan>
 8006882:	2805      	cmp	r0, #5
 8006884:	d126      	bne.n	80068d4 <_strtod_l+0x384>
 8006886:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006888:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800688c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006890:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006894:	e6a0      	b.n	80065d8 <_strtod_l+0x88>
 8006896:	210a      	movs	r1, #10
 8006898:	fb01 2e0e 	mla	lr, r1, lr, r2
 800689c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80068a0:	e7b9      	b.n	8006816 <_strtod_l+0x2c6>
 80068a2:	2a6e      	cmp	r2, #110	; 0x6e
 80068a4:	e7db      	b.n	800685e <_strtod_l+0x30e>
 80068a6:	4990      	ldr	r1, [pc, #576]	; (8006ae8 <_strtod_l+0x598>)
 80068a8:	a817      	add	r0, sp, #92	; 0x5c
 80068aa:	f001 fe1b 	bl	80084e4 <__match>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f43f aeb0 	beq.w	8006614 <_strtod_l+0xc4>
 80068b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068b6:	498d      	ldr	r1, [pc, #564]	; (8006aec <_strtod_l+0x59c>)
 80068b8:	3b01      	subs	r3, #1
 80068ba:	a817      	add	r0, sp, #92	; 0x5c
 80068bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80068be:	f001 fe11 	bl	80084e4 <__match>
 80068c2:	b910      	cbnz	r0, 80068ca <_strtod_l+0x37a>
 80068c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068c6:	3301      	adds	r3, #1
 80068c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80068ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006afc <_strtod_l+0x5ac>
 80068ce:	f04f 0a00 	mov.w	sl, #0
 80068d2:	e681      	b.n	80065d8 <_strtod_l+0x88>
 80068d4:	4886      	ldr	r0, [pc, #536]	; (8006af0 <_strtod_l+0x5a0>)
 80068d6:	f002 fde7 	bl	80094a8 <nan>
 80068da:	ec5b ab10 	vmov	sl, fp, d0
 80068de:	e67b      	b.n	80065d8 <_strtod_l+0x88>
 80068e0:	9b05      	ldr	r3, [sp, #20]
 80068e2:	9807      	ldr	r0, [sp, #28]
 80068e4:	1af3      	subs	r3, r6, r3
 80068e6:	2f00      	cmp	r7, #0
 80068e8:	bf08      	it	eq
 80068ea:	462f      	moveq	r7, r5
 80068ec:	2d10      	cmp	r5, #16
 80068ee:	9306      	str	r3, [sp, #24]
 80068f0:	46a8      	mov	r8, r5
 80068f2:	bfa8      	it	ge
 80068f4:	f04f 0810 	movge.w	r8, #16
 80068f8:	f7f9 fe04 	bl	8000504 <__aeabi_ui2d>
 80068fc:	2d09      	cmp	r5, #9
 80068fe:	4682      	mov	sl, r0
 8006900:	468b      	mov	fp, r1
 8006902:	dd13      	ble.n	800692c <_strtod_l+0x3dc>
 8006904:	4b7b      	ldr	r3, [pc, #492]	; (8006af4 <_strtod_l+0x5a4>)
 8006906:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800690a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800690e:	f7f9 fe73 	bl	80005f8 <__aeabi_dmul>
 8006912:	4682      	mov	sl, r0
 8006914:	4648      	mov	r0, r9
 8006916:	468b      	mov	fp, r1
 8006918:	f7f9 fdf4 	bl	8000504 <__aeabi_ui2d>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4650      	mov	r0, sl
 8006922:	4659      	mov	r1, fp
 8006924:	f7f9 fcb2 	bl	800028c <__adddf3>
 8006928:	4682      	mov	sl, r0
 800692a:	468b      	mov	fp, r1
 800692c:	2d0f      	cmp	r5, #15
 800692e:	dc38      	bgt.n	80069a2 <_strtod_l+0x452>
 8006930:	9b06      	ldr	r3, [sp, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f43f ae50 	beq.w	80065d8 <_strtod_l+0x88>
 8006938:	dd24      	ble.n	8006984 <_strtod_l+0x434>
 800693a:	2b16      	cmp	r3, #22
 800693c:	dc0b      	bgt.n	8006956 <_strtod_l+0x406>
 800693e:	496d      	ldr	r1, [pc, #436]	; (8006af4 <_strtod_l+0x5a4>)
 8006940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006948:	4652      	mov	r2, sl
 800694a:	465b      	mov	r3, fp
 800694c:	f7f9 fe54 	bl	80005f8 <__aeabi_dmul>
 8006950:	4682      	mov	sl, r0
 8006952:	468b      	mov	fp, r1
 8006954:	e640      	b.n	80065d8 <_strtod_l+0x88>
 8006956:	9a06      	ldr	r2, [sp, #24]
 8006958:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800695c:	4293      	cmp	r3, r2
 800695e:	db20      	blt.n	80069a2 <_strtod_l+0x452>
 8006960:	4c64      	ldr	r4, [pc, #400]	; (8006af4 <_strtod_l+0x5a4>)
 8006962:	f1c5 050f 	rsb	r5, r5, #15
 8006966:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800696a:	4652      	mov	r2, sl
 800696c:	465b      	mov	r3, fp
 800696e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006972:	f7f9 fe41 	bl	80005f8 <__aeabi_dmul>
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	1b5d      	subs	r5, r3, r5
 800697a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800697e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006982:	e7e3      	b.n	800694c <_strtod_l+0x3fc>
 8006984:	9b06      	ldr	r3, [sp, #24]
 8006986:	3316      	adds	r3, #22
 8006988:	db0b      	blt.n	80069a2 <_strtod_l+0x452>
 800698a:	9b05      	ldr	r3, [sp, #20]
 800698c:	1b9e      	subs	r6, r3, r6
 800698e:	4b59      	ldr	r3, [pc, #356]	; (8006af4 <_strtod_l+0x5a4>)
 8006990:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006994:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006998:	4650      	mov	r0, sl
 800699a:	4659      	mov	r1, fp
 800699c:	f7f9 ff56 	bl	800084c <__aeabi_ddiv>
 80069a0:	e7d6      	b.n	8006950 <_strtod_l+0x400>
 80069a2:	9b06      	ldr	r3, [sp, #24]
 80069a4:	eba5 0808 	sub.w	r8, r5, r8
 80069a8:	4498      	add	r8, r3
 80069aa:	f1b8 0f00 	cmp.w	r8, #0
 80069ae:	dd74      	ble.n	8006a9a <_strtod_l+0x54a>
 80069b0:	f018 030f 	ands.w	r3, r8, #15
 80069b4:	d00a      	beq.n	80069cc <_strtod_l+0x47c>
 80069b6:	494f      	ldr	r1, [pc, #316]	; (8006af4 <_strtod_l+0x5a4>)
 80069b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069bc:	4652      	mov	r2, sl
 80069be:	465b      	mov	r3, fp
 80069c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069c4:	f7f9 fe18 	bl	80005f8 <__aeabi_dmul>
 80069c8:	4682      	mov	sl, r0
 80069ca:	468b      	mov	fp, r1
 80069cc:	f038 080f 	bics.w	r8, r8, #15
 80069d0:	d04f      	beq.n	8006a72 <_strtod_l+0x522>
 80069d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80069d6:	dd22      	ble.n	8006a1e <_strtod_l+0x4ce>
 80069d8:	2500      	movs	r5, #0
 80069da:	462e      	mov	r6, r5
 80069dc:	9507      	str	r5, [sp, #28]
 80069de:	9505      	str	r5, [sp, #20]
 80069e0:	2322      	movs	r3, #34	; 0x22
 80069e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006afc <_strtod_l+0x5ac>
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	f04f 0a00 	mov.w	sl, #0
 80069ec:	9b07      	ldr	r3, [sp, #28]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f43f adf2 	beq.w	80065d8 <_strtod_l+0x88>
 80069f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069f6:	4620      	mov	r0, r4
 80069f8:	f001 fe82 	bl	8008700 <_Bfree>
 80069fc:	9905      	ldr	r1, [sp, #20]
 80069fe:	4620      	mov	r0, r4
 8006a00:	f001 fe7e 	bl	8008700 <_Bfree>
 8006a04:	4631      	mov	r1, r6
 8006a06:	4620      	mov	r0, r4
 8006a08:	f001 fe7a 	bl	8008700 <_Bfree>
 8006a0c:	9907      	ldr	r1, [sp, #28]
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f001 fe76 	bl	8008700 <_Bfree>
 8006a14:	4629      	mov	r1, r5
 8006a16:	4620      	mov	r0, r4
 8006a18:	f001 fe72 	bl	8008700 <_Bfree>
 8006a1c:	e5dc      	b.n	80065d8 <_strtod_l+0x88>
 8006a1e:	4b36      	ldr	r3, [pc, #216]	; (8006af8 <_strtod_l+0x5a8>)
 8006a20:	9304      	str	r3, [sp, #16]
 8006a22:	2300      	movs	r3, #0
 8006a24:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006a28:	4650      	mov	r0, sl
 8006a2a:	4659      	mov	r1, fp
 8006a2c:	4699      	mov	r9, r3
 8006a2e:	f1b8 0f01 	cmp.w	r8, #1
 8006a32:	dc21      	bgt.n	8006a78 <_strtod_l+0x528>
 8006a34:	b10b      	cbz	r3, 8006a3a <_strtod_l+0x4ea>
 8006a36:	4682      	mov	sl, r0
 8006a38:	468b      	mov	fp, r1
 8006a3a:	4b2f      	ldr	r3, [pc, #188]	; (8006af8 <_strtod_l+0x5a8>)
 8006a3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006a40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006a44:	4652      	mov	r2, sl
 8006a46:	465b      	mov	r3, fp
 8006a48:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <_strtod_l+0x5ac>)
 8006a52:	460a      	mov	r2, r1
 8006a54:	400b      	ands	r3, r1
 8006a56:	492a      	ldr	r1, [pc, #168]	; (8006b00 <_strtod_l+0x5b0>)
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	4682      	mov	sl, r0
 8006a5c:	d8bc      	bhi.n	80069d8 <_strtod_l+0x488>
 8006a5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a62:	428b      	cmp	r3, r1
 8006a64:	bf86      	itte	hi
 8006a66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006b04 <_strtod_l+0x5b4>
 8006a6a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006a6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006a72:	2300      	movs	r3, #0
 8006a74:	9304      	str	r3, [sp, #16]
 8006a76:	e084      	b.n	8006b82 <_strtod_l+0x632>
 8006a78:	f018 0f01 	tst.w	r8, #1
 8006a7c:	d005      	beq.n	8006a8a <_strtod_l+0x53a>
 8006a7e:	9b04      	ldr	r3, [sp, #16]
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f7f9 fdb8 	bl	80005f8 <__aeabi_dmul>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	9a04      	ldr	r2, [sp, #16]
 8006a8c:	3208      	adds	r2, #8
 8006a8e:	f109 0901 	add.w	r9, r9, #1
 8006a92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006a96:	9204      	str	r2, [sp, #16]
 8006a98:	e7c9      	b.n	8006a2e <_strtod_l+0x4de>
 8006a9a:	d0ea      	beq.n	8006a72 <_strtod_l+0x522>
 8006a9c:	f1c8 0800 	rsb	r8, r8, #0
 8006aa0:	f018 020f 	ands.w	r2, r8, #15
 8006aa4:	d00a      	beq.n	8006abc <_strtod_l+0x56c>
 8006aa6:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <_strtod_l+0x5a4>)
 8006aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aac:	4650      	mov	r0, sl
 8006aae:	4659      	mov	r1, fp
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	f7f9 feca 	bl	800084c <__aeabi_ddiv>
 8006ab8:	4682      	mov	sl, r0
 8006aba:	468b      	mov	fp, r1
 8006abc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006ac0:	d0d7      	beq.n	8006a72 <_strtod_l+0x522>
 8006ac2:	f1b8 0f1f 	cmp.w	r8, #31
 8006ac6:	dd1f      	ble.n	8006b08 <_strtod_l+0x5b8>
 8006ac8:	2500      	movs	r5, #0
 8006aca:	462e      	mov	r6, r5
 8006acc:	9507      	str	r5, [sp, #28]
 8006ace:	9505      	str	r5, [sp, #20]
 8006ad0:	2322      	movs	r3, #34	; 0x22
 8006ad2:	f04f 0a00 	mov.w	sl, #0
 8006ad6:	f04f 0b00 	mov.w	fp, #0
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	e786      	b.n	80069ec <_strtod_l+0x49c>
 8006ade:	bf00      	nop
 8006ae0:	0800a115 	.word	0x0800a115
 8006ae4:	0800a158 	.word	0x0800a158
 8006ae8:	0800a10d 	.word	0x0800a10d
 8006aec:	0800a29c 	.word	0x0800a29c
 8006af0:	0800a548 	.word	0x0800a548
 8006af4:	0800a428 	.word	0x0800a428
 8006af8:	0800a400 	.word	0x0800a400
 8006afc:	7ff00000 	.word	0x7ff00000
 8006b00:	7ca00000 	.word	0x7ca00000
 8006b04:	7fefffff 	.word	0x7fefffff
 8006b08:	f018 0310 	ands.w	r3, r8, #16
 8006b0c:	bf18      	it	ne
 8006b0e:	236a      	movne	r3, #106	; 0x6a
 8006b10:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006ec0 <_strtod_l+0x970>
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	4650      	mov	r0, sl
 8006b18:	4659      	mov	r1, fp
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f018 0f01 	tst.w	r8, #1
 8006b20:	d004      	beq.n	8006b2c <_strtod_l+0x5dc>
 8006b22:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b26:	f7f9 fd67 	bl	80005f8 <__aeabi_dmul>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006b30:	f109 0908 	add.w	r9, r9, #8
 8006b34:	d1f2      	bne.n	8006b1c <_strtod_l+0x5cc>
 8006b36:	b10b      	cbz	r3, 8006b3c <_strtod_l+0x5ec>
 8006b38:	4682      	mov	sl, r0
 8006b3a:	468b      	mov	fp, r1
 8006b3c:	9b04      	ldr	r3, [sp, #16]
 8006b3e:	b1c3      	cbz	r3, 8006b72 <_strtod_l+0x622>
 8006b40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	4659      	mov	r1, fp
 8006b4c:	dd11      	ble.n	8006b72 <_strtod_l+0x622>
 8006b4e:	2b1f      	cmp	r3, #31
 8006b50:	f340 8124 	ble.w	8006d9c <_strtod_l+0x84c>
 8006b54:	2b34      	cmp	r3, #52	; 0x34
 8006b56:	bfde      	ittt	le
 8006b58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b5c:	f04f 33ff 	movle.w	r3, #4294967295
 8006b60:	fa03 f202 	lslle.w	r2, r3, r2
 8006b64:	f04f 0a00 	mov.w	sl, #0
 8006b68:	bfcc      	ite	gt
 8006b6a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006b6e:	ea02 0b01 	andle.w	fp, r2, r1
 8006b72:	2200      	movs	r2, #0
 8006b74:	2300      	movs	r3, #0
 8006b76:	4650      	mov	r0, sl
 8006b78:	4659      	mov	r1, fp
 8006b7a:	f7f9 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d1a2      	bne.n	8006ac8 <_strtod_l+0x578>
 8006b82:	9b07      	ldr	r3, [sp, #28]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	9908      	ldr	r1, [sp, #32]
 8006b88:	462b      	mov	r3, r5
 8006b8a:	463a      	mov	r2, r7
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f001 fe1f 	bl	80087d0 <__s2b>
 8006b92:	9007      	str	r0, [sp, #28]
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f43f af1f 	beq.w	80069d8 <_strtod_l+0x488>
 8006b9a:	9b05      	ldr	r3, [sp, #20]
 8006b9c:	1b9e      	subs	r6, r3, r6
 8006b9e:	9b06      	ldr	r3, [sp, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bfb4      	ite	lt
 8006ba4:	4633      	movlt	r3, r6
 8006ba6:	2300      	movge	r3, #0
 8006ba8:	930c      	str	r3, [sp, #48]	; 0x30
 8006baa:	9b06      	ldr	r3, [sp, #24]
 8006bac:	2500      	movs	r5, #0
 8006bae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006bb2:	9312      	str	r3, [sp, #72]	; 0x48
 8006bb4:	462e      	mov	r6, r5
 8006bb6:	9b07      	ldr	r3, [sp, #28]
 8006bb8:	4620      	mov	r0, r4
 8006bba:	6859      	ldr	r1, [r3, #4]
 8006bbc:	f001 fd60 	bl	8008680 <_Balloc>
 8006bc0:	9005      	str	r0, [sp, #20]
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f43f af0c 	beq.w	80069e0 <_strtod_l+0x490>
 8006bc8:	9b07      	ldr	r3, [sp, #28]
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	3202      	adds	r2, #2
 8006bce:	f103 010c 	add.w	r1, r3, #12
 8006bd2:	0092      	lsls	r2, r2, #2
 8006bd4:	300c      	adds	r0, #12
 8006bd6:	f7fe fde9 	bl	80057ac <memcpy>
 8006bda:	ec4b ab10 	vmov	d0, sl, fp
 8006bde:	aa1a      	add	r2, sp, #104	; 0x68
 8006be0:	a919      	add	r1, sp, #100	; 0x64
 8006be2:	4620      	mov	r0, r4
 8006be4:	f002 f93a 	bl	8008e5c <__d2b>
 8006be8:	ec4b ab18 	vmov	d8, sl, fp
 8006bec:	9018      	str	r0, [sp, #96]	; 0x60
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f43f aef6 	beq.w	80069e0 <_strtod_l+0x490>
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f001 fe84 	bl	8008904 <__i2b>
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f43f aeee 	beq.w	80069e0 <_strtod_l+0x490>
 8006c04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c06:	9904      	ldr	r1, [sp, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bfab      	itete	ge
 8006c0c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006c0e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006c10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006c12:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006c16:	bfac      	ite	ge
 8006c18:	eb03 0902 	addge.w	r9, r3, r2
 8006c1c:	1ad7      	sublt	r7, r2, r3
 8006c1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c20:	eba3 0801 	sub.w	r8, r3, r1
 8006c24:	4490      	add	r8, r2
 8006c26:	4ba1      	ldr	r3, [pc, #644]	; (8006eac <_strtod_l+0x95c>)
 8006c28:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c2c:	4598      	cmp	r8, r3
 8006c2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c32:	f280 80c7 	bge.w	8006dc4 <_strtod_l+0x874>
 8006c36:	eba3 0308 	sub.w	r3, r3, r8
 8006c3a:	2b1f      	cmp	r3, #31
 8006c3c:	eba2 0203 	sub.w	r2, r2, r3
 8006c40:	f04f 0101 	mov.w	r1, #1
 8006c44:	f300 80b1 	bgt.w	8006daa <_strtod_l+0x85a>
 8006c48:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4c:	930d      	str	r3, [sp, #52]	; 0x34
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9308      	str	r3, [sp, #32]
 8006c52:	eb09 0802 	add.w	r8, r9, r2
 8006c56:	9b04      	ldr	r3, [sp, #16]
 8006c58:	45c1      	cmp	r9, r8
 8006c5a:	4417      	add	r7, r2
 8006c5c:	441f      	add	r7, r3
 8006c5e:	464b      	mov	r3, r9
 8006c60:	bfa8      	it	ge
 8006c62:	4643      	movge	r3, r8
 8006c64:	42bb      	cmp	r3, r7
 8006c66:	bfa8      	it	ge
 8006c68:	463b      	movge	r3, r7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	bfc2      	ittt	gt
 8006c6e:	eba8 0803 	subgt.w	r8, r8, r3
 8006c72:	1aff      	subgt	r7, r7, r3
 8006c74:	eba9 0903 	subgt.w	r9, r9, r3
 8006c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	dd17      	ble.n	8006cae <_strtod_l+0x75e>
 8006c7e:	4631      	mov	r1, r6
 8006c80:	461a      	mov	r2, r3
 8006c82:	4620      	mov	r0, r4
 8006c84:	f001 fefe 	bl	8008a84 <__pow5mult>
 8006c88:	4606      	mov	r6, r0
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f43f aea8 	beq.w	80069e0 <_strtod_l+0x490>
 8006c90:	4601      	mov	r1, r0
 8006c92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c94:	4620      	mov	r0, r4
 8006c96:	f001 fe4b 	bl	8008930 <__multiply>
 8006c9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	f43f ae9f 	beq.w	80069e0 <_strtod_l+0x490>
 8006ca2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f001 fd2b 	bl	8008700 <_Bfree>
 8006caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cac:	9318      	str	r3, [sp, #96]	; 0x60
 8006cae:	f1b8 0f00 	cmp.w	r8, #0
 8006cb2:	f300 808c 	bgt.w	8006dce <_strtod_l+0x87e>
 8006cb6:	9b06      	ldr	r3, [sp, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dd08      	ble.n	8006cce <_strtod_l+0x77e>
 8006cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cbe:	9905      	ldr	r1, [sp, #20]
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f001 fedf 	bl	8008a84 <__pow5mult>
 8006cc6:	9005      	str	r0, [sp, #20]
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	f43f ae89 	beq.w	80069e0 <_strtod_l+0x490>
 8006cce:	2f00      	cmp	r7, #0
 8006cd0:	dd08      	ble.n	8006ce4 <_strtod_l+0x794>
 8006cd2:	9905      	ldr	r1, [sp, #20]
 8006cd4:	463a      	mov	r2, r7
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f001 ff2e 	bl	8008b38 <__lshift>
 8006cdc:	9005      	str	r0, [sp, #20]
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f43f ae7e 	beq.w	80069e0 <_strtod_l+0x490>
 8006ce4:	f1b9 0f00 	cmp.w	r9, #0
 8006ce8:	dd08      	ble.n	8006cfc <_strtod_l+0x7ac>
 8006cea:	4631      	mov	r1, r6
 8006cec:	464a      	mov	r2, r9
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f001 ff22 	bl	8008b38 <__lshift>
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f ae72 	beq.w	80069e0 <_strtod_l+0x490>
 8006cfc:	9a05      	ldr	r2, [sp, #20]
 8006cfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d00:	4620      	mov	r0, r4
 8006d02:	f001 ffa5 	bl	8008c50 <__mdiff>
 8006d06:	4605      	mov	r5, r0
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f43f ae69 	beq.w	80069e0 <_strtod_l+0x490>
 8006d0e:	68c3      	ldr	r3, [r0, #12]
 8006d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d12:	2300      	movs	r3, #0
 8006d14:	60c3      	str	r3, [r0, #12]
 8006d16:	4631      	mov	r1, r6
 8006d18:	f001 ff7e 	bl	8008c18 <__mcmp>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	da60      	bge.n	8006de2 <_strtod_l+0x892>
 8006d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d22:	ea53 030a 	orrs.w	r3, r3, sl
 8006d26:	f040 8082 	bne.w	8006e2e <_strtod_l+0x8de>
 8006d2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d17d      	bne.n	8006e2e <_strtod_l+0x8de>
 8006d32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d36:	0d1b      	lsrs	r3, r3, #20
 8006d38:	051b      	lsls	r3, r3, #20
 8006d3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d3e:	d976      	bls.n	8006e2e <_strtod_l+0x8de>
 8006d40:	696b      	ldr	r3, [r5, #20]
 8006d42:	b913      	cbnz	r3, 8006d4a <_strtod_l+0x7fa>
 8006d44:	692b      	ldr	r3, [r5, #16]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	dd71      	ble.n	8006e2e <_strtod_l+0x8de>
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f001 fef2 	bl	8008b38 <__lshift>
 8006d54:	4631      	mov	r1, r6
 8006d56:	4605      	mov	r5, r0
 8006d58:	f001 ff5e 	bl	8008c18 <__mcmp>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	dd66      	ble.n	8006e2e <_strtod_l+0x8de>
 8006d60:	9904      	ldr	r1, [sp, #16]
 8006d62:	4a53      	ldr	r2, [pc, #332]	; (8006eb0 <_strtod_l+0x960>)
 8006d64:	465b      	mov	r3, fp
 8006d66:	2900      	cmp	r1, #0
 8006d68:	f000 8081 	beq.w	8006e6e <_strtod_l+0x91e>
 8006d6c:	ea02 010b 	and.w	r1, r2, fp
 8006d70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d74:	dc7b      	bgt.n	8006e6e <_strtod_l+0x91e>
 8006d76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d7a:	f77f aea9 	ble.w	8006ad0 <_strtod_l+0x580>
 8006d7e:	4b4d      	ldr	r3, [pc, #308]	; (8006eb4 <_strtod_l+0x964>)
 8006d80:	4650      	mov	r0, sl
 8006d82:	4659      	mov	r1, fp
 8006d84:	2200      	movs	r2, #0
 8006d86:	f7f9 fc37 	bl	80005f8 <__aeabi_dmul>
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4303      	orrs	r3, r0
 8006d8e:	bf08      	it	eq
 8006d90:	2322      	moveq	r3, #34	; 0x22
 8006d92:	4682      	mov	sl, r0
 8006d94:	468b      	mov	fp, r1
 8006d96:	bf08      	it	eq
 8006d98:	6023      	streq	r3, [r4, #0]
 8006d9a:	e62b      	b.n	80069f4 <_strtod_l+0x4a4>
 8006d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	ea03 0a0a 	and.w	sl, r3, sl
 8006da8:	e6e3      	b.n	8006b72 <_strtod_l+0x622>
 8006daa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006dae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006db2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006db6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006dba:	fa01 f308 	lsl.w	r3, r1, r8
 8006dbe:	9308      	str	r3, [sp, #32]
 8006dc0:	910d      	str	r1, [sp, #52]	; 0x34
 8006dc2:	e746      	b.n	8006c52 <_strtod_l+0x702>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9308      	str	r3, [sp, #32]
 8006dc8:	2301      	movs	r3, #1
 8006dca:	930d      	str	r3, [sp, #52]	; 0x34
 8006dcc:	e741      	b.n	8006c52 <_strtod_l+0x702>
 8006dce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f001 feb0 	bl	8008b38 <__lshift>
 8006dd8:	9018      	str	r0, [sp, #96]	; 0x60
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	f47f af6b 	bne.w	8006cb6 <_strtod_l+0x766>
 8006de0:	e5fe      	b.n	80069e0 <_strtod_l+0x490>
 8006de2:	465f      	mov	r7, fp
 8006de4:	d16e      	bne.n	8006ec4 <_strtod_l+0x974>
 8006de6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006de8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dec:	b342      	cbz	r2, 8006e40 <_strtod_l+0x8f0>
 8006dee:	4a32      	ldr	r2, [pc, #200]	; (8006eb8 <_strtod_l+0x968>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d128      	bne.n	8006e46 <_strtod_l+0x8f6>
 8006df4:	9b04      	ldr	r3, [sp, #16]
 8006df6:	4651      	mov	r1, sl
 8006df8:	b1eb      	cbz	r3, 8006e36 <_strtod_l+0x8e6>
 8006dfa:	4b2d      	ldr	r3, [pc, #180]	; (8006eb0 <_strtod_l+0x960>)
 8006dfc:	403b      	ands	r3, r7
 8006dfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e02:	f04f 32ff 	mov.w	r2, #4294967295
 8006e06:	d819      	bhi.n	8006e3c <_strtod_l+0x8ec>
 8006e08:	0d1b      	lsrs	r3, r3, #20
 8006e0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	4299      	cmp	r1, r3
 8006e14:	d117      	bne.n	8006e46 <_strtod_l+0x8f6>
 8006e16:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <_strtod_l+0x96c>)
 8006e18:	429f      	cmp	r7, r3
 8006e1a:	d102      	bne.n	8006e22 <_strtod_l+0x8d2>
 8006e1c:	3101      	adds	r1, #1
 8006e1e:	f43f addf 	beq.w	80069e0 <_strtod_l+0x490>
 8006e22:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <_strtod_l+0x960>)
 8006e24:	403b      	ands	r3, r7
 8006e26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006e2a:	f04f 0a00 	mov.w	sl, #0
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1a4      	bne.n	8006d7e <_strtod_l+0x82e>
 8006e34:	e5de      	b.n	80069f4 <_strtod_l+0x4a4>
 8006e36:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3a:	e7ea      	b.n	8006e12 <_strtod_l+0x8c2>
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	e7e8      	b.n	8006e12 <_strtod_l+0x8c2>
 8006e40:	ea53 030a 	orrs.w	r3, r3, sl
 8006e44:	d08c      	beq.n	8006d60 <_strtod_l+0x810>
 8006e46:	9b08      	ldr	r3, [sp, #32]
 8006e48:	b1db      	cbz	r3, 8006e82 <_strtod_l+0x932>
 8006e4a:	423b      	tst	r3, r7
 8006e4c:	d0ef      	beq.n	8006e2e <_strtod_l+0x8de>
 8006e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e50:	9a04      	ldr	r2, [sp, #16]
 8006e52:	4650      	mov	r0, sl
 8006e54:	4659      	mov	r1, fp
 8006e56:	b1c3      	cbz	r3, 8006e8a <_strtod_l+0x93a>
 8006e58:	f7ff fb5e 	bl	8006518 <sulp>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	ec51 0b18 	vmov	r0, r1, d8
 8006e64:	f7f9 fa12 	bl	800028c <__adddf3>
 8006e68:	4682      	mov	sl, r0
 8006e6a:	468b      	mov	fp, r1
 8006e6c:	e7df      	b.n	8006e2e <_strtod_l+0x8de>
 8006e6e:	4013      	ands	r3, r2
 8006e70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e7c:	f04f 3aff 	mov.w	sl, #4294967295
 8006e80:	e7d5      	b.n	8006e2e <_strtod_l+0x8de>
 8006e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e84:	ea13 0f0a 	tst.w	r3, sl
 8006e88:	e7e0      	b.n	8006e4c <_strtod_l+0x8fc>
 8006e8a:	f7ff fb45 	bl	8006518 <sulp>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	ec51 0b18 	vmov	r0, r1, d8
 8006e96:	f7f9 f9f7 	bl	8000288 <__aeabi_dsub>
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	4682      	mov	sl, r0
 8006ea0:	468b      	mov	fp, r1
 8006ea2:	f7f9 fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d0c1      	beq.n	8006e2e <_strtod_l+0x8de>
 8006eaa:	e611      	b.n	8006ad0 <_strtod_l+0x580>
 8006eac:	fffffc02 	.word	0xfffffc02
 8006eb0:	7ff00000 	.word	0x7ff00000
 8006eb4:	39500000 	.word	0x39500000
 8006eb8:	000fffff 	.word	0x000fffff
 8006ebc:	7fefffff 	.word	0x7fefffff
 8006ec0:	0800a170 	.word	0x0800a170
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f002 f824 	bl	8008f14 <__ratio>
 8006ecc:	ec59 8b10 	vmov	r8, r9, d0
 8006ed0:	ee10 0a10 	vmov	r0, s0
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eda:	4649      	mov	r1, r9
 8006edc:	f7f9 fe08 	bl	8000af0 <__aeabi_dcmple>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d07a      	beq.n	8006fda <_strtod_l+0xa8a>
 8006ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d04a      	beq.n	8006f80 <_strtod_l+0xa30>
 8006eea:	4b95      	ldr	r3, [pc, #596]	; (8007140 <_strtod_l+0xbf0>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ef2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007140 <_strtod_l+0xbf0>
 8006ef6:	f04f 0800 	mov.w	r8, #0
 8006efa:	4b92      	ldr	r3, [pc, #584]	; (8007144 <_strtod_l+0xbf4>)
 8006efc:	403b      	ands	r3, r7
 8006efe:	930d      	str	r3, [sp, #52]	; 0x34
 8006f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f02:	4b91      	ldr	r3, [pc, #580]	; (8007148 <_strtod_l+0xbf8>)
 8006f04:	429a      	cmp	r2, r3
 8006f06:	f040 80b0 	bne.w	800706a <_strtod_l+0xb1a>
 8006f0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006f12:	ec4b ab10 	vmov	d0, sl, fp
 8006f16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f1a:	f001 ff23 	bl	8008d64 <__ulp>
 8006f1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f22:	ec53 2b10 	vmov	r2, r3, d0
 8006f26:	f7f9 fb67 	bl	80005f8 <__aeabi_dmul>
 8006f2a:	4652      	mov	r2, sl
 8006f2c:	465b      	mov	r3, fp
 8006f2e:	f7f9 f9ad 	bl	800028c <__adddf3>
 8006f32:	460b      	mov	r3, r1
 8006f34:	4983      	ldr	r1, [pc, #524]	; (8007144 <_strtod_l+0xbf4>)
 8006f36:	4a85      	ldr	r2, [pc, #532]	; (800714c <_strtod_l+0xbfc>)
 8006f38:	4019      	ands	r1, r3
 8006f3a:	4291      	cmp	r1, r2
 8006f3c:	4682      	mov	sl, r0
 8006f3e:	d960      	bls.n	8007002 <_strtod_l+0xab2>
 8006f40:	ee18 3a90 	vmov	r3, s17
 8006f44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d104      	bne.n	8006f56 <_strtod_l+0xa06>
 8006f4c:	ee18 3a10 	vmov	r3, s16
 8006f50:	3301      	adds	r3, #1
 8006f52:	f43f ad45 	beq.w	80069e0 <_strtod_l+0x490>
 8006f56:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007158 <_strtod_l+0xc08>
 8006f5a:	f04f 3aff 	mov.w	sl, #4294967295
 8006f5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f60:	4620      	mov	r0, r4
 8006f62:	f001 fbcd 	bl	8008700 <_Bfree>
 8006f66:	9905      	ldr	r1, [sp, #20]
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f001 fbc9 	bl	8008700 <_Bfree>
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4620      	mov	r0, r4
 8006f72:	f001 fbc5 	bl	8008700 <_Bfree>
 8006f76:	4629      	mov	r1, r5
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f001 fbc1 	bl	8008700 <_Bfree>
 8006f7e:	e61a      	b.n	8006bb6 <_strtod_l+0x666>
 8006f80:	f1ba 0f00 	cmp.w	sl, #0
 8006f84:	d11b      	bne.n	8006fbe <_strtod_l+0xa6e>
 8006f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f8a:	b9f3      	cbnz	r3, 8006fca <_strtod_l+0xa7a>
 8006f8c:	4b6c      	ldr	r3, [pc, #432]	; (8007140 <_strtod_l+0xbf0>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4640      	mov	r0, r8
 8006f92:	4649      	mov	r1, r9
 8006f94:	f7f9 fda2 	bl	8000adc <__aeabi_dcmplt>
 8006f98:	b9d0      	cbnz	r0, 8006fd0 <_strtod_l+0xa80>
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	4b6c      	ldr	r3, [pc, #432]	; (8007150 <_strtod_l+0xc00>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f7f9 fb29 	bl	80005f8 <__aeabi_dmul>
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	4689      	mov	r9, r1
 8006faa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006fae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006fb2:	9315      	str	r3, [sp, #84]	; 0x54
 8006fb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006fb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fbc:	e79d      	b.n	8006efa <_strtod_l+0x9aa>
 8006fbe:	f1ba 0f01 	cmp.w	sl, #1
 8006fc2:	d102      	bne.n	8006fca <_strtod_l+0xa7a>
 8006fc4:	2f00      	cmp	r7, #0
 8006fc6:	f43f ad83 	beq.w	8006ad0 <_strtod_l+0x580>
 8006fca:	4b62      	ldr	r3, [pc, #392]	; (8007154 <_strtod_l+0xc04>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	e78e      	b.n	8006eee <_strtod_l+0x99e>
 8006fd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007150 <_strtod_l+0xc00>
 8006fd4:	f04f 0800 	mov.w	r8, #0
 8006fd8:	e7e7      	b.n	8006faa <_strtod_l+0xa5a>
 8006fda:	4b5d      	ldr	r3, [pc, #372]	; (8007150 <_strtod_l+0xc00>)
 8006fdc:	4640      	mov	r0, r8
 8006fde:	4649      	mov	r1, r9
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f7f9 fb09 	bl	80005f8 <__aeabi_dmul>
 8006fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fe8:	4680      	mov	r8, r0
 8006fea:	4689      	mov	r9, r1
 8006fec:	b933      	cbnz	r3, 8006ffc <_strtod_l+0xaac>
 8006fee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ff2:	900e      	str	r0, [sp, #56]	; 0x38
 8006ff4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ff6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006ffa:	e7dd      	b.n	8006fb8 <_strtod_l+0xa68>
 8006ffc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007000:	e7f9      	b.n	8006ff6 <_strtod_l+0xaa6>
 8007002:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1a8      	bne.n	8006f5e <_strtod_l+0xa0e>
 800700c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007012:	0d1b      	lsrs	r3, r3, #20
 8007014:	051b      	lsls	r3, r3, #20
 8007016:	429a      	cmp	r2, r3
 8007018:	d1a1      	bne.n	8006f5e <_strtod_l+0xa0e>
 800701a:	4640      	mov	r0, r8
 800701c:	4649      	mov	r1, r9
 800701e:	f7f9 fe4b 	bl	8000cb8 <__aeabi_d2lz>
 8007022:	f7f9 fabb 	bl	800059c <__aeabi_l2d>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	f7f9 f92b 	bl	8000288 <__aeabi_dsub>
 8007032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007038:	ea43 030a 	orr.w	r3, r3, sl
 800703c:	4313      	orrs	r3, r2
 800703e:	4680      	mov	r8, r0
 8007040:	4689      	mov	r9, r1
 8007042:	d055      	beq.n	80070f0 <_strtod_l+0xba0>
 8007044:	a336      	add	r3, pc, #216	; (adr r3, 8007120 <_strtod_l+0xbd0>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	f7f9 fd47 	bl	8000adc <__aeabi_dcmplt>
 800704e:	2800      	cmp	r0, #0
 8007050:	f47f acd0 	bne.w	80069f4 <_strtod_l+0x4a4>
 8007054:	a334      	add	r3, pc, #208	; (adr r3, 8007128 <_strtod_l+0xbd8>)
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	4640      	mov	r0, r8
 800705c:	4649      	mov	r1, r9
 800705e:	f7f9 fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 8007062:	2800      	cmp	r0, #0
 8007064:	f43f af7b 	beq.w	8006f5e <_strtod_l+0xa0e>
 8007068:	e4c4      	b.n	80069f4 <_strtod_l+0x4a4>
 800706a:	9b04      	ldr	r3, [sp, #16]
 800706c:	b333      	cbz	r3, 80070bc <_strtod_l+0xb6c>
 800706e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007070:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007074:	d822      	bhi.n	80070bc <_strtod_l+0xb6c>
 8007076:	a32e      	add	r3, pc, #184	; (adr r3, 8007130 <_strtod_l+0xbe0>)
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	4640      	mov	r0, r8
 800707e:	4649      	mov	r1, r9
 8007080:	f7f9 fd36 	bl	8000af0 <__aeabi_dcmple>
 8007084:	b1a0      	cbz	r0, 80070b0 <_strtod_l+0xb60>
 8007086:	4649      	mov	r1, r9
 8007088:	4640      	mov	r0, r8
 800708a:	f7f9 fd8d 	bl	8000ba8 <__aeabi_d2uiz>
 800708e:	2801      	cmp	r0, #1
 8007090:	bf38      	it	cc
 8007092:	2001      	movcc	r0, #1
 8007094:	f7f9 fa36 	bl	8000504 <__aeabi_ui2d>
 8007098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800709a:	4680      	mov	r8, r0
 800709c:	4689      	mov	r9, r1
 800709e:	bb23      	cbnz	r3, 80070ea <_strtod_l+0xb9a>
 80070a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070a4:	9010      	str	r0, [sp, #64]	; 0x40
 80070a6:	9311      	str	r3, [sp, #68]	; 0x44
 80070a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80070b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	9309      	str	r3, [sp, #36]	; 0x24
 80070bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070c0:	eeb0 0a48 	vmov.f32	s0, s16
 80070c4:	eef0 0a68 	vmov.f32	s1, s17
 80070c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070cc:	f001 fe4a 	bl	8008d64 <__ulp>
 80070d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070d4:	ec53 2b10 	vmov	r2, r3, d0
 80070d8:	f7f9 fa8e 	bl	80005f8 <__aeabi_dmul>
 80070dc:	ec53 2b18 	vmov	r2, r3, d8
 80070e0:	f7f9 f8d4 	bl	800028c <__adddf3>
 80070e4:	4682      	mov	sl, r0
 80070e6:	468b      	mov	fp, r1
 80070e8:	e78d      	b.n	8007006 <_strtod_l+0xab6>
 80070ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80070ee:	e7db      	b.n	80070a8 <_strtod_l+0xb58>
 80070f0:	a311      	add	r3, pc, #68	; (adr r3, 8007138 <_strtod_l+0xbe8>)
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f7f9 fcf1 	bl	8000adc <__aeabi_dcmplt>
 80070fa:	e7b2      	b.n	8007062 <_strtod_l+0xb12>
 80070fc:	2300      	movs	r3, #0
 80070fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007102:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	f7ff ba6b 	b.w	80065e0 <_strtod_l+0x90>
 800710a:	2a65      	cmp	r2, #101	; 0x65
 800710c:	f43f ab5f 	beq.w	80067ce <_strtod_l+0x27e>
 8007110:	2a45      	cmp	r2, #69	; 0x45
 8007112:	f43f ab5c 	beq.w	80067ce <_strtod_l+0x27e>
 8007116:	2301      	movs	r3, #1
 8007118:	f7ff bb94 	b.w	8006844 <_strtod_l+0x2f4>
 800711c:	f3af 8000 	nop.w
 8007120:	94a03595 	.word	0x94a03595
 8007124:	3fdfffff 	.word	0x3fdfffff
 8007128:	35afe535 	.word	0x35afe535
 800712c:	3fe00000 	.word	0x3fe00000
 8007130:	ffc00000 	.word	0xffc00000
 8007134:	41dfffff 	.word	0x41dfffff
 8007138:	94a03595 	.word	0x94a03595
 800713c:	3fcfffff 	.word	0x3fcfffff
 8007140:	3ff00000 	.word	0x3ff00000
 8007144:	7ff00000 	.word	0x7ff00000
 8007148:	7fe00000 	.word	0x7fe00000
 800714c:	7c9fffff 	.word	0x7c9fffff
 8007150:	3fe00000 	.word	0x3fe00000
 8007154:	bff00000 	.word	0xbff00000
 8007158:	7fefffff 	.word	0x7fefffff

0800715c <_strtod_r>:
 800715c:	4b01      	ldr	r3, [pc, #4]	; (8007164 <_strtod_r+0x8>)
 800715e:	f7ff b9f7 	b.w	8006550 <_strtod_l>
 8007162:	bf00      	nop
 8007164:	20000074 	.word	0x20000074

08007168 <_strtol_l.constprop.0>:
 8007168:	2b01      	cmp	r3, #1
 800716a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800716e:	d001      	beq.n	8007174 <_strtol_l.constprop.0+0xc>
 8007170:	2b24      	cmp	r3, #36	; 0x24
 8007172:	d906      	bls.n	8007182 <_strtol_l.constprop.0+0x1a>
 8007174:	f7fe faf0 	bl	8005758 <__errno>
 8007178:	2316      	movs	r3, #22
 800717a:	6003      	str	r3, [r0, #0]
 800717c:	2000      	movs	r0, #0
 800717e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007182:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007268 <_strtol_l.constprop.0+0x100>
 8007186:	460d      	mov	r5, r1
 8007188:	462e      	mov	r6, r5
 800718a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800718e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007192:	f017 0708 	ands.w	r7, r7, #8
 8007196:	d1f7      	bne.n	8007188 <_strtol_l.constprop.0+0x20>
 8007198:	2c2d      	cmp	r4, #45	; 0x2d
 800719a:	d132      	bne.n	8007202 <_strtol_l.constprop.0+0x9a>
 800719c:	782c      	ldrb	r4, [r5, #0]
 800719e:	2701      	movs	r7, #1
 80071a0:	1cb5      	adds	r5, r6, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d05b      	beq.n	800725e <_strtol_l.constprop.0+0xf6>
 80071a6:	2b10      	cmp	r3, #16
 80071a8:	d109      	bne.n	80071be <_strtol_l.constprop.0+0x56>
 80071aa:	2c30      	cmp	r4, #48	; 0x30
 80071ac:	d107      	bne.n	80071be <_strtol_l.constprop.0+0x56>
 80071ae:	782c      	ldrb	r4, [r5, #0]
 80071b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80071b4:	2c58      	cmp	r4, #88	; 0x58
 80071b6:	d14d      	bne.n	8007254 <_strtol_l.constprop.0+0xec>
 80071b8:	786c      	ldrb	r4, [r5, #1]
 80071ba:	2310      	movs	r3, #16
 80071bc:	3502      	adds	r5, #2
 80071be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80071c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80071c6:	f04f 0c00 	mov.w	ip, #0
 80071ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80071ce:	4666      	mov	r6, ip
 80071d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80071d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80071d8:	f1be 0f09 	cmp.w	lr, #9
 80071dc:	d816      	bhi.n	800720c <_strtol_l.constprop.0+0xa4>
 80071de:	4674      	mov	r4, lr
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	dd24      	ble.n	800722e <_strtol_l.constprop.0+0xc6>
 80071e4:	f1bc 0f00 	cmp.w	ip, #0
 80071e8:	db1e      	blt.n	8007228 <_strtol_l.constprop.0+0xc0>
 80071ea:	45b1      	cmp	r9, r6
 80071ec:	d31c      	bcc.n	8007228 <_strtol_l.constprop.0+0xc0>
 80071ee:	d101      	bne.n	80071f4 <_strtol_l.constprop.0+0x8c>
 80071f0:	45a2      	cmp	sl, r4
 80071f2:	db19      	blt.n	8007228 <_strtol_l.constprop.0+0xc0>
 80071f4:	fb06 4603 	mla	r6, r6, r3, r4
 80071f8:	f04f 0c01 	mov.w	ip, #1
 80071fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007200:	e7e8      	b.n	80071d4 <_strtol_l.constprop.0+0x6c>
 8007202:	2c2b      	cmp	r4, #43	; 0x2b
 8007204:	bf04      	itt	eq
 8007206:	782c      	ldrbeq	r4, [r5, #0]
 8007208:	1cb5      	addeq	r5, r6, #2
 800720a:	e7ca      	b.n	80071a2 <_strtol_l.constprop.0+0x3a>
 800720c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007210:	f1be 0f19 	cmp.w	lr, #25
 8007214:	d801      	bhi.n	800721a <_strtol_l.constprop.0+0xb2>
 8007216:	3c37      	subs	r4, #55	; 0x37
 8007218:	e7e2      	b.n	80071e0 <_strtol_l.constprop.0+0x78>
 800721a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800721e:	f1be 0f19 	cmp.w	lr, #25
 8007222:	d804      	bhi.n	800722e <_strtol_l.constprop.0+0xc6>
 8007224:	3c57      	subs	r4, #87	; 0x57
 8007226:	e7db      	b.n	80071e0 <_strtol_l.constprop.0+0x78>
 8007228:	f04f 3cff 	mov.w	ip, #4294967295
 800722c:	e7e6      	b.n	80071fc <_strtol_l.constprop.0+0x94>
 800722e:	f1bc 0f00 	cmp.w	ip, #0
 8007232:	da05      	bge.n	8007240 <_strtol_l.constprop.0+0xd8>
 8007234:	2322      	movs	r3, #34	; 0x22
 8007236:	6003      	str	r3, [r0, #0]
 8007238:	4646      	mov	r6, r8
 800723a:	b942      	cbnz	r2, 800724e <_strtol_l.constprop.0+0xe6>
 800723c:	4630      	mov	r0, r6
 800723e:	e79e      	b.n	800717e <_strtol_l.constprop.0+0x16>
 8007240:	b107      	cbz	r7, 8007244 <_strtol_l.constprop.0+0xdc>
 8007242:	4276      	negs	r6, r6
 8007244:	2a00      	cmp	r2, #0
 8007246:	d0f9      	beq.n	800723c <_strtol_l.constprop.0+0xd4>
 8007248:	f1bc 0f00 	cmp.w	ip, #0
 800724c:	d000      	beq.n	8007250 <_strtol_l.constprop.0+0xe8>
 800724e:	1e69      	subs	r1, r5, #1
 8007250:	6011      	str	r1, [r2, #0]
 8007252:	e7f3      	b.n	800723c <_strtol_l.constprop.0+0xd4>
 8007254:	2430      	movs	r4, #48	; 0x30
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1b1      	bne.n	80071be <_strtol_l.constprop.0+0x56>
 800725a:	2308      	movs	r3, #8
 800725c:	e7af      	b.n	80071be <_strtol_l.constprop.0+0x56>
 800725e:	2c30      	cmp	r4, #48	; 0x30
 8007260:	d0a5      	beq.n	80071ae <_strtol_l.constprop.0+0x46>
 8007262:	230a      	movs	r3, #10
 8007264:	e7ab      	b.n	80071be <_strtol_l.constprop.0+0x56>
 8007266:	bf00      	nop
 8007268:	0800a199 	.word	0x0800a199

0800726c <_strtol_r>:
 800726c:	f7ff bf7c 	b.w	8007168 <_strtol_l.constprop.0>

08007270 <quorem>:
 8007270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	6903      	ldr	r3, [r0, #16]
 8007276:	690c      	ldr	r4, [r1, #16]
 8007278:	42a3      	cmp	r3, r4
 800727a:	4607      	mov	r7, r0
 800727c:	f2c0 8081 	blt.w	8007382 <quorem+0x112>
 8007280:	3c01      	subs	r4, #1
 8007282:	f101 0814 	add.w	r8, r1, #20
 8007286:	f100 0514 	add.w	r5, r0, #20
 800728a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007298:	3301      	adds	r3, #1
 800729a:	429a      	cmp	r2, r3
 800729c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80072a8:	d331      	bcc.n	800730e <quorem+0x9e>
 80072aa:	f04f 0e00 	mov.w	lr, #0
 80072ae:	4640      	mov	r0, r8
 80072b0:	46ac      	mov	ip, r5
 80072b2:	46f2      	mov	sl, lr
 80072b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80072b8:	b293      	uxth	r3, r2
 80072ba:	fb06 e303 	mla	r3, r6, r3, lr
 80072be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	ebaa 0303 	sub.w	r3, sl, r3
 80072c8:	f8dc a000 	ldr.w	sl, [ip]
 80072cc:	0c12      	lsrs	r2, r2, #16
 80072ce:	fa13 f38a 	uxtah	r3, r3, sl
 80072d2:	fb06 e202 	mla	r2, r6, r2, lr
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	9b00      	ldr	r3, [sp, #0]
 80072da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072de:	b292      	uxth	r2, r2
 80072e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80072e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80072ec:	4581      	cmp	r9, r0
 80072ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072f2:	f84c 3b04 	str.w	r3, [ip], #4
 80072f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072fa:	d2db      	bcs.n	80072b4 <quorem+0x44>
 80072fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007300:	b92b      	cbnz	r3, 800730e <quorem+0x9e>
 8007302:	9b01      	ldr	r3, [sp, #4]
 8007304:	3b04      	subs	r3, #4
 8007306:	429d      	cmp	r5, r3
 8007308:	461a      	mov	r2, r3
 800730a:	d32e      	bcc.n	800736a <quorem+0xfa>
 800730c:	613c      	str	r4, [r7, #16]
 800730e:	4638      	mov	r0, r7
 8007310:	f001 fc82 	bl	8008c18 <__mcmp>
 8007314:	2800      	cmp	r0, #0
 8007316:	db24      	blt.n	8007362 <quorem+0xf2>
 8007318:	3601      	adds	r6, #1
 800731a:	4628      	mov	r0, r5
 800731c:	f04f 0c00 	mov.w	ip, #0
 8007320:	f858 2b04 	ldr.w	r2, [r8], #4
 8007324:	f8d0 e000 	ldr.w	lr, [r0]
 8007328:	b293      	uxth	r3, r2
 800732a:	ebac 0303 	sub.w	r3, ip, r3
 800732e:	0c12      	lsrs	r2, r2, #16
 8007330:	fa13 f38e 	uxtah	r3, r3, lr
 8007334:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800733c:	b29b      	uxth	r3, r3
 800733e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007342:	45c1      	cmp	r9, r8
 8007344:	f840 3b04 	str.w	r3, [r0], #4
 8007348:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800734c:	d2e8      	bcs.n	8007320 <quorem+0xb0>
 800734e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007356:	b922      	cbnz	r2, 8007362 <quorem+0xf2>
 8007358:	3b04      	subs	r3, #4
 800735a:	429d      	cmp	r5, r3
 800735c:	461a      	mov	r2, r3
 800735e:	d30a      	bcc.n	8007376 <quorem+0x106>
 8007360:	613c      	str	r4, [r7, #16]
 8007362:	4630      	mov	r0, r6
 8007364:	b003      	add	sp, #12
 8007366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	3b04      	subs	r3, #4
 800736e:	2a00      	cmp	r2, #0
 8007370:	d1cc      	bne.n	800730c <quorem+0x9c>
 8007372:	3c01      	subs	r4, #1
 8007374:	e7c7      	b.n	8007306 <quorem+0x96>
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	3b04      	subs	r3, #4
 800737a:	2a00      	cmp	r2, #0
 800737c:	d1f0      	bne.n	8007360 <quorem+0xf0>
 800737e:	3c01      	subs	r4, #1
 8007380:	e7eb      	b.n	800735a <quorem+0xea>
 8007382:	2000      	movs	r0, #0
 8007384:	e7ee      	b.n	8007364 <quorem+0xf4>
	...

08007388 <_dtoa_r>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	ed2d 8b04 	vpush	{d8-d9}
 8007390:	ec57 6b10 	vmov	r6, r7, d0
 8007394:	b093      	sub	sp, #76	; 0x4c
 8007396:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007398:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800739c:	9106      	str	r1, [sp, #24]
 800739e:	ee10 aa10 	vmov	sl, s0
 80073a2:	4604      	mov	r4, r0
 80073a4:	9209      	str	r2, [sp, #36]	; 0x24
 80073a6:	930c      	str	r3, [sp, #48]	; 0x30
 80073a8:	46bb      	mov	fp, r7
 80073aa:	b975      	cbnz	r5, 80073ca <_dtoa_r+0x42>
 80073ac:	2010      	movs	r0, #16
 80073ae:	f001 f94d 	bl	800864c <malloc>
 80073b2:	4602      	mov	r2, r0
 80073b4:	6260      	str	r0, [r4, #36]	; 0x24
 80073b6:	b920      	cbnz	r0, 80073c2 <_dtoa_r+0x3a>
 80073b8:	4ba7      	ldr	r3, [pc, #668]	; (8007658 <_dtoa_r+0x2d0>)
 80073ba:	21ea      	movs	r1, #234	; 0xea
 80073bc:	48a7      	ldr	r0, [pc, #668]	; (800765c <_dtoa_r+0x2d4>)
 80073be:	f002 f8ad 	bl	800951c <__assert_func>
 80073c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073c6:	6005      	str	r5, [r0, #0]
 80073c8:	60c5      	str	r5, [r0, #12]
 80073ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073cc:	6819      	ldr	r1, [r3, #0]
 80073ce:	b151      	cbz	r1, 80073e6 <_dtoa_r+0x5e>
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	604a      	str	r2, [r1, #4]
 80073d4:	2301      	movs	r3, #1
 80073d6:	4093      	lsls	r3, r2
 80073d8:	608b      	str	r3, [r1, #8]
 80073da:	4620      	mov	r0, r4
 80073dc:	f001 f990 	bl	8008700 <_Bfree>
 80073e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	1e3b      	subs	r3, r7, #0
 80073e8:	bfaa      	itet	ge
 80073ea:	2300      	movge	r3, #0
 80073ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80073f0:	f8c8 3000 	strge.w	r3, [r8]
 80073f4:	4b9a      	ldr	r3, [pc, #616]	; (8007660 <_dtoa_r+0x2d8>)
 80073f6:	bfbc      	itt	lt
 80073f8:	2201      	movlt	r2, #1
 80073fa:	f8c8 2000 	strlt.w	r2, [r8]
 80073fe:	ea33 030b 	bics.w	r3, r3, fp
 8007402:	d11b      	bne.n	800743c <_dtoa_r+0xb4>
 8007404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007406:	f242 730f 	movw	r3, #9999	; 0x270f
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007410:	4333      	orrs	r3, r6
 8007412:	f000 8592 	beq.w	8007f3a <_dtoa_r+0xbb2>
 8007416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007418:	b963      	cbnz	r3, 8007434 <_dtoa_r+0xac>
 800741a:	4b92      	ldr	r3, [pc, #584]	; (8007664 <_dtoa_r+0x2dc>)
 800741c:	e022      	b.n	8007464 <_dtoa_r+0xdc>
 800741e:	4b92      	ldr	r3, [pc, #584]	; (8007668 <_dtoa_r+0x2e0>)
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	3308      	adds	r3, #8
 8007424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	9801      	ldr	r0, [sp, #4]
 800742a:	b013      	add	sp, #76	; 0x4c
 800742c:	ecbd 8b04 	vpop	{d8-d9}
 8007430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007434:	4b8b      	ldr	r3, [pc, #556]	; (8007664 <_dtoa_r+0x2dc>)
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	3303      	adds	r3, #3
 800743a:	e7f3      	b.n	8007424 <_dtoa_r+0x9c>
 800743c:	2200      	movs	r2, #0
 800743e:	2300      	movs	r3, #0
 8007440:	4650      	mov	r0, sl
 8007442:	4659      	mov	r1, fp
 8007444:	f7f9 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007448:	ec4b ab19 	vmov	d9, sl, fp
 800744c:	4680      	mov	r8, r0
 800744e:	b158      	cbz	r0, 8007468 <_dtoa_r+0xe0>
 8007450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007452:	2301      	movs	r3, #1
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 856b 	beq.w	8007f34 <_dtoa_r+0xbac>
 800745e:	4883      	ldr	r0, [pc, #524]	; (800766c <_dtoa_r+0x2e4>)
 8007460:	6018      	str	r0, [r3, #0]
 8007462:	1e43      	subs	r3, r0, #1
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	e7df      	b.n	8007428 <_dtoa_r+0xa0>
 8007468:	ec4b ab10 	vmov	d0, sl, fp
 800746c:	aa10      	add	r2, sp, #64	; 0x40
 800746e:	a911      	add	r1, sp, #68	; 0x44
 8007470:	4620      	mov	r0, r4
 8007472:	f001 fcf3 	bl	8008e5c <__d2b>
 8007476:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800747a:	ee08 0a10 	vmov	s16, r0
 800747e:	2d00      	cmp	r5, #0
 8007480:	f000 8084 	beq.w	800758c <_dtoa_r+0x204>
 8007484:	ee19 3a90 	vmov	r3, s19
 8007488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800748c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007490:	4656      	mov	r6, sl
 8007492:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800749a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800749e:	4b74      	ldr	r3, [pc, #464]	; (8007670 <_dtoa_r+0x2e8>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	4630      	mov	r0, r6
 80074a4:	4639      	mov	r1, r7
 80074a6:	f7f8 feef 	bl	8000288 <__aeabi_dsub>
 80074aa:	a365      	add	r3, pc, #404	; (adr r3, 8007640 <_dtoa_r+0x2b8>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f9 f8a2 	bl	80005f8 <__aeabi_dmul>
 80074b4:	a364      	add	r3, pc, #400	; (adr r3, 8007648 <_dtoa_r+0x2c0>)
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f7f8 fee7 	bl	800028c <__adddf3>
 80074be:	4606      	mov	r6, r0
 80074c0:	4628      	mov	r0, r5
 80074c2:	460f      	mov	r7, r1
 80074c4:	f7f9 f82e 	bl	8000524 <__aeabi_i2d>
 80074c8:	a361      	add	r3, pc, #388	; (adr r3, 8007650 <_dtoa_r+0x2c8>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f7f9 f893 	bl	80005f8 <__aeabi_dmul>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4630      	mov	r0, r6
 80074d8:	4639      	mov	r1, r7
 80074da:	f7f8 fed7 	bl	800028c <__adddf3>
 80074de:	4606      	mov	r6, r0
 80074e0:	460f      	mov	r7, r1
 80074e2:	f7f9 fb39 	bl	8000b58 <__aeabi_d2iz>
 80074e6:	2200      	movs	r2, #0
 80074e8:	9000      	str	r0, [sp, #0]
 80074ea:	2300      	movs	r3, #0
 80074ec:	4630      	mov	r0, r6
 80074ee:	4639      	mov	r1, r7
 80074f0:	f7f9 faf4 	bl	8000adc <__aeabi_dcmplt>
 80074f4:	b150      	cbz	r0, 800750c <_dtoa_r+0x184>
 80074f6:	9800      	ldr	r0, [sp, #0]
 80074f8:	f7f9 f814 	bl	8000524 <__aeabi_i2d>
 80074fc:	4632      	mov	r2, r6
 80074fe:	463b      	mov	r3, r7
 8007500:	f7f9 fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007504:	b910      	cbnz	r0, 800750c <_dtoa_r+0x184>
 8007506:	9b00      	ldr	r3, [sp, #0]
 8007508:	3b01      	subs	r3, #1
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	9b00      	ldr	r3, [sp, #0]
 800750e:	2b16      	cmp	r3, #22
 8007510:	d85a      	bhi.n	80075c8 <_dtoa_r+0x240>
 8007512:	9a00      	ldr	r2, [sp, #0]
 8007514:	4b57      	ldr	r3, [pc, #348]	; (8007674 <_dtoa_r+0x2ec>)
 8007516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	ec51 0b19 	vmov	r0, r1, d9
 8007522:	f7f9 fadb 	bl	8000adc <__aeabi_dcmplt>
 8007526:	2800      	cmp	r0, #0
 8007528:	d050      	beq.n	80075cc <_dtoa_r+0x244>
 800752a:	9b00      	ldr	r3, [sp, #0]
 800752c:	3b01      	subs	r3, #1
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	2300      	movs	r3, #0
 8007532:	930b      	str	r3, [sp, #44]	; 0x2c
 8007534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007536:	1b5d      	subs	r5, r3, r5
 8007538:	1e6b      	subs	r3, r5, #1
 800753a:	9305      	str	r3, [sp, #20]
 800753c:	bf45      	ittet	mi
 800753e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007542:	9304      	strmi	r3, [sp, #16]
 8007544:	2300      	movpl	r3, #0
 8007546:	2300      	movmi	r3, #0
 8007548:	bf4c      	ite	mi
 800754a:	9305      	strmi	r3, [sp, #20]
 800754c:	9304      	strpl	r3, [sp, #16]
 800754e:	9b00      	ldr	r3, [sp, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	db3d      	blt.n	80075d0 <_dtoa_r+0x248>
 8007554:	9b05      	ldr	r3, [sp, #20]
 8007556:	9a00      	ldr	r2, [sp, #0]
 8007558:	920a      	str	r2, [sp, #40]	; 0x28
 800755a:	4413      	add	r3, r2
 800755c:	9305      	str	r3, [sp, #20]
 800755e:	2300      	movs	r3, #0
 8007560:	9307      	str	r3, [sp, #28]
 8007562:	9b06      	ldr	r3, [sp, #24]
 8007564:	2b09      	cmp	r3, #9
 8007566:	f200 8089 	bhi.w	800767c <_dtoa_r+0x2f4>
 800756a:	2b05      	cmp	r3, #5
 800756c:	bfc4      	itt	gt
 800756e:	3b04      	subgt	r3, #4
 8007570:	9306      	strgt	r3, [sp, #24]
 8007572:	9b06      	ldr	r3, [sp, #24]
 8007574:	f1a3 0302 	sub.w	r3, r3, #2
 8007578:	bfcc      	ite	gt
 800757a:	2500      	movgt	r5, #0
 800757c:	2501      	movle	r5, #1
 800757e:	2b03      	cmp	r3, #3
 8007580:	f200 8087 	bhi.w	8007692 <_dtoa_r+0x30a>
 8007584:	e8df f003 	tbb	[pc, r3]
 8007588:	59383a2d 	.word	0x59383a2d
 800758c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007590:	441d      	add	r5, r3
 8007592:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007596:	2b20      	cmp	r3, #32
 8007598:	bfc1      	itttt	gt
 800759a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800759e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80075a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80075a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075aa:	bfda      	itte	le
 80075ac:	f1c3 0320 	rsble	r3, r3, #32
 80075b0:	fa06 f003 	lslle.w	r0, r6, r3
 80075b4:	4318      	orrgt	r0, r3
 80075b6:	f7f8 ffa5 	bl	8000504 <__aeabi_ui2d>
 80075ba:	2301      	movs	r3, #1
 80075bc:	4606      	mov	r6, r0
 80075be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80075c2:	3d01      	subs	r5, #1
 80075c4:	930e      	str	r3, [sp, #56]	; 0x38
 80075c6:	e76a      	b.n	800749e <_dtoa_r+0x116>
 80075c8:	2301      	movs	r3, #1
 80075ca:	e7b2      	b.n	8007532 <_dtoa_r+0x1aa>
 80075cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80075ce:	e7b1      	b.n	8007534 <_dtoa_r+0x1ac>
 80075d0:	9b04      	ldr	r3, [sp, #16]
 80075d2:	9a00      	ldr	r2, [sp, #0]
 80075d4:	1a9b      	subs	r3, r3, r2
 80075d6:	9304      	str	r3, [sp, #16]
 80075d8:	4253      	negs	r3, r2
 80075da:	9307      	str	r3, [sp, #28]
 80075dc:	2300      	movs	r3, #0
 80075de:	930a      	str	r3, [sp, #40]	; 0x28
 80075e0:	e7bf      	b.n	8007562 <_dtoa_r+0x1da>
 80075e2:	2300      	movs	r3, #0
 80075e4:	9308      	str	r3, [sp, #32]
 80075e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	dc55      	bgt.n	8007698 <_dtoa_r+0x310>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075f2:	461a      	mov	r2, r3
 80075f4:	9209      	str	r2, [sp, #36]	; 0x24
 80075f6:	e00c      	b.n	8007612 <_dtoa_r+0x28a>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e7f3      	b.n	80075e4 <_dtoa_r+0x25c>
 80075fc:	2300      	movs	r3, #0
 80075fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007600:	9308      	str	r3, [sp, #32]
 8007602:	9b00      	ldr	r3, [sp, #0]
 8007604:	4413      	add	r3, r2
 8007606:	9302      	str	r3, [sp, #8]
 8007608:	3301      	adds	r3, #1
 800760a:	2b01      	cmp	r3, #1
 800760c:	9303      	str	r3, [sp, #12]
 800760e:	bfb8      	it	lt
 8007610:	2301      	movlt	r3, #1
 8007612:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007614:	2200      	movs	r2, #0
 8007616:	6042      	str	r2, [r0, #4]
 8007618:	2204      	movs	r2, #4
 800761a:	f102 0614 	add.w	r6, r2, #20
 800761e:	429e      	cmp	r6, r3
 8007620:	6841      	ldr	r1, [r0, #4]
 8007622:	d93d      	bls.n	80076a0 <_dtoa_r+0x318>
 8007624:	4620      	mov	r0, r4
 8007626:	f001 f82b 	bl	8008680 <_Balloc>
 800762a:	9001      	str	r0, [sp, #4]
 800762c:	2800      	cmp	r0, #0
 800762e:	d13b      	bne.n	80076a8 <_dtoa_r+0x320>
 8007630:	4b11      	ldr	r3, [pc, #68]	; (8007678 <_dtoa_r+0x2f0>)
 8007632:	4602      	mov	r2, r0
 8007634:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007638:	e6c0      	b.n	80073bc <_dtoa_r+0x34>
 800763a:	2301      	movs	r3, #1
 800763c:	e7df      	b.n	80075fe <_dtoa_r+0x276>
 800763e:	bf00      	nop
 8007640:	636f4361 	.word	0x636f4361
 8007644:	3fd287a7 	.word	0x3fd287a7
 8007648:	8b60c8b3 	.word	0x8b60c8b3
 800764c:	3fc68a28 	.word	0x3fc68a28
 8007650:	509f79fb 	.word	0x509f79fb
 8007654:	3fd34413 	.word	0x3fd34413
 8007658:	0800a2a6 	.word	0x0800a2a6
 800765c:	0800a2bd 	.word	0x0800a2bd
 8007660:	7ff00000 	.word	0x7ff00000
 8007664:	0800a2a2 	.word	0x0800a2a2
 8007668:	0800a299 	.word	0x0800a299
 800766c:	0800a119 	.word	0x0800a119
 8007670:	3ff80000 	.word	0x3ff80000
 8007674:	0800a428 	.word	0x0800a428
 8007678:	0800a318 	.word	0x0800a318
 800767c:	2501      	movs	r5, #1
 800767e:	2300      	movs	r3, #0
 8007680:	9306      	str	r3, [sp, #24]
 8007682:	9508      	str	r5, [sp, #32]
 8007684:	f04f 33ff 	mov.w	r3, #4294967295
 8007688:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800768c:	2200      	movs	r2, #0
 800768e:	2312      	movs	r3, #18
 8007690:	e7b0      	b.n	80075f4 <_dtoa_r+0x26c>
 8007692:	2301      	movs	r3, #1
 8007694:	9308      	str	r3, [sp, #32]
 8007696:	e7f5      	b.n	8007684 <_dtoa_r+0x2fc>
 8007698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800769e:	e7b8      	b.n	8007612 <_dtoa_r+0x28a>
 80076a0:	3101      	adds	r1, #1
 80076a2:	6041      	str	r1, [r0, #4]
 80076a4:	0052      	lsls	r2, r2, #1
 80076a6:	e7b8      	b.n	800761a <_dtoa_r+0x292>
 80076a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076aa:	9a01      	ldr	r2, [sp, #4]
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	9b03      	ldr	r3, [sp, #12]
 80076b0:	2b0e      	cmp	r3, #14
 80076b2:	f200 809d 	bhi.w	80077f0 <_dtoa_r+0x468>
 80076b6:	2d00      	cmp	r5, #0
 80076b8:	f000 809a 	beq.w	80077f0 <_dtoa_r+0x468>
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dd32      	ble.n	8007728 <_dtoa_r+0x3a0>
 80076c2:	4ab7      	ldr	r2, [pc, #732]	; (80079a0 <_dtoa_r+0x618>)
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076d0:	9b00      	ldr	r3, [sp, #0]
 80076d2:	05d8      	lsls	r0, r3, #23
 80076d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80076d8:	d516      	bpl.n	8007708 <_dtoa_r+0x380>
 80076da:	4bb2      	ldr	r3, [pc, #712]	; (80079a4 <_dtoa_r+0x61c>)
 80076dc:	ec51 0b19 	vmov	r0, r1, d9
 80076e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076e4:	f7f9 f8b2 	bl	800084c <__aeabi_ddiv>
 80076e8:	f007 070f 	and.w	r7, r7, #15
 80076ec:	4682      	mov	sl, r0
 80076ee:	468b      	mov	fp, r1
 80076f0:	2503      	movs	r5, #3
 80076f2:	4eac      	ldr	r6, [pc, #688]	; (80079a4 <_dtoa_r+0x61c>)
 80076f4:	b957      	cbnz	r7, 800770c <_dtoa_r+0x384>
 80076f6:	4642      	mov	r2, r8
 80076f8:	464b      	mov	r3, r9
 80076fa:	4650      	mov	r0, sl
 80076fc:	4659      	mov	r1, fp
 80076fe:	f7f9 f8a5 	bl	800084c <__aeabi_ddiv>
 8007702:	4682      	mov	sl, r0
 8007704:	468b      	mov	fp, r1
 8007706:	e028      	b.n	800775a <_dtoa_r+0x3d2>
 8007708:	2502      	movs	r5, #2
 800770a:	e7f2      	b.n	80076f2 <_dtoa_r+0x36a>
 800770c:	07f9      	lsls	r1, r7, #31
 800770e:	d508      	bpl.n	8007722 <_dtoa_r+0x39a>
 8007710:	4640      	mov	r0, r8
 8007712:	4649      	mov	r1, r9
 8007714:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007718:	f7f8 ff6e 	bl	80005f8 <__aeabi_dmul>
 800771c:	3501      	adds	r5, #1
 800771e:	4680      	mov	r8, r0
 8007720:	4689      	mov	r9, r1
 8007722:	107f      	asrs	r7, r7, #1
 8007724:	3608      	adds	r6, #8
 8007726:	e7e5      	b.n	80076f4 <_dtoa_r+0x36c>
 8007728:	f000 809b 	beq.w	8007862 <_dtoa_r+0x4da>
 800772c:	9b00      	ldr	r3, [sp, #0]
 800772e:	4f9d      	ldr	r7, [pc, #628]	; (80079a4 <_dtoa_r+0x61c>)
 8007730:	425e      	negs	r6, r3
 8007732:	4b9b      	ldr	r3, [pc, #620]	; (80079a0 <_dtoa_r+0x618>)
 8007734:	f006 020f 	and.w	r2, r6, #15
 8007738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	ec51 0b19 	vmov	r0, r1, d9
 8007744:	f7f8 ff58 	bl	80005f8 <__aeabi_dmul>
 8007748:	1136      	asrs	r6, r6, #4
 800774a:	4682      	mov	sl, r0
 800774c:	468b      	mov	fp, r1
 800774e:	2300      	movs	r3, #0
 8007750:	2502      	movs	r5, #2
 8007752:	2e00      	cmp	r6, #0
 8007754:	d17a      	bne.n	800784c <_dtoa_r+0x4c4>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1d3      	bne.n	8007702 <_dtoa_r+0x37a>
 800775a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 8082 	beq.w	8007866 <_dtoa_r+0x4de>
 8007762:	4b91      	ldr	r3, [pc, #580]	; (80079a8 <_dtoa_r+0x620>)
 8007764:	2200      	movs	r2, #0
 8007766:	4650      	mov	r0, sl
 8007768:	4659      	mov	r1, fp
 800776a:	f7f9 f9b7 	bl	8000adc <__aeabi_dcmplt>
 800776e:	2800      	cmp	r0, #0
 8007770:	d079      	beq.n	8007866 <_dtoa_r+0x4de>
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d076      	beq.n	8007866 <_dtoa_r+0x4de>
 8007778:	9b02      	ldr	r3, [sp, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	dd36      	ble.n	80077ec <_dtoa_r+0x464>
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	4650      	mov	r0, sl
 8007782:	4659      	mov	r1, fp
 8007784:	1e5f      	subs	r7, r3, #1
 8007786:	2200      	movs	r2, #0
 8007788:	4b88      	ldr	r3, [pc, #544]	; (80079ac <_dtoa_r+0x624>)
 800778a:	f7f8 ff35 	bl	80005f8 <__aeabi_dmul>
 800778e:	9e02      	ldr	r6, [sp, #8]
 8007790:	4682      	mov	sl, r0
 8007792:	468b      	mov	fp, r1
 8007794:	3501      	adds	r5, #1
 8007796:	4628      	mov	r0, r5
 8007798:	f7f8 fec4 	bl	8000524 <__aeabi_i2d>
 800779c:	4652      	mov	r2, sl
 800779e:	465b      	mov	r3, fp
 80077a0:	f7f8 ff2a 	bl	80005f8 <__aeabi_dmul>
 80077a4:	4b82      	ldr	r3, [pc, #520]	; (80079b0 <_dtoa_r+0x628>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	f7f8 fd70 	bl	800028c <__adddf3>
 80077ac:	46d0      	mov	r8, sl
 80077ae:	46d9      	mov	r9, fp
 80077b0:	4682      	mov	sl, r0
 80077b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80077b6:	2e00      	cmp	r6, #0
 80077b8:	d158      	bne.n	800786c <_dtoa_r+0x4e4>
 80077ba:	4b7e      	ldr	r3, [pc, #504]	; (80079b4 <_dtoa_r+0x62c>)
 80077bc:	2200      	movs	r2, #0
 80077be:	4640      	mov	r0, r8
 80077c0:	4649      	mov	r1, r9
 80077c2:	f7f8 fd61 	bl	8000288 <__aeabi_dsub>
 80077c6:	4652      	mov	r2, sl
 80077c8:	465b      	mov	r3, fp
 80077ca:	4680      	mov	r8, r0
 80077cc:	4689      	mov	r9, r1
 80077ce:	f7f9 f9a3 	bl	8000b18 <__aeabi_dcmpgt>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f040 8295 	bne.w	8007d02 <_dtoa_r+0x97a>
 80077d8:	4652      	mov	r2, sl
 80077da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80077de:	4640      	mov	r0, r8
 80077e0:	4649      	mov	r1, r9
 80077e2:	f7f9 f97b 	bl	8000adc <__aeabi_dcmplt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f040 8289 	bne.w	8007cfe <_dtoa_r+0x976>
 80077ec:	ec5b ab19 	vmov	sl, fp, d9
 80077f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f2c0 8148 	blt.w	8007a88 <_dtoa_r+0x700>
 80077f8:	9a00      	ldr	r2, [sp, #0]
 80077fa:	2a0e      	cmp	r2, #14
 80077fc:	f300 8144 	bgt.w	8007a88 <_dtoa_r+0x700>
 8007800:	4b67      	ldr	r3, [pc, #412]	; (80079a0 <_dtoa_r+0x618>)
 8007802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007806:	e9d3 8900 	ldrd	r8, r9, [r3]
 800780a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780c:	2b00      	cmp	r3, #0
 800780e:	f280 80d5 	bge.w	80079bc <_dtoa_r+0x634>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f300 80d1 	bgt.w	80079bc <_dtoa_r+0x634>
 800781a:	f040 826f 	bne.w	8007cfc <_dtoa_r+0x974>
 800781e:	4b65      	ldr	r3, [pc, #404]	; (80079b4 <_dtoa_r+0x62c>)
 8007820:	2200      	movs	r2, #0
 8007822:	4640      	mov	r0, r8
 8007824:	4649      	mov	r1, r9
 8007826:	f7f8 fee7 	bl	80005f8 <__aeabi_dmul>
 800782a:	4652      	mov	r2, sl
 800782c:	465b      	mov	r3, fp
 800782e:	f7f9 f969 	bl	8000b04 <__aeabi_dcmpge>
 8007832:	9e03      	ldr	r6, [sp, #12]
 8007834:	4637      	mov	r7, r6
 8007836:	2800      	cmp	r0, #0
 8007838:	f040 8245 	bne.w	8007cc6 <_dtoa_r+0x93e>
 800783c:	9d01      	ldr	r5, [sp, #4]
 800783e:	2331      	movs	r3, #49	; 0x31
 8007840:	f805 3b01 	strb.w	r3, [r5], #1
 8007844:	9b00      	ldr	r3, [sp, #0]
 8007846:	3301      	adds	r3, #1
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	e240      	b.n	8007cce <_dtoa_r+0x946>
 800784c:	07f2      	lsls	r2, r6, #31
 800784e:	d505      	bpl.n	800785c <_dtoa_r+0x4d4>
 8007850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007854:	f7f8 fed0 	bl	80005f8 <__aeabi_dmul>
 8007858:	3501      	adds	r5, #1
 800785a:	2301      	movs	r3, #1
 800785c:	1076      	asrs	r6, r6, #1
 800785e:	3708      	adds	r7, #8
 8007860:	e777      	b.n	8007752 <_dtoa_r+0x3ca>
 8007862:	2502      	movs	r5, #2
 8007864:	e779      	b.n	800775a <_dtoa_r+0x3d2>
 8007866:	9f00      	ldr	r7, [sp, #0]
 8007868:	9e03      	ldr	r6, [sp, #12]
 800786a:	e794      	b.n	8007796 <_dtoa_r+0x40e>
 800786c:	9901      	ldr	r1, [sp, #4]
 800786e:	4b4c      	ldr	r3, [pc, #304]	; (80079a0 <_dtoa_r+0x618>)
 8007870:	4431      	add	r1, r6
 8007872:	910d      	str	r1, [sp, #52]	; 0x34
 8007874:	9908      	ldr	r1, [sp, #32]
 8007876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800787a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800787e:	2900      	cmp	r1, #0
 8007880:	d043      	beq.n	800790a <_dtoa_r+0x582>
 8007882:	494d      	ldr	r1, [pc, #308]	; (80079b8 <_dtoa_r+0x630>)
 8007884:	2000      	movs	r0, #0
 8007886:	f7f8 ffe1 	bl	800084c <__aeabi_ddiv>
 800788a:	4652      	mov	r2, sl
 800788c:	465b      	mov	r3, fp
 800788e:	f7f8 fcfb 	bl	8000288 <__aeabi_dsub>
 8007892:	9d01      	ldr	r5, [sp, #4]
 8007894:	4682      	mov	sl, r0
 8007896:	468b      	mov	fp, r1
 8007898:	4649      	mov	r1, r9
 800789a:	4640      	mov	r0, r8
 800789c:	f7f9 f95c 	bl	8000b58 <__aeabi_d2iz>
 80078a0:	4606      	mov	r6, r0
 80078a2:	f7f8 fe3f 	bl	8000524 <__aeabi_i2d>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4640      	mov	r0, r8
 80078ac:	4649      	mov	r1, r9
 80078ae:	f7f8 fceb 	bl	8000288 <__aeabi_dsub>
 80078b2:	3630      	adds	r6, #48	; 0x30
 80078b4:	f805 6b01 	strb.w	r6, [r5], #1
 80078b8:	4652      	mov	r2, sl
 80078ba:	465b      	mov	r3, fp
 80078bc:	4680      	mov	r8, r0
 80078be:	4689      	mov	r9, r1
 80078c0:	f7f9 f90c 	bl	8000adc <__aeabi_dcmplt>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d163      	bne.n	8007990 <_dtoa_r+0x608>
 80078c8:	4642      	mov	r2, r8
 80078ca:	464b      	mov	r3, r9
 80078cc:	4936      	ldr	r1, [pc, #216]	; (80079a8 <_dtoa_r+0x620>)
 80078ce:	2000      	movs	r0, #0
 80078d0:	f7f8 fcda 	bl	8000288 <__aeabi_dsub>
 80078d4:	4652      	mov	r2, sl
 80078d6:	465b      	mov	r3, fp
 80078d8:	f7f9 f900 	bl	8000adc <__aeabi_dcmplt>
 80078dc:	2800      	cmp	r0, #0
 80078de:	f040 80b5 	bne.w	8007a4c <_dtoa_r+0x6c4>
 80078e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e4:	429d      	cmp	r5, r3
 80078e6:	d081      	beq.n	80077ec <_dtoa_r+0x464>
 80078e8:	4b30      	ldr	r3, [pc, #192]	; (80079ac <_dtoa_r+0x624>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	4650      	mov	r0, sl
 80078ee:	4659      	mov	r1, fp
 80078f0:	f7f8 fe82 	bl	80005f8 <__aeabi_dmul>
 80078f4:	4b2d      	ldr	r3, [pc, #180]	; (80079ac <_dtoa_r+0x624>)
 80078f6:	4682      	mov	sl, r0
 80078f8:	468b      	mov	fp, r1
 80078fa:	4640      	mov	r0, r8
 80078fc:	4649      	mov	r1, r9
 80078fe:	2200      	movs	r2, #0
 8007900:	f7f8 fe7a 	bl	80005f8 <__aeabi_dmul>
 8007904:	4680      	mov	r8, r0
 8007906:	4689      	mov	r9, r1
 8007908:	e7c6      	b.n	8007898 <_dtoa_r+0x510>
 800790a:	4650      	mov	r0, sl
 800790c:	4659      	mov	r1, fp
 800790e:	f7f8 fe73 	bl	80005f8 <__aeabi_dmul>
 8007912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007914:	9d01      	ldr	r5, [sp, #4]
 8007916:	930f      	str	r3, [sp, #60]	; 0x3c
 8007918:	4682      	mov	sl, r0
 800791a:	468b      	mov	fp, r1
 800791c:	4649      	mov	r1, r9
 800791e:	4640      	mov	r0, r8
 8007920:	f7f9 f91a 	bl	8000b58 <__aeabi_d2iz>
 8007924:	4606      	mov	r6, r0
 8007926:	f7f8 fdfd 	bl	8000524 <__aeabi_i2d>
 800792a:	3630      	adds	r6, #48	; 0x30
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4640      	mov	r0, r8
 8007932:	4649      	mov	r1, r9
 8007934:	f7f8 fca8 	bl	8000288 <__aeabi_dsub>
 8007938:	f805 6b01 	strb.w	r6, [r5], #1
 800793c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800793e:	429d      	cmp	r5, r3
 8007940:	4680      	mov	r8, r0
 8007942:	4689      	mov	r9, r1
 8007944:	f04f 0200 	mov.w	r2, #0
 8007948:	d124      	bne.n	8007994 <_dtoa_r+0x60c>
 800794a:	4b1b      	ldr	r3, [pc, #108]	; (80079b8 <_dtoa_r+0x630>)
 800794c:	4650      	mov	r0, sl
 800794e:	4659      	mov	r1, fp
 8007950:	f7f8 fc9c 	bl	800028c <__adddf3>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4640      	mov	r0, r8
 800795a:	4649      	mov	r1, r9
 800795c:	f7f9 f8dc 	bl	8000b18 <__aeabi_dcmpgt>
 8007960:	2800      	cmp	r0, #0
 8007962:	d173      	bne.n	8007a4c <_dtoa_r+0x6c4>
 8007964:	4652      	mov	r2, sl
 8007966:	465b      	mov	r3, fp
 8007968:	4913      	ldr	r1, [pc, #76]	; (80079b8 <_dtoa_r+0x630>)
 800796a:	2000      	movs	r0, #0
 800796c:	f7f8 fc8c 	bl	8000288 <__aeabi_dsub>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4640      	mov	r0, r8
 8007976:	4649      	mov	r1, r9
 8007978:	f7f9 f8b0 	bl	8000adc <__aeabi_dcmplt>
 800797c:	2800      	cmp	r0, #0
 800797e:	f43f af35 	beq.w	80077ec <_dtoa_r+0x464>
 8007982:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007984:	1e6b      	subs	r3, r5, #1
 8007986:	930f      	str	r3, [sp, #60]	; 0x3c
 8007988:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800798c:	2b30      	cmp	r3, #48	; 0x30
 800798e:	d0f8      	beq.n	8007982 <_dtoa_r+0x5fa>
 8007990:	9700      	str	r7, [sp, #0]
 8007992:	e049      	b.n	8007a28 <_dtoa_r+0x6a0>
 8007994:	4b05      	ldr	r3, [pc, #20]	; (80079ac <_dtoa_r+0x624>)
 8007996:	f7f8 fe2f 	bl	80005f8 <__aeabi_dmul>
 800799a:	4680      	mov	r8, r0
 800799c:	4689      	mov	r9, r1
 800799e:	e7bd      	b.n	800791c <_dtoa_r+0x594>
 80079a0:	0800a428 	.word	0x0800a428
 80079a4:	0800a400 	.word	0x0800a400
 80079a8:	3ff00000 	.word	0x3ff00000
 80079ac:	40240000 	.word	0x40240000
 80079b0:	401c0000 	.word	0x401c0000
 80079b4:	40140000 	.word	0x40140000
 80079b8:	3fe00000 	.word	0x3fe00000
 80079bc:	9d01      	ldr	r5, [sp, #4]
 80079be:	4656      	mov	r6, sl
 80079c0:	465f      	mov	r7, fp
 80079c2:	4642      	mov	r2, r8
 80079c4:	464b      	mov	r3, r9
 80079c6:	4630      	mov	r0, r6
 80079c8:	4639      	mov	r1, r7
 80079ca:	f7f8 ff3f 	bl	800084c <__aeabi_ddiv>
 80079ce:	f7f9 f8c3 	bl	8000b58 <__aeabi_d2iz>
 80079d2:	4682      	mov	sl, r0
 80079d4:	f7f8 fda6 	bl	8000524 <__aeabi_i2d>
 80079d8:	4642      	mov	r2, r8
 80079da:	464b      	mov	r3, r9
 80079dc:	f7f8 fe0c 	bl	80005f8 <__aeabi_dmul>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4630      	mov	r0, r6
 80079e6:	4639      	mov	r1, r7
 80079e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80079ec:	f7f8 fc4c 	bl	8000288 <__aeabi_dsub>
 80079f0:	f805 6b01 	strb.w	r6, [r5], #1
 80079f4:	9e01      	ldr	r6, [sp, #4]
 80079f6:	9f03      	ldr	r7, [sp, #12]
 80079f8:	1bae      	subs	r6, r5, r6
 80079fa:	42b7      	cmp	r7, r6
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	d135      	bne.n	8007a6e <_dtoa_r+0x6e6>
 8007a02:	f7f8 fc43 	bl	800028c <__adddf3>
 8007a06:	4642      	mov	r2, r8
 8007a08:	464b      	mov	r3, r9
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	f7f9 f883 	bl	8000b18 <__aeabi_dcmpgt>
 8007a12:	b9d0      	cbnz	r0, 8007a4a <_dtoa_r+0x6c2>
 8007a14:	4642      	mov	r2, r8
 8007a16:	464b      	mov	r3, r9
 8007a18:	4630      	mov	r0, r6
 8007a1a:	4639      	mov	r1, r7
 8007a1c:	f7f9 f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a20:	b110      	cbz	r0, 8007a28 <_dtoa_r+0x6a0>
 8007a22:	f01a 0f01 	tst.w	sl, #1
 8007a26:	d110      	bne.n	8007a4a <_dtoa_r+0x6c2>
 8007a28:	4620      	mov	r0, r4
 8007a2a:	ee18 1a10 	vmov	r1, s16
 8007a2e:	f000 fe67 	bl	8008700 <_Bfree>
 8007a32:	2300      	movs	r3, #0
 8007a34:	9800      	ldr	r0, [sp, #0]
 8007a36:	702b      	strb	r3, [r5, #0]
 8007a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	6018      	str	r0, [r3, #0]
 8007a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f43f acf1 	beq.w	8007428 <_dtoa_r+0xa0>
 8007a46:	601d      	str	r5, [r3, #0]
 8007a48:	e4ee      	b.n	8007428 <_dtoa_r+0xa0>
 8007a4a:	9f00      	ldr	r7, [sp, #0]
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	461d      	mov	r5, r3
 8007a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a54:	2a39      	cmp	r2, #57	; 0x39
 8007a56:	d106      	bne.n	8007a66 <_dtoa_r+0x6de>
 8007a58:	9a01      	ldr	r2, [sp, #4]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d1f7      	bne.n	8007a4e <_dtoa_r+0x6c6>
 8007a5e:	9901      	ldr	r1, [sp, #4]
 8007a60:	2230      	movs	r2, #48	; 0x30
 8007a62:	3701      	adds	r7, #1
 8007a64:	700a      	strb	r2, [r1, #0]
 8007a66:	781a      	ldrb	r2, [r3, #0]
 8007a68:	3201      	adds	r2, #1
 8007a6a:	701a      	strb	r2, [r3, #0]
 8007a6c:	e790      	b.n	8007990 <_dtoa_r+0x608>
 8007a6e:	4ba6      	ldr	r3, [pc, #664]	; (8007d08 <_dtoa_r+0x980>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	f7f8 fdc1 	bl	80005f8 <__aeabi_dmul>
 8007a76:	2200      	movs	r2, #0
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	460f      	mov	r7, r1
 8007a7e:	f7f9 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d09d      	beq.n	80079c2 <_dtoa_r+0x63a>
 8007a86:	e7cf      	b.n	8007a28 <_dtoa_r+0x6a0>
 8007a88:	9a08      	ldr	r2, [sp, #32]
 8007a8a:	2a00      	cmp	r2, #0
 8007a8c:	f000 80d7 	beq.w	8007c3e <_dtoa_r+0x8b6>
 8007a90:	9a06      	ldr	r2, [sp, #24]
 8007a92:	2a01      	cmp	r2, #1
 8007a94:	f300 80ba 	bgt.w	8007c0c <_dtoa_r+0x884>
 8007a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a9a:	2a00      	cmp	r2, #0
 8007a9c:	f000 80b2 	beq.w	8007c04 <_dtoa_r+0x87c>
 8007aa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007aa4:	9e07      	ldr	r6, [sp, #28]
 8007aa6:	9d04      	ldr	r5, [sp, #16]
 8007aa8:	9a04      	ldr	r2, [sp, #16]
 8007aaa:	441a      	add	r2, r3
 8007aac:	9204      	str	r2, [sp, #16]
 8007aae:	9a05      	ldr	r2, [sp, #20]
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	441a      	add	r2, r3
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	9205      	str	r2, [sp, #20]
 8007ab8:	f000 ff24 	bl	8008904 <__i2b>
 8007abc:	4607      	mov	r7, r0
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	dd0c      	ble.n	8007adc <_dtoa_r+0x754>
 8007ac2:	9b05      	ldr	r3, [sp, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dd09      	ble.n	8007adc <_dtoa_r+0x754>
 8007ac8:	42ab      	cmp	r3, r5
 8007aca:	9a04      	ldr	r2, [sp, #16]
 8007acc:	bfa8      	it	ge
 8007ace:	462b      	movge	r3, r5
 8007ad0:	1ad2      	subs	r2, r2, r3
 8007ad2:	9204      	str	r2, [sp, #16]
 8007ad4:	9a05      	ldr	r2, [sp, #20]
 8007ad6:	1aed      	subs	r5, r5, r3
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	9305      	str	r3, [sp, #20]
 8007adc:	9b07      	ldr	r3, [sp, #28]
 8007ade:	b31b      	cbz	r3, 8007b28 <_dtoa_r+0x7a0>
 8007ae0:	9b08      	ldr	r3, [sp, #32]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80af 	beq.w	8007c46 <_dtoa_r+0x8be>
 8007ae8:	2e00      	cmp	r6, #0
 8007aea:	dd13      	ble.n	8007b14 <_dtoa_r+0x78c>
 8007aec:	4639      	mov	r1, r7
 8007aee:	4632      	mov	r2, r6
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 ffc7 	bl	8008a84 <__pow5mult>
 8007af6:	ee18 2a10 	vmov	r2, s16
 8007afa:	4601      	mov	r1, r0
 8007afc:	4607      	mov	r7, r0
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 ff16 	bl	8008930 <__multiply>
 8007b04:	ee18 1a10 	vmov	r1, s16
 8007b08:	4680      	mov	r8, r0
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fdf8 	bl	8008700 <_Bfree>
 8007b10:	ee08 8a10 	vmov	s16, r8
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	1b9a      	subs	r2, r3, r6
 8007b18:	d006      	beq.n	8007b28 <_dtoa_r+0x7a0>
 8007b1a:	ee18 1a10 	vmov	r1, s16
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 ffb0 	bl	8008a84 <__pow5mult>
 8007b24:	ee08 0a10 	vmov	s16, r0
 8007b28:	2101      	movs	r1, #1
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 feea 	bl	8008904 <__i2b>
 8007b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	4606      	mov	r6, r0
 8007b36:	f340 8088 	ble.w	8007c4a <_dtoa_r+0x8c2>
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 ffa0 	bl	8008a84 <__pow5mult>
 8007b44:	9b06      	ldr	r3, [sp, #24]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	4606      	mov	r6, r0
 8007b4a:	f340 8081 	ble.w	8007c50 <_dtoa_r+0x8c8>
 8007b4e:	f04f 0800 	mov.w	r8, #0
 8007b52:	6933      	ldr	r3, [r6, #16]
 8007b54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b58:	6918      	ldr	r0, [r3, #16]
 8007b5a:	f000 fe83 	bl	8008864 <__hi0bits>
 8007b5e:	f1c0 0020 	rsb	r0, r0, #32
 8007b62:	9b05      	ldr	r3, [sp, #20]
 8007b64:	4418      	add	r0, r3
 8007b66:	f010 001f 	ands.w	r0, r0, #31
 8007b6a:	f000 8092 	beq.w	8007c92 <_dtoa_r+0x90a>
 8007b6e:	f1c0 0320 	rsb	r3, r0, #32
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	f340 808a 	ble.w	8007c8c <_dtoa_r+0x904>
 8007b78:	f1c0 001c 	rsb	r0, r0, #28
 8007b7c:	9b04      	ldr	r3, [sp, #16]
 8007b7e:	4403      	add	r3, r0
 8007b80:	9304      	str	r3, [sp, #16]
 8007b82:	9b05      	ldr	r3, [sp, #20]
 8007b84:	4403      	add	r3, r0
 8007b86:	4405      	add	r5, r0
 8007b88:	9305      	str	r3, [sp, #20]
 8007b8a:	9b04      	ldr	r3, [sp, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dd07      	ble.n	8007ba0 <_dtoa_r+0x818>
 8007b90:	ee18 1a10 	vmov	r1, s16
 8007b94:	461a      	mov	r2, r3
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 ffce 	bl	8008b38 <__lshift>
 8007b9c:	ee08 0a10 	vmov	s16, r0
 8007ba0:	9b05      	ldr	r3, [sp, #20]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	dd05      	ble.n	8007bb2 <_dtoa_r+0x82a>
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	461a      	mov	r2, r3
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 ffc4 	bl	8008b38 <__lshift>
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d06e      	beq.n	8007c96 <_dtoa_r+0x90e>
 8007bb8:	ee18 0a10 	vmov	r0, s16
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	f001 f82b 	bl	8008c18 <__mcmp>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	da67      	bge.n	8007c96 <_dtoa_r+0x90e>
 8007bc6:	9b00      	ldr	r3, [sp, #0]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	ee18 1a10 	vmov	r1, s16
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 fdb5 	bl	8008744 <__multadd>
 8007bda:	9b08      	ldr	r3, [sp, #32]
 8007bdc:	ee08 0a10 	vmov	s16, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 81b1 	beq.w	8007f48 <_dtoa_r+0xbc0>
 8007be6:	2300      	movs	r3, #0
 8007be8:	4639      	mov	r1, r7
 8007bea:	220a      	movs	r2, #10
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 fda9 	bl	8008744 <__multadd>
 8007bf2:	9b02      	ldr	r3, [sp, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	4607      	mov	r7, r0
 8007bf8:	f300 808e 	bgt.w	8007d18 <_dtoa_r+0x990>
 8007bfc:	9b06      	ldr	r3, [sp, #24]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	dc51      	bgt.n	8007ca6 <_dtoa_r+0x91e>
 8007c02:	e089      	b.n	8007d18 <_dtoa_r+0x990>
 8007c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c0a:	e74b      	b.n	8007aa4 <_dtoa_r+0x71c>
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	1e5e      	subs	r6, r3, #1
 8007c10:	9b07      	ldr	r3, [sp, #28]
 8007c12:	42b3      	cmp	r3, r6
 8007c14:	bfbf      	itttt	lt
 8007c16:	9b07      	ldrlt	r3, [sp, #28]
 8007c18:	9607      	strlt	r6, [sp, #28]
 8007c1a:	1af2      	sublt	r2, r6, r3
 8007c1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c1e:	bfb6      	itet	lt
 8007c20:	189b      	addlt	r3, r3, r2
 8007c22:	1b9e      	subge	r6, r3, r6
 8007c24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c26:	9b03      	ldr	r3, [sp, #12]
 8007c28:	bfb8      	it	lt
 8007c2a:	2600      	movlt	r6, #0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	bfb7      	itett	lt
 8007c30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007c34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007c38:	1a9d      	sublt	r5, r3, r2
 8007c3a:	2300      	movlt	r3, #0
 8007c3c:	e734      	b.n	8007aa8 <_dtoa_r+0x720>
 8007c3e:	9e07      	ldr	r6, [sp, #28]
 8007c40:	9d04      	ldr	r5, [sp, #16]
 8007c42:	9f08      	ldr	r7, [sp, #32]
 8007c44:	e73b      	b.n	8007abe <_dtoa_r+0x736>
 8007c46:	9a07      	ldr	r2, [sp, #28]
 8007c48:	e767      	b.n	8007b1a <_dtoa_r+0x792>
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	dc18      	bgt.n	8007c82 <_dtoa_r+0x8fa>
 8007c50:	f1ba 0f00 	cmp.w	sl, #0
 8007c54:	d115      	bne.n	8007c82 <_dtoa_r+0x8fa>
 8007c56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c5a:	b993      	cbnz	r3, 8007c82 <_dtoa_r+0x8fa>
 8007c5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c60:	0d1b      	lsrs	r3, r3, #20
 8007c62:	051b      	lsls	r3, r3, #20
 8007c64:	b183      	cbz	r3, 8007c88 <_dtoa_r+0x900>
 8007c66:	9b04      	ldr	r3, [sp, #16]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	9304      	str	r3, [sp, #16]
 8007c6c:	9b05      	ldr	r3, [sp, #20]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	9305      	str	r3, [sp, #20]
 8007c72:	f04f 0801 	mov.w	r8, #1
 8007c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f47f af6a 	bne.w	8007b52 <_dtoa_r+0x7ca>
 8007c7e:	2001      	movs	r0, #1
 8007c80:	e76f      	b.n	8007b62 <_dtoa_r+0x7da>
 8007c82:	f04f 0800 	mov.w	r8, #0
 8007c86:	e7f6      	b.n	8007c76 <_dtoa_r+0x8ee>
 8007c88:	4698      	mov	r8, r3
 8007c8a:	e7f4      	b.n	8007c76 <_dtoa_r+0x8ee>
 8007c8c:	f43f af7d 	beq.w	8007b8a <_dtoa_r+0x802>
 8007c90:	4618      	mov	r0, r3
 8007c92:	301c      	adds	r0, #28
 8007c94:	e772      	b.n	8007b7c <_dtoa_r+0x7f4>
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	dc37      	bgt.n	8007d0c <_dtoa_r+0x984>
 8007c9c:	9b06      	ldr	r3, [sp, #24]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	dd34      	ble.n	8007d0c <_dtoa_r+0x984>
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	9302      	str	r3, [sp, #8]
 8007ca6:	9b02      	ldr	r3, [sp, #8]
 8007ca8:	b96b      	cbnz	r3, 8007cc6 <_dtoa_r+0x93e>
 8007caa:	4631      	mov	r1, r6
 8007cac:	2205      	movs	r2, #5
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 fd48 	bl	8008744 <__multadd>
 8007cb4:	4601      	mov	r1, r0
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	ee18 0a10 	vmov	r0, s16
 8007cbc:	f000 ffac 	bl	8008c18 <__mcmp>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	f73f adbb 	bgt.w	800783c <_dtoa_r+0x4b4>
 8007cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc8:	9d01      	ldr	r5, [sp, #4]
 8007cca:	43db      	mvns	r3, r3
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	f04f 0800 	mov.w	r8, #0
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fd13 	bl	8008700 <_Bfree>
 8007cda:	2f00      	cmp	r7, #0
 8007cdc:	f43f aea4 	beq.w	8007a28 <_dtoa_r+0x6a0>
 8007ce0:	f1b8 0f00 	cmp.w	r8, #0
 8007ce4:	d005      	beq.n	8007cf2 <_dtoa_r+0x96a>
 8007ce6:	45b8      	cmp	r8, r7
 8007ce8:	d003      	beq.n	8007cf2 <_dtoa_r+0x96a>
 8007cea:	4641      	mov	r1, r8
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 fd07 	bl	8008700 <_Bfree>
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fd03 	bl	8008700 <_Bfree>
 8007cfa:	e695      	b.n	8007a28 <_dtoa_r+0x6a0>
 8007cfc:	2600      	movs	r6, #0
 8007cfe:	4637      	mov	r7, r6
 8007d00:	e7e1      	b.n	8007cc6 <_dtoa_r+0x93e>
 8007d02:	9700      	str	r7, [sp, #0]
 8007d04:	4637      	mov	r7, r6
 8007d06:	e599      	b.n	800783c <_dtoa_r+0x4b4>
 8007d08:	40240000 	.word	0x40240000
 8007d0c:	9b08      	ldr	r3, [sp, #32]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 80ca 	beq.w	8007ea8 <_dtoa_r+0xb20>
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	9302      	str	r3, [sp, #8]
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	dd05      	ble.n	8007d28 <_dtoa_r+0x9a0>
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	462a      	mov	r2, r5
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 ff09 	bl	8008b38 <__lshift>
 8007d26:	4607      	mov	r7, r0
 8007d28:	f1b8 0f00 	cmp.w	r8, #0
 8007d2c:	d05b      	beq.n	8007de6 <_dtoa_r+0xa5e>
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 fca5 	bl	8008680 <_Balloc>
 8007d36:	4605      	mov	r5, r0
 8007d38:	b928      	cbnz	r0, 8007d46 <_dtoa_r+0x9be>
 8007d3a:	4b87      	ldr	r3, [pc, #540]	; (8007f58 <_dtoa_r+0xbd0>)
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d42:	f7ff bb3b 	b.w	80073bc <_dtoa_r+0x34>
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	3202      	adds	r2, #2
 8007d4a:	0092      	lsls	r2, r2, #2
 8007d4c:	f107 010c 	add.w	r1, r7, #12
 8007d50:	300c      	adds	r0, #12
 8007d52:	f7fd fd2b 	bl	80057ac <memcpy>
 8007d56:	2201      	movs	r2, #1
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 feec 	bl	8008b38 <__lshift>
 8007d60:	9b01      	ldr	r3, [sp, #4]
 8007d62:	f103 0901 	add.w	r9, r3, #1
 8007d66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	9305      	str	r3, [sp, #20]
 8007d6e:	f00a 0301 	and.w	r3, sl, #1
 8007d72:	46b8      	mov	r8, r7
 8007d74:	9304      	str	r3, [sp, #16]
 8007d76:	4607      	mov	r7, r0
 8007d78:	4631      	mov	r1, r6
 8007d7a:	ee18 0a10 	vmov	r0, s16
 8007d7e:	f7ff fa77 	bl	8007270 <quorem>
 8007d82:	4641      	mov	r1, r8
 8007d84:	9002      	str	r0, [sp, #8]
 8007d86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d8a:	ee18 0a10 	vmov	r0, s16
 8007d8e:	f000 ff43 	bl	8008c18 <__mcmp>
 8007d92:	463a      	mov	r2, r7
 8007d94:	9003      	str	r0, [sp, #12]
 8007d96:	4631      	mov	r1, r6
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f000 ff59 	bl	8008c50 <__mdiff>
 8007d9e:	68c2      	ldr	r2, [r0, #12]
 8007da0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007da4:	4605      	mov	r5, r0
 8007da6:	bb02      	cbnz	r2, 8007dea <_dtoa_r+0xa62>
 8007da8:	4601      	mov	r1, r0
 8007daa:	ee18 0a10 	vmov	r0, s16
 8007dae:	f000 ff33 	bl	8008c18 <__mcmp>
 8007db2:	4602      	mov	r2, r0
 8007db4:	4629      	mov	r1, r5
 8007db6:	4620      	mov	r0, r4
 8007db8:	9207      	str	r2, [sp, #28]
 8007dba:	f000 fca1 	bl	8008700 <_Bfree>
 8007dbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007dc2:	ea43 0102 	orr.w	r1, r3, r2
 8007dc6:	9b04      	ldr	r3, [sp, #16]
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	464d      	mov	r5, r9
 8007dcc:	d10f      	bne.n	8007dee <_dtoa_r+0xa66>
 8007dce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007dd2:	d02a      	beq.n	8007e2a <_dtoa_r+0xaa2>
 8007dd4:	9b03      	ldr	r3, [sp, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	dd02      	ble.n	8007de0 <_dtoa_r+0xa58>
 8007dda:	9b02      	ldr	r3, [sp, #8]
 8007ddc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007de0:	f88b a000 	strb.w	sl, [fp]
 8007de4:	e775      	b.n	8007cd2 <_dtoa_r+0x94a>
 8007de6:	4638      	mov	r0, r7
 8007de8:	e7ba      	b.n	8007d60 <_dtoa_r+0x9d8>
 8007dea:	2201      	movs	r2, #1
 8007dec:	e7e2      	b.n	8007db4 <_dtoa_r+0xa2c>
 8007dee:	9b03      	ldr	r3, [sp, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	db04      	blt.n	8007dfe <_dtoa_r+0xa76>
 8007df4:	9906      	ldr	r1, [sp, #24]
 8007df6:	430b      	orrs	r3, r1
 8007df8:	9904      	ldr	r1, [sp, #16]
 8007dfa:	430b      	orrs	r3, r1
 8007dfc:	d122      	bne.n	8007e44 <_dtoa_r+0xabc>
 8007dfe:	2a00      	cmp	r2, #0
 8007e00:	ddee      	ble.n	8007de0 <_dtoa_r+0xa58>
 8007e02:	ee18 1a10 	vmov	r1, s16
 8007e06:	2201      	movs	r2, #1
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 fe95 	bl	8008b38 <__lshift>
 8007e0e:	4631      	mov	r1, r6
 8007e10:	ee08 0a10 	vmov	s16, r0
 8007e14:	f000 ff00 	bl	8008c18 <__mcmp>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	dc03      	bgt.n	8007e24 <_dtoa_r+0xa9c>
 8007e1c:	d1e0      	bne.n	8007de0 <_dtoa_r+0xa58>
 8007e1e:	f01a 0f01 	tst.w	sl, #1
 8007e22:	d0dd      	beq.n	8007de0 <_dtoa_r+0xa58>
 8007e24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e28:	d1d7      	bne.n	8007dda <_dtoa_r+0xa52>
 8007e2a:	2339      	movs	r3, #57	; 0x39
 8007e2c:	f88b 3000 	strb.w	r3, [fp]
 8007e30:	462b      	mov	r3, r5
 8007e32:	461d      	mov	r5, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e3a:	2a39      	cmp	r2, #57	; 0x39
 8007e3c:	d071      	beq.n	8007f22 <_dtoa_r+0xb9a>
 8007e3e:	3201      	adds	r2, #1
 8007e40:	701a      	strb	r2, [r3, #0]
 8007e42:	e746      	b.n	8007cd2 <_dtoa_r+0x94a>
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	dd07      	ble.n	8007e58 <_dtoa_r+0xad0>
 8007e48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e4c:	d0ed      	beq.n	8007e2a <_dtoa_r+0xaa2>
 8007e4e:	f10a 0301 	add.w	r3, sl, #1
 8007e52:	f88b 3000 	strb.w	r3, [fp]
 8007e56:	e73c      	b.n	8007cd2 <_dtoa_r+0x94a>
 8007e58:	9b05      	ldr	r3, [sp, #20]
 8007e5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007e5e:	4599      	cmp	r9, r3
 8007e60:	d047      	beq.n	8007ef2 <_dtoa_r+0xb6a>
 8007e62:	ee18 1a10 	vmov	r1, s16
 8007e66:	2300      	movs	r3, #0
 8007e68:	220a      	movs	r2, #10
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fc6a 	bl	8008744 <__multadd>
 8007e70:	45b8      	cmp	r8, r7
 8007e72:	ee08 0a10 	vmov	s16, r0
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	f04f 020a 	mov.w	r2, #10
 8007e7e:	4641      	mov	r1, r8
 8007e80:	4620      	mov	r0, r4
 8007e82:	d106      	bne.n	8007e92 <_dtoa_r+0xb0a>
 8007e84:	f000 fc5e 	bl	8008744 <__multadd>
 8007e88:	4680      	mov	r8, r0
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	f109 0901 	add.w	r9, r9, #1
 8007e90:	e772      	b.n	8007d78 <_dtoa_r+0x9f0>
 8007e92:	f000 fc57 	bl	8008744 <__multadd>
 8007e96:	4639      	mov	r1, r7
 8007e98:	4680      	mov	r8, r0
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	220a      	movs	r2, #10
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 fc50 	bl	8008744 <__multadd>
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	e7f1      	b.n	8007e8c <_dtoa_r+0xb04>
 8007ea8:	9b03      	ldr	r3, [sp, #12]
 8007eaa:	9302      	str	r3, [sp, #8]
 8007eac:	9d01      	ldr	r5, [sp, #4]
 8007eae:	ee18 0a10 	vmov	r0, s16
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	f7ff f9dc 	bl	8007270 <quorem>
 8007eb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ebc:	9b01      	ldr	r3, [sp, #4]
 8007ebe:	f805 ab01 	strb.w	sl, [r5], #1
 8007ec2:	1aea      	subs	r2, r5, r3
 8007ec4:	9b02      	ldr	r3, [sp, #8]
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	dd09      	ble.n	8007ede <_dtoa_r+0xb56>
 8007eca:	ee18 1a10 	vmov	r1, s16
 8007ece:	2300      	movs	r3, #0
 8007ed0:	220a      	movs	r2, #10
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 fc36 	bl	8008744 <__multadd>
 8007ed8:	ee08 0a10 	vmov	s16, r0
 8007edc:	e7e7      	b.n	8007eae <_dtoa_r+0xb26>
 8007ede:	9b02      	ldr	r3, [sp, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bfc8      	it	gt
 8007ee4:	461d      	movgt	r5, r3
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	bfd8      	it	le
 8007eea:	2501      	movle	r5, #1
 8007eec:	441d      	add	r5, r3
 8007eee:	f04f 0800 	mov.w	r8, #0
 8007ef2:	ee18 1a10 	vmov	r1, s16
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 fe1d 	bl	8008b38 <__lshift>
 8007efe:	4631      	mov	r1, r6
 8007f00:	ee08 0a10 	vmov	s16, r0
 8007f04:	f000 fe88 	bl	8008c18 <__mcmp>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	dc91      	bgt.n	8007e30 <_dtoa_r+0xaa8>
 8007f0c:	d102      	bne.n	8007f14 <_dtoa_r+0xb8c>
 8007f0e:	f01a 0f01 	tst.w	sl, #1
 8007f12:	d18d      	bne.n	8007e30 <_dtoa_r+0xaa8>
 8007f14:	462b      	mov	r3, r5
 8007f16:	461d      	mov	r5, r3
 8007f18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f1c:	2a30      	cmp	r2, #48	; 0x30
 8007f1e:	d0fa      	beq.n	8007f16 <_dtoa_r+0xb8e>
 8007f20:	e6d7      	b.n	8007cd2 <_dtoa_r+0x94a>
 8007f22:	9a01      	ldr	r2, [sp, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d184      	bne.n	8007e32 <_dtoa_r+0xaaa>
 8007f28:	9b00      	ldr	r3, [sp, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	2331      	movs	r3, #49	; 0x31
 8007f30:	7013      	strb	r3, [r2, #0]
 8007f32:	e6ce      	b.n	8007cd2 <_dtoa_r+0x94a>
 8007f34:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <_dtoa_r+0xbd4>)
 8007f36:	f7ff ba95 	b.w	8007464 <_dtoa_r+0xdc>
 8007f3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f47f aa6e 	bne.w	800741e <_dtoa_r+0x96>
 8007f42:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <_dtoa_r+0xbd8>)
 8007f44:	f7ff ba8e 	b.w	8007464 <_dtoa_r+0xdc>
 8007f48:	9b02      	ldr	r3, [sp, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	dcae      	bgt.n	8007eac <_dtoa_r+0xb24>
 8007f4e:	9b06      	ldr	r3, [sp, #24]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	f73f aea8 	bgt.w	8007ca6 <_dtoa_r+0x91e>
 8007f56:	e7a9      	b.n	8007eac <_dtoa_r+0xb24>
 8007f58:	0800a318 	.word	0x0800a318
 8007f5c:	0800a118 	.word	0x0800a118
 8007f60:	0800a299 	.word	0x0800a299

08007f64 <rshift>:
 8007f64:	6903      	ldr	r3, [r0, #16]
 8007f66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f72:	f100 0414 	add.w	r4, r0, #20
 8007f76:	dd45      	ble.n	8008004 <rshift+0xa0>
 8007f78:	f011 011f 	ands.w	r1, r1, #31
 8007f7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f84:	d10c      	bne.n	8007fa0 <rshift+0x3c>
 8007f86:	f100 0710 	add.w	r7, r0, #16
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	42b1      	cmp	r1, r6
 8007f8e:	d334      	bcc.n	8007ffa <rshift+0x96>
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	1eea      	subs	r2, r5, #3
 8007f96:	4296      	cmp	r6, r2
 8007f98:	bf38      	it	cc
 8007f9a:	2300      	movcc	r3, #0
 8007f9c:	4423      	add	r3, r4
 8007f9e:	e015      	b.n	8007fcc <rshift+0x68>
 8007fa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007fa4:	f1c1 0820 	rsb	r8, r1, #32
 8007fa8:	40cf      	lsrs	r7, r1
 8007faa:	f105 0e04 	add.w	lr, r5, #4
 8007fae:	46a1      	mov	r9, r4
 8007fb0:	4576      	cmp	r6, lr
 8007fb2:	46f4      	mov	ip, lr
 8007fb4:	d815      	bhi.n	8007fe2 <rshift+0x7e>
 8007fb6:	1a9a      	subs	r2, r3, r2
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	3a04      	subs	r2, #4
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	42ae      	cmp	r6, r5
 8007fc0:	bf38      	it	cc
 8007fc2:	2200      	movcc	r2, #0
 8007fc4:	18a3      	adds	r3, r4, r2
 8007fc6:	50a7      	str	r7, [r4, r2]
 8007fc8:	b107      	cbz	r7, 8007fcc <rshift+0x68>
 8007fca:	3304      	adds	r3, #4
 8007fcc:	1b1a      	subs	r2, r3, r4
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fd4:	bf08      	it	eq
 8007fd6:	2300      	moveq	r3, #0
 8007fd8:	6102      	str	r2, [r0, #16]
 8007fda:	bf08      	it	eq
 8007fdc:	6143      	streq	r3, [r0, #20]
 8007fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fe2:	f8dc c000 	ldr.w	ip, [ip]
 8007fe6:	fa0c fc08 	lsl.w	ip, ip, r8
 8007fea:	ea4c 0707 	orr.w	r7, ip, r7
 8007fee:	f849 7b04 	str.w	r7, [r9], #4
 8007ff2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ff6:	40cf      	lsrs	r7, r1
 8007ff8:	e7da      	b.n	8007fb0 <rshift+0x4c>
 8007ffa:	f851 cb04 	ldr.w	ip, [r1], #4
 8007ffe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008002:	e7c3      	b.n	8007f8c <rshift+0x28>
 8008004:	4623      	mov	r3, r4
 8008006:	e7e1      	b.n	8007fcc <rshift+0x68>

08008008 <__hexdig_fun>:
 8008008:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800800c:	2b09      	cmp	r3, #9
 800800e:	d802      	bhi.n	8008016 <__hexdig_fun+0xe>
 8008010:	3820      	subs	r0, #32
 8008012:	b2c0      	uxtb	r0, r0
 8008014:	4770      	bx	lr
 8008016:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800801a:	2b05      	cmp	r3, #5
 800801c:	d801      	bhi.n	8008022 <__hexdig_fun+0x1a>
 800801e:	3847      	subs	r0, #71	; 0x47
 8008020:	e7f7      	b.n	8008012 <__hexdig_fun+0xa>
 8008022:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008026:	2b05      	cmp	r3, #5
 8008028:	d801      	bhi.n	800802e <__hexdig_fun+0x26>
 800802a:	3827      	subs	r0, #39	; 0x27
 800802c:	e7f1      	b.n	8008012 <__hexdig_fun+0xa>
 800802e:	2000      	movs	r0, #0
 8008030:	4770      	bx	lr
	...

08008034 <__gethex>:
 8008034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	ed2d 8b02 	vpush	{d8}
 800803c:	b089      	sub	sp, #36	; 0x24
 800803e:	ee08 0a10 	vmov	s16, r0
 8008042:	9304      	str	r3, [sp, #16]
 8008044:	4bb4      	ldr	r3, [pc, #720]	; (8008318 <__gethex+0x2e4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	4618      	mov	r0, r3
 800804c:	468b      	mov	fp, r1
 800804e:	4690      	mov	r8, r2
 8008050:	f7f8 f8be 	bl	80001d0 <strlen>
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	f8db 2000 	ldr.w	r2, [fp]
 800805a:	4403      	add	r3, r0
 800805c:	4682      	mov	sl, r0
 800805e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008062:	9305      	str	r3, [sp, #20]
 8008064:	1c93      	adds	r3, r2, #2
 8008066:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800806a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800806e:	32fe      	adds	r2, #254	; 0xfe
 8008070:	18d1      	adds	r1, r2, r3
 8008072:	461f      	mov	r7, r3
 8008074:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008078:	9100      	str	r1, [sp, #0]
 800807a:	2830      	cmp	r0, #48	; 0x30
 800807c:	d0f8      	beq.n	8008070 <__gethex+0x3c>
 800807e:	f7ff ffc3 	bl	8008008 <__hexdig_fun>
 8008082:	4604      	mov	r4, r0
 8008084:	2800      	cmp	r0, #0
 8008086:	d13a      	bne.n	80080fe <__gethex+0xca>
 8008088:	9901      	ldr	r1, [sp, #4]
 800808a:	4652      	mov	r2, sl
 800808c:	4638      	mov	r0, r7
 800808e:	f001 fa23 	bl	80094d8 <strncmp>
 8008092:	4605      	mov	r5, r0
 8008094:	2800      	cmp	r0, #0
 8008096:	d168      	bne.n	800816a <__gethex+0x136>
 8008098:	f817 000a 	ldrb.w	r0, [r7, sl]
 800809c:	eb07 060a 	add.w	r6, r7, sl
 80080a0:	f7ff ffb2 	bl	8008008 <__hexdig_fun>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d062      	beq.n	800816e <__gethex+0x13a>
 80080a8:	4633      	mov	r3, r6
 80080aa:	7818      	ldrb	r0, [r3, #0]
 80080ac:	2830      	cmp	r0, #48	; 0x30
 80080ae:	461f      	mov	r7, r3
 80080b0:	f103 0301 	add.w	r3, r3, #1
 80080b4:	d0f9      	beq.n	80080aa <__gethex+0x76>
 80080b6:	f7ff ffa7 	bl	8008008 <__hexdig_fun>
 80080ba:	2301      	movs	r3, #1
 80080bc:	fab0 f480 	clz	r4, r0
 80080c0:	0964      	lsrs	r4, r4, #5
 80080c2:	4635      	mov	r5, r6
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	463a      	mov	r2, r7
 80080c8:	4616      	mov	r6, r2
 80080ca:	3201      	adds	r2, #1
 80080cc:	7830      	ldrb	r0, [r6, #0]
 80080ce:	f7ff ff9b 	bl	8008008 <__hexdig_fun>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d1f8      	bne.n	80080c8 <__gethex+0x94>
 80080d6:	9901      	ldr	r1, [sp, #4]
 80080d8:	4652      	mov	r2, sl
 80080da:	4630      	mov	r0, r6
 80080dc:	f001 f9fc 	bl	80094d8 <strncmp>
 80080e0:	b980      	cbnz	r0, 8008104 <__gethex+0xd0>
 80080e2:	b94d      	cbnz	r5, 80080f8 <__gethex+0xc4>
 80080e4:	eb06 050a 	add.w	r5, r6, sl
 80080e8:	462a      	mov	r2, r5
 80080ea:	4616      	mov	r6, r2
 80080ec:	3201      	adds	r2, #1
 80080ee:	7830      	ldrb	r0, [r6, #0]
 80080f0:	f7ff ff8a 	bl	8008008 <__hexdig_fun>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d1f8      	bne.n	80080ea <__gethex+0xb6>
 80080f8:	1bad      	subs	r5, r5, r6
 80080fa:	00ad      	lsls	r5, r5, #2
 80080fc:	e004      	b.n	8008108 <__gethex+0xd4>
 80080fe:	2400      	movs	r4, #0
 8008100:	4625      	mov	r5, r4
 8008102:	e7e0      	b.n	80080c6 <__gethex+0x92>
 8008104:	2d00      	cmp	r5, #0
 8008106:	d1f7      	bne.n	80080f8 <__gethex+0xc4>
 8008108:	7833      	ldrb	r3, [r6, #0]
 800810a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800810e:	2b50      	cmp	r3, #80	; 0x50
 8008110:	d13b      	bne.n	800818a <__gethex+0x156>
 8008112:	7873      	ldrb	r3, [r6, #1]
 8008114:	2b2b      	cmp	r3, #43	; 0x2b
 8008116:	d02c      	beq.n	8008172 <__gethex+0x13e>
 8008118:	2b2d      	cmp	r3, #45	; 0x2d
 800811a:	d02e      	beq.n	800817a <__gethex+0x146>
 800811c:	1c71      	adds	r1, r6, #1
 800811e:	f04f 0900 	mov.w	r9, #0
 8008122:	7808      	ldrb	r0, [r1, #0]
 8008124:	f7ff ff70 	bl	8008008 <__hexdig_fun>
 8008128:	1e43      	subs	r3, r0, #1
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b18      	cmp	r3, #24
 800812e:	d82c      	bhi.n	800818a <__gethex+0x156>
 8008130:	f1a0 0210 	sub.w	r2, r0, #16
 8008134:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008138:	f7ff ff66 	bl	8008008 <__hexdig_fun>
 800813c:	1e43      	subs	r3, r0, #1
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b18      	cmp	r3, #24
 8008142:	d91d      	bls.n	8008180 <__gethex+0x14c>
 8008144:	f1b9 0f00 	cmp.w	r9, #0
 8008148:	d000      	beq.n	800814c <__gethex+0x118>
 800814a:	4252      	negs	r2, r2
 800814c:	4415      	add	r5, r2
 800814e:	f8cb 1000 	str.w	r1, [fp]
 8008152:	b1e4      	cbz	r4, 800818e <__gethex+0x15a>
 8008154:	9b00      	ldr	r3, [sp, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	bf14      	ite	ne
 800815a:	2700      	movne	r7, #0
 800815c:	2706      	moveq	r7, #6
 800815e:	4638      	mov	r0, r7
 8008160:	b009      	add	sp, #36	; 0x24
 8008162:	ecbd 8b02 	vpop	{d8}
 8008166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816a:	463e      	mov	r6, r7
 800816c:	4625      	mov	r5, r4
 800816e:	2401      	movs	r4, #1
 8008170:	e7ca      	b.n	8008108 <__gethex+0xd4>
 8008172:	f04f 0900 	mov.w	r9, #0
 8008176:	1cb1      	adds	r1, r6, #2
 8008178:	e7d3      	b.n	8008122 <__gethex+0xee>
 800817a:	f04f 0901 	mov.w	r9, #1
 800817e:	e7fa      	b.n	8008176 <__gethex+0x142>
 8008180:	230a      	movs	r3, #10
 8008182:	fb03 0202 	mla	r2, r3, r2, r0
 8008186:	3a10      	subs	r2, #16
 8008188:	e7d4      	b.n	8008134 <__gethex+0x100>
 800818a:	4631      	mov	r1, r6
 800818c:	e7df      	b.n	800814e <__gethex+0x11a>
 800818e:	1bf3      	subs	r3, r6, r7
 8008190:	3b01      	subs	r3, #1
 8008192:	4621      	mov	r1, r4
 8008194:	2b07      	cmp	r3, #7
 8008196:	dc0b      	bgt.n	80081b0 <__gethex+0x17c>
 8008198:	ee18 0a10 	vmov	r0, s16
 800819c:	f000 fa70 	bl	8008680 <_Balloc>
 80081a0:	4604      	mov	r4, r0
 80081a2:	b940      	cbnz	r0, 80081b6 <__gethex+0x182>
 80081a4:	4b5d      	ldr	r3, [pc, #372]	; (800831c <__gethex+0x2e8>)
 80081a6:	4602      	mov	r2, r0
 80081a8:	21de      	movs	r1, #222	; 0xde
 80081aa:	485d      	ldr	r0, [pc, #372]	; (8008320 <__gethex+0x2ec>)
 80081ac:	f001 f9b6 	bl	800951c <__assert_func>
 80081b0:	3101      	adds	r1, #1
 80081b2:	105b      	asrs	r3, r3, #1
 80081b4:	e7ee      	b.n	8008194 <__gethex+0x160>
 80081b6:	f100 0914 	add.w	r9, r0, #20
 80081ba:	f04f 0b00 	mov.w	fp, #0
 80081be:	f1ca 0301 	rsb	r3, sl, #1
 80081c2:	f8cd 9008 	str.w	r9, [sp, #8]
 80081c6:	f8cd b000 	str.w	fp, [sp]
 80081ca:	9306      	str	r3, [sp, #24]
 80081cc:	42b7      	cmp	r7, r6
 80081ce:	d340      	bcc.n	8008252 <__gethex+0x21e>
 80081d0:	9802      	ldr	r0, [sp, #8]
 80081d2:	9b00      	ldr	r3, [sp, #0]
 80081d4:	f840 3b04 	str.w	r3, [r0], #4
 80081d8:	eba0 0009 	sub.w	r0, r0, r9
 80081dc:	1080      	asrs	r0, r0, #2
 80081de:	0146      	lsls	r6, r0, #5
 80081e0:	6120      	str	r0, [r4, #16]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fb3e 	bl	8008864 <__hi0bits>
 80081e8:	1a30      	subs	r0, r6, r0
 80081ea:	f8d8 6000 	ldr.w	r6, [r8]
 80081ee:	42b0      	cmp	r0, r6
 80081f0:	dd63      	ble.n	80082ba <__gethex+0x286>
 80081f2:	1b87      	subs	r7, r0, r6
 80081f4:	4639      	mov	r1, r7
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 fee2 	bl	8008fc0 <__any_on>
 80081fc:	4682      	mov	sl, r0
 80081fe:	b1a8      	cbz	r0, 800822c <__gethex+0x1f8>
 8008200:	1e7b      	subs	r3, r7, #1
 8008202:	1159      	asrs	r1, r3, #5
 8008204:	f003 021f 	and.w	r2, r3, #31
 8008208:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800820c:	f04f 0a01 	mov.w	sl, #1
 8008210:	fa0a f202 	lsl.w	r2, sl, r2
 8008214:	420a      	tst	r2, r1
 8008216:	d009      	beq.n	800822c <__gethex+0x1f8>
 8008218:	4553      	cmp	r3, sl
 800821a:	dd05      	ble.n	8008228 <__gethex+0x1f4>
 800821c:	1eb9      	subs	r1, r7, #2
 800821e:	4620      	mov	r0, r4
 8008220:	f000 fece 	bl	8008fc0 <__any_on>
 8008224:	2800      	cmp	r0, #0
 8008226:	d145      	bne.n	80082b4 <__gethex+0x280>
 8008228:	f04f 0a02 	mov.w	sl, #2
 800822c:	4639      	mov	r1, r7
 800822e:	4620      	mov	r0, r4
 8008230:	f7ff fe98 	bl	8007f64 <rshift>
 8008234:	443d      	add	r5, r7
 8008236:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800823a:	42ab      	cmp	r3, r5
 800823c:	da4c      	bge.n	80082d8 <__gethex+0x2a4>
 800823e:	ee18 0a10 	vmov	r0, s16
 8008242:	4621      	mov	r1, r4
 8008244:	f000 fa5c 	bl	8008700 <_Bfree>
 8008248:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800824a:	2300      	movs	r3, #0
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	27a3      	movs	r7, #163	; 0xa3
 8008250:	e785      	b.n	800815e <__gethex+0x12a>
 8008252:	1e73      	subs	r3, r6, #1
 8008254:	9a05      	ldr	r2, [sp, #20]
 8008256:	9303      	str	r3, [sp, #12]
 8008258:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800825c:	4293      	cmp	r3, r2
 800825e:	d019      	beq.n	8008294 <__gethex+0x260>
 8008260:	f1bb 0f20 	cmp.w	fp, #32
 8008264:	d107      	bne.n	8008276 <__gethex+0x242>
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	9a00      	ldr	r2, [sp, #0]
 800826a:	f843 2b04 	str.w	r2, [r3], #4
 800826e:	9302      	str	r3, [sp, #8]
 8008270:	2300      	movs	r3, #0
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	469b      	mov	fp, r3
 8008276:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800827a:	f7ff fec5 	bl	8008008 <__hexdig_fun>
 800827e:	9b00      	ldr	r3, [sp, #0]
 8008280:	f000 000f 	and.w	r0, r0, #15
 8008284:	fa00 f00b 	lsl.w	r0, r0, fp
 8008288:	4303      	orrs	r3, r0
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	f10b 0b04 	add.w	fp, fp, #4
 8008290:	9b03      	ldr	r3, [sp, #12]
 8008292:	e00d      	b.n	80082b0 <__gethex+0x27c>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	9a06      	ldr	r2, [sp, #24]
 8008298:	4413      	add	r3, r2
 800829a:	42bb      	cmp	r3, r7
 800829c:	d3e0      	bcc.n	8008260 <__gethex+0x22c>
 800829e:	4618      	mov	r0, r3
 80082a0:	9901      	ldr	r1, [sp, #4]
 80082a2:	9307      	str	r3, [sp, #28]
 80082a4:	4652      	mov	r2, sl
 80082a6:	f001 f917 	bl	80094d8 <strncmp>
 80082aa:	9b07      	ldr	r3, [sp, #28]
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d1d7      	bne.n	8008260 <__gethex+0x22c>
 80082b0:	461e      	mov	r6, r3
 80082b2:	e78b      	b.n	80081cc <__gethex+0x198>
 80082b4:	f04f 0a03 	mov.w	sl, #3
 80082b8:	e7b8      	b.n	800822c <__gethex+0x1f8>
 80082ba:	da0a      	bge.n	80082d2 <__gethex+0x29e>
 80082bc:	1a37      	subs	r7, r6, r0
 80082be:	4621      	mov	r1, r4
 80082c0:	ee18 0a10 	vmov	r0, s16
 80082c4:	463a      	mov	r2, r7
 80082c6:	f000 fc37 	bl	8008b38 <__lshift>
 80082ca:	1bed      	subs	r5, r5, r7
 80082cc:	4604      	mov	r4, r0
 80082ce:	f100 0914 	add.w	r9, r0, #20
 80082d2:	f04f 0a00 	mov.w	sl, #0
 80082d6:	e7ae      	b.n	8008236 <__gethex+0x202>
 80082d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80082dc:	42a8      	cmp	r0, r5
 80082de:	dd72      	ble.n	80083c6 <__gethex+0x392>
 80082e0:	1b45      	subs	r5, r0, r5
 80082e2:	42ae      	cmp	r6, r5
 80082e4:	dc36      	bgt.n	8008354 <__gethex+0x320>
 80082e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d02a      	beq.n	8008344 <__gethex+0x310>
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d02c      	beq.n	800834c <__gethex+0x318>
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d11c      	bne.n	8008330 <__gethex+0x2fc>
 80082f6:	42ae      	cmp	r6, r5
 80082f8:	d11a      	bne.n	8008330 <__gethex+0x2fc>
 80082fa:	2e01      	cmp	r6, #1
 80082fc:	d112      	bne.n	8008324 <__gethex+0x2f0>
 80082fe:	9a04      	ldr	r2, [sp, #16]
 8008300:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	2301      	movs	r3, #1
 8008308:	6123      	str	r3, [r4, #16]
 800830a:	f8c9 3000 	str.w	r3, [r9]
 800830e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008310:	2762      	movs	r7, #98	; 0x62
 8008312:	601c      	str	r4, [r3, #0]
 8008314:	e723      	b.n	800815e <__gethex+0x12a>
 8008316:	bf00      	nop
 8008318:	0800a390 	.word	0x0800a390
 800831c:	0800a318 	.word	0x0800a318
 8008320:	0800a329 	.word	0x0800a329
 8008324:	1e71      	subs	r1, r6, #1
 8008326:	4620      	mov	r0, r4
 8008328:	f000 fe4a 	bl	8008fc0 <__any_on>
 800832c:	2800      	cmp	r0, #0
 800832e:	d1e6      	bne.n	80082fe <__gethex+0x2ca>
 8008330:	ee18 0a10 	vmov	r0, s16
 8008334:	4621      	mov	r1, r4
 8008336:	f000 f9e3 	bl	8008700 <_Bfree>
 800833a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800833c:	2300      	movs	r3, #0
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	2750      	movs	r7, #80	; 0x50
 8008342:	e70c      	b.n	800815e <__gethex+0x12a>
 8008344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f2      	bne.n	8008330 <__gethex+0x2fc>
 800834a:	e7d8      	b.n	80082fe <__gethex+0x2ca>
 800834c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1d5      	bne.n	80082fe <__gethex+0x2ca>
 8008352:	e7ed      	b.n	8008330 <__gethex+0x2fc>
 8008354:	1e6f      	subs	r7, r5, #1
 8008356:	f1ba 0f00 	cmp.w	sl, #0
 800835a:	d131      	bne.n	80083c0 <__gethex+0x38c>
 800835c:	b127      	cbz	r7, 8008368 <__gethex+0x334>
 800835e:	4639      	mov	r1, r7
 8008360:	4620      	mov	r0, r4
 8008362:	f000 fe2d 	bl	8008fc0 <__any_on>
 8008366:	4682      	mov	sl, r0
 8008368:	117b      	asrs	r3, r7, #5
 800836a:	2101      	movs	r1, #1
 800836c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008370:	f007 071f 	and.w	r7, r7, #31
 8008374:	fa01 f707 	lsl.w	r7, r1, r7
 8008378:	421f      	tst	r7, r3
 800837a:	4629      	mov	r1, r5
 800837c:	4620      	mov	r0, r4
 800837e:	bf18      	it	ne
 8008380:	f04a 0a02 	orrne.w	sl, sl, #2
 8008384:	1b76      	subs	r6, r6, r5
 8008386:	f7ff fded 	bl	8007f64 <rshift>
 800838a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800838e:	2702      	movs	r7, #2
 8008390:	f1ba 0f00 	cmp.w	sl, #0
 8008394:	d048      	beq.n	8008428 <__gethex+0x3f4>
 8008396:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800839a:	2b02      	cmp	r3, #2
 800839c:	d015      	beq.n	80083ca <__gethex+0x396>
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d017      	beq.n	80083d2 <__gethex+0x39e>
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d109      	bne.n	80083ba <__gethex+0x386>
 80083a6:	f01a 0f02 	tst.w	sl, #2
 80083aa:	d006      	beq.n	80083ba <__gethex+0x386>
 80083ac:	f8d9 0000 	ldr.w	r0, [r9]
 80083b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80083b4:	f01a 0f01 	tst.w	sl, #1
 80083b8:	d10e      	bne.n	80083d8 <__gethex+0x3a4>
 80083ba:	f047 0710 	orr.w	r7, r7, #16
 80083be:	e033      	b.n	8008428 <__gethex+0x3f4>
 80083c0:	f04f 0a01 	mov.w	sl, #1
 80083c4:	e7d0      	b.n	8008368 <__gethex+0x334>
 80083c6:	2701      	movs	r7, #1
 80083c8:	e7e2      	b.n	8008390 <__gethex+0x35c>
 80083ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083cc:	f1c3 0301 	rsb	r3, r3, #1
 80083d0:	9315      	str	r3, [sp, #84]	; 0x54
 80083d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0f0      	beq.n	80083ba <__gethex+0x386>
 80083d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80083dc:	f104 0314 	add.w	r3, r4, #20
 80083e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80083e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80083e8:	f04f 0c00 	mov.w	ip, #0
 80083ec:	4618      	mov	r0, r3
 80083ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80083f6:	d01c      	beq.n	8008432 <__gethex+0x3fe>
 80083f8:	3201      	adds	r2, #1
 80083fa:	6002      	str	r2, [r0, #0]
 80083fc:	2f02      	cmp	r7, #2
 80083fe:	f104 0314 	add.w	r3, r4, #20
 8008402:	d13f      	bne.n	8008484 <__gethex+0x450>
 8008404:	f8d8 2000 	ldr.w	r2, [r8]
 8008408:	3a01      	subs	r2, #1
 800840a:	42b2      	cmp	r2, r6
 800840c:	d10a      	bne.n	8008424 <__gethex+0x3f0>
 800840e:	1171      	asrs	r1, r6, #5
 8008410:	2201      	movs	r2, #1
 8008412:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008416:	f006 061f 	and.w	r6, r6, #31
 800841a:	fa02 f606 	lsl.w	r6, r2, r6
 800841e:	421e      	tst	r6, r3
 8008420:	bf18      	it	ne
 8008422:	4617      	movne	r7, r2
 8008424:	f047 0720 	orr.w	r7, r7, #32
 8008428:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800842a:	601c      	str	r4, [r3, #0]
 800842c:	9b04      	ldr	r3, [sp, #16]
 800842e:	601d      	str	r5, [r3, #0]
 8008430:	e695      	b.n	800815e <__gethex+0x12a>
 8008432:	4299      	cmp	r1, r3
 8008434:	f843 cc04 	str.w	ip, [r3, #-4]
 8008438:	d8d8      	bhi.n	80083ec <__gethex+0x3b8>
 800843a:	68a3      	ldr	r3, [r4, #8]
 800843c:	459b      	cmp	fp, r3
 800843e:	db19      	blt.n	8008474 <__gethex+0x440>
 8008440:	6861      	ldr	r1, [r4, #4]
 8008442:	ee18 0a10 	vmov	r0, s16
 8008446:	3101      	adds	r1, #1
 8008448:	f000 f91a 	bl	8008680 <_Balloc>
 800844c:	4681      	mov	r9, r0
 800844e:	b918      	cbnz	r0, 8008458 <__gethex+0x424>
 8008450:	4b1a      	ldr	r3, [pc, #104]	; (80084bc <__gethex+0x488>)
 8008452:	4602      	mov	r2, r0
 8008454:	2184      	movs	r1, #132	; 0x84
 8008456:	e6a8      	b.n	80081aa <__gethex+0x176>
 8008458:	6922      	ldr	r2, [r4, #16]
 800845a:	3202      	adds	r2, #2
 800845c:	f104 010c 	add.w	r1, r4, #12
 8008460:	0092      	lsls	r2, r2, #2
 8008462:	300c      	adds	r0, #12
 8008464:	f7fd f9a2 	bl	80057ac <memcpy>
 8008468:	4621      	mov	r1, r4
 800846a:	ee18 0a10 	vmov	r0, s16
 800846e:	f000 f947 	bl	8008700 <_Bfree>
 8008472:	464c      	mov	r4, r9
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800847c:	6122      	str	r2, [r4, #16]
 800847e:	2201      	movs	r2, #1
 8008480:	615a      	str	r2, [r3, #20]
 8008482:	e7bb      	b.n	80083fc <__gethex+0x3c8>
 8008484:	6922      	ldr	r2, [r4, #16]
 8008486:	455a      	cmp	r2, fp
 8008488:	dd0b      	ble.n	80084a2 <__gethex+0x46e>
 800848a:	2101      	movs	r1, #1
 800848c:	4620      	mov	r0, r4
 800848e:	f7ff fd69 	bl	8007f64 <rshift>
 8008492:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008496:	3501      	adds	r5, #1
 8008498:	42ab      	cmp	r3, r5
 800849a:	f6ff aed0 	blt.w	800823e <__gethex+0x20a>
 800849e:	2701      	movs	r7, #1
 80084a0:	e7c0      	b.n	8008424 <__gethex+0x3f0>
 80084a2:	f016 061f 	ands.w	r6, r6, #31
 80084a6:	d0fa      	beq.n	800849e <__gethex+0x46a>
 80084a8:	4453      	add	r3, sl
 80084aa:	f1c6 0620 	rsb	r6, r6, #32
 80084ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80084b2:	f000 f9d7 	bl	8008864 <__hi0bits>
 80084b6:	42b0      	cmp	r0, r6
 80084b8:	dbe7      	blt.n	800848a <__gethex+0x456>
 80084ba:	e7f0      	b.n	800849e <__gethex+0x46a>
 80084bc:	0800a318 	.word	0x0800a318

080084c0 <L_shift>:
 80084c0:	f1c2 0208 	rsb	r2, r2, #8
 80084c4:	0092      	lsls	r2, r2, #2
 80084c6:	b570      	push	{r4, r5, r6, lr}
 80084c8:	f1c2 0620 	rsb	r6, r2, #32
 80084cc:	6843      	ldr	r3, [r0, #4]
 80084ce:	6804      	ldr	r4, [r0, #0]
 80084d0:	fa03 f506 	lsl.w	r5, r3, r6
 80084d4:	432c      	orrs	r4, r5
 80084d6:	40d3      	lsrs	r3, r2
 80084d8:	6004      	str	r4, [r0, #0]
 80084da:	f840 3f04 	str.w	r3, [r0, #4]!
 80084de:	4288      	cmp	r0, r1
 80084e0:	d3f4      	bcc.n	80084cc <L_shift+0xc>
 80084e2:	bd70      	pop	{r4, r5, r6, pc}

080084e4 <__match>:
 80084e4:	b530      	push	{r4, r5, lr}
 80084e6:	6803      	ldr	r3, [r0, #0]
 80084e8:	3301      	adds	r3, #1
 80084ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ee:	b914      	cbnz	r4, 80084f6 <__match+0x12>
 80084f0:	6003      	str	r3, [r0, #0]
 80084f2:	2001      	movs	r0, #1
 80084f4:	bd30      	pop	{r4, r5, pc}
 80084f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80084fe:	2d19      	cmp	r5, #25
 8008500:	bf98      	it	ls
 8008502:	3220      	addls	r2, #32
 8008504:	42a2      	cmp	r2, r4
 8008506:	d0f0      	beq.n	80084ea <__match+0x6>
 8008508:	2000      	movs	r0, #0
 800850a:	e7f3      	b.n	80084f4 <__match+0x10>

0800850c <__hexnan>:
 800850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008510:	680b      	ldr	r3, [r1, #0]
 8008512:	115e      	asrs	r6, r3, #5
 8008514:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008518:	f013 031f 	ands.w	r3, r3, #31
 800851c:	b087      	sub	sp, #28
 800851e:	bf18      	it	ne
 8008520:	3604      	addne	r6, #4
 8008522:	2500      	movs	r5, #0
 8008524:	1f37      	subs	r7, r6, #4
 8008526:	4690      	mov	r8, r2
 8008528:	6802      	ldr	r2, [r0, #0]
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	4682      	mov	sl, r0
 800852e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008532:	46b9      	mov	r9, r7
 8008534:	463c      	mov	r4, r7
 8008536:	9502      	str	r5, [sp, #8]
 8008538:	46ab      	mov	fp, r5
 800853a:	7851      	ldrb	r1, [r2, #1]
 800853c:	1c53      	adds	r3, r2, #1
 800853e:	9303      	str	r3, [sp, #12]
 8008540:	b341      	cbz	r1, 8008594 <__hexnan+0x88>
 8008542:	4608      	mov	r0, r1
 8008544:	9205      	str	r2, [sp, #20]
 8008546:	9104      	str	r1, [sp, #16]
 8008548:	f7ff fd5e 	bl	8008008 <__hexdig_fun>
 800854c:	2800      	cmp	r0, #0
 800854e:	d14f      	bne.n	80085f0 <__hexnan+0xe4>
 8008550:	9904      	ldr	r1, [sp, #16]
 8008552:	9a05      	ldr	r2, [sp, #20]
 8008554:	2920      	cmp	r1, #32
 8008556:	d818      	bhi.n	800858a <__hexnan+0x7e>
 8008558:	9b02      	ldr	r3, [sp, #8]
 800855a:	459b      	cmp	fp, r3
 800855c:	dd13      	ble.n	8008586 <__hexnan+0x7a>
 800855e:	454c      	cmp	r4, r9
 8008560:	d206      	bcs.n	8008570 <__hexnan+0x64>
 8008562:	2d07      	cmp	r5, #7
 8008564:	dc04      	bgt.n	8008570 <__hexnan+0x64>
 8008566:	462a      	mov	r2, r5
 8008568:	4649      	mov	r1, r9
 800856a:	4620      	mov	r0, r4
 800856c:	f7ff ffa8 	bl	80084c0 <L_shift>
 8008570:	4544      	cmp	r4, r8
 8008572:	d950      	bls.n	8008616 <__hexnan+0x10a>
 8008574:	2300      	movs	r3, #0
 8008576:	f1a4 0904 	sub.w	r9, r4, #4
 800857a:	f844 3c04 	str.w	r3, [r4, #-4]
 800857e:	f8cd b008 	str.w	fp, [sp, #8]
 8008582:	464c      	mov	r4, r9
 8008584:	461d      	mov	r5, r3
 8008586:	9a03      	ldr	r2, [sp, #12]
 8008588:	e7d7      	b.n	800853a <__hexnan+0x2e>
 800858a:	2929      	cmp	r1, #41	; 0x29
 800858c:	d156      	bne.n	800863c <__hexnan+0x130>
 800858e:	3202      	adds	r2, #2
 8008590:	f8ca 2000 	str.w	r2, [sl]
 8008594:	f1bb 0f00 	cmp.w	fp, #0
 8008598:	d050      	beq.n	800863c <__hexnan+0x130>
 800859a:	454c      	cmp	r4, r9
 800859c:	d206      	bcs.n	80085ac <__hexnan+0xa0>
 800859e:	2d07      	cmp	r5, #7
 80085a0:	dc04      	bgt.n	80085ac <__hexnan+0xa0>
 80085a2:	462a      	mov	r2, r5
 80085a4:	4649      	mov	r1, r9
 80085a6:	4620      	mov	r0, r4
 80085a8:	f7ff ff8a 	bl	80084c0 <L_shift>
 80085ac:	4544      	cmp	r4, r8
 80085ae:	d934      	bls.n	800861a <__hexnan+0x10e>
 80085b0:	f1a8 0204 	sub.w	r2, r8, #4
 80085b4:	4623      	mov	r3, r4
 80085b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80085ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80085be:	429f      	cmp	r7, r3
 80085c0:	d2f9      	bcs.n	80085b6 <__hexnan+0xaa>
 80085c2:	1b3b      	subs	r3, r7, r4
 80085c4:	f023 0303 	bic.w	r3, r3, #3
 80085c8:	3304      	adds	r3, #4
 80085ca:	3401      	adds	r4, #1
 80085cc:	3e03      	subs	r6, #3
 80085ce:	42b4      	cmp	r4, r6
 80085d0:	bf88      	it	hi
 80085d2:	2304      	movhi	r3, #4
 80085d4:	4443      	add	r3, r8
 80085d6:	2200      	movs	r2, #0
 80085d8:	f843 2b04 	str.w	r2, [r3], #4
 80085dc:	429f      	cmp	r7, r3
 80085de:	d2fb      	bcs.n	80085d8 <__hexnan+0xcc>
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	b91b      	cbnz	r3, 80085ec <__hexnan+0xe0>
 80085e4:	4547      	cmp	r7, r8
 80085e6:	d127      	bne.n	8008638 <__hexnan+0x12c>
 80085e8:	2301      	movs	r3, #1
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	2005      	movs	r0, #5
 80085ee:	e026      	b.n	800863e <__hexnan+0x132>
 80085f0:	3501      	adds	r5, #1
 80085f2:	2d08      	cmp	r5, #8
 80085f4:	f10b 0b01 	add.w	fp, fp, #1
 80085f8:	dd06      	ble.n	8008608 <__hexnan+0xfc>
 80085fa:	4544      	cmp	r4, r8
 80085fc:	d9c3      	bls.n	8008586 <__hexnan+0x7a>
 80085fe:	2300      	movs	r3, #0
 8008600:	f844 3c04 	str.w	r3, [r4, #-4]
 8008604:	2501      	movs	r5, #1
 8008606:	3c04      	subs	r4, #4
 8008608:	6822      	ldr	r2, [r4, #0]
 800860a:	f000 000f 	and.w	r0, r0, #15
 800860e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008612:	6022      	str	r2, [r4, #0]
 8008614:	e7b7      	b.n	8008586 <__hexnan+0x7a>
 8008616:	2508      	movs	r5, #8
 8008618:	e7b5      	b.n	8008586 <__hexnan+0x7a>
 800861a:	9b01      	ldr	r3, [sp, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0df      	beq.n	80085e0 <__hexnan+0xd4>
 8008620:	f04f 32ff 	mov.w	r2, #4294967295
 8008624:	f1c3 0320 	rsb	r3, r3, #32
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
 800862c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008630:	401a      	ands	r2, r3
 8008632:	f846 2c04 	str.w	r2, [r6, #-4]
 8008636:	e7d3      	b.n	80085e0 <__hexnan+0xd4>
 8008638:	3f04      	subs	r7, #4
 800863a:	e7d1      	b.n	80085e0 <__hexnan+0xd4>
 800863c:	2004      	movs	r0, #4
 800863e:	b007      	add	sp, #28
 8008640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008644 <_localeconv_r>:
 8008644:	4800      	ldr	r0, [pc, #0]	; (8008648 <_localeconv_r+0x4>)
 8008646:	4770      	bx	lr
 8008648:	20000164 	.word	0x20000164

0800864c <malloc>:
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <malloc+0xc>)
 800864e:	4601      	mov	r1, r0
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	f000 bd59 	b.w	8009108 <_malloc_r>
 8008656:	bf00      	nop
 8008658:	2000000c 	.word	0x2000000c

0800865c <__ascii_mbtowc>:
 800865c:	b082      	sub	sp, #8
 800865e:	b901      	cbnz	r1, 8008662 <__ascii_mbtowc+0x6>
 8008660:	a901      	add	r1, sp, #4
 8008662:	b142      	cbz	r2, 8008676 <__ascii_mbtowc+0x1a>
 8008664:	b14b      	cbz	r3, 800867a <__ascii_mbtowc+0x1e>
 8008666:	7813      	ldrb	r3, [r2, #0]
 8008668:	600b      	str	r3, [r1, #0]
 800866a:	7812      	ldrb	r2, [r2, #0]
 800866c:	1e10      	subs	r0, r2, #0
 800866e:	bf18      	it	ne
 8008670:	2001      	movne	r0, #1
 8008672:	b002      	add	sp, #8
 8008674:	4770      	bx	lr
 8008676:	4610      	mov	r0, r2
 8008678:	e7fb      	b.n	8008672 <__ascii_mbtowc+0x16>
 800867a:	f06f 0001 	mvn.w	r0, #1
 800867e:	e7f8      	b.n	8008672 <__ascii_mbtowc+0x16>

08008680 <_Balloc>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008684:	4604      	mov	r4, r0
 8008686:	460d      	mov	r5, r1
 8008688:	b976      	cbnz	r6, 80086a8 <_Balloc+0x28>
 800868a:	2010      	movs	r0, #16
 800868c:	f7ff ffde 	bl	800864c <malloc>
 8008690:	4602      	mov	r2, r0
 8008692:	6260      	str	r0, [r4, #36]	; 0x24
 8008694:	b920      	cbnz	r0, 80086a0 <_Balloc+0x20>
 8008696:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <_Balloc+0x78>)
 8008698:	4818      	ldr	r0, [pc, #96]	; (80086fc <_Balloc+0x7c>)
 800869a:	2166      	movs	r1, #102	; 0x66
 800869c:	f000 ff3e 	bl	800951c <__assert_func>
 80086a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a4:	6006      	str	r6, [r0, #0]
 80086a6:	60c6      	str	r6, [r0, #12]
 80086a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086aa:	68f3      	ldr	r3, [r6, #12]
 80086ac:	b183      	cbz	r3, 80086d0 <_Balloc+0x50>
 80086ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086b6:	b9b8      	cbnz	r0, 80086e8 <_Balloc+0x68>
 80086b8:	2101      	movs	r1, #1
 80086ba:	fa01 f605 	lsl.w	r6, r1, r5
 80086be:	1d72      	adds	r2, r6, #5
 80086c0:	0092      	lsls	r2, r2, #2
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 fc9d 	bl	8009002 <_calloc_r>
 80086c8:	b160      	cbz	r0, 80086e4 <_Balloc+0x64>
 80086ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086ce:	e00e      	b.n	80086ee <_Balloc+0x6e>
 80086d0:	2221      	movs	r2, #33	; 0x21
 80086d2:	2104      	movs	r1, #4
 80086d4:	4620      	mov	r0, r4
 80086d6:	f000 fc94 	bl	8009002 <_calloc_r>
 80086da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086dc:	60f0      	str	r0, [r6, #12]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e4      	bne.n	80086ae <_Balloc+0x2e>
 80086e4:	2000      	movs	r0, #0
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	6802      	ldr	r2, [r0, #0]
 80086ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086ee:	2300      	movs	r3, #0
 80086f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086f4:	e7f7      	b.n	80086e6 <_Balloc+0x66>
 80086f6:	bf00      	nop
 80086f8:	0800a2a6 	.word	0x0800a2a6
 80086fc:	0800a3a4 	.word	0x0800a3a4

08008700 <_Bfree>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008704:	4605      	mov	r5, r0
 8008706:	460c      	mov	r4, r1
 8008708:	b976      	cbnz	r6, 8008728 <_Bfree+0x28>
 800870a:	2010      	movs	r0, #16
 800870c:	f7ff ff9e 	bl	800864c <malloc>
 8008710:	4602      	mov	r2, r0
 8008712:	6268      	str	r0, [r5, #36]	; 0x24
 8008714:	b920      	cbnz	r0, 8008720 <_Bfree+0x20>
 8008716:	4b09      	ldr	r3, [pc, #36]	; (800873c <_Bfree+0x3c>)
 8008718:	4809      	ldr	r0, [pc, #36]	; (8008740 <_Bfree+0x40>)
 800871a:	218a      	movs	r1, #138	; 0x8a
 800871c:	f000 fefe 	bl	800951c <__assert_func>
 8008720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008724:	6006      	str	r6, [r0, #0]
 8008726:	60c6      	str	r6, [r0, #12]
 8008728:	b13c      	cbz	r4, 800873a <_Bfree+0x3a>
 800872a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800872c:	6862      	ldr	r2, [r4, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008734:	6021      	str	r1, [r4, #0]
 8008736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	0800a2a6 	.word	0x0800a2a6
 8008740:	0800a3a4 	.word	0x0800a3a4

08008744 <__multadd>:
 8008744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008748:	690d      	ldr	r5, [r1, #16]
 800874a:	4607      	mov	r7, r0
 800874c:	460c      	mov	r4, r1
 800874e:	461e      	mov	r6, r3
 8008750:	f101 0c14 	add.w	ip, r1, #20
 8008754:	2000      	movs	r0, #0
 8008756:	f8dc 3000 	ldr.w	r3, [ip]
 800875a:	b299      	uxth	r1, r3
 800875c:	fb02 6101 	mla	r1, r2, r1, r6
 8008760:	0c1e      	lsrs	r6, r3, #16
 8008762:	0c0b      	lsrs	r3, r1, #16
 8008764:	fb02 3306 	mla	r3, r2, r6, r3
 8008768:	b289      	uxth	r1, r1
 800876a:	3001      	adds	r0, #1
 800876c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008770:	4285      	cmp	r5, r0
 8008772:	f84c 1b04 	str.w	r1, [ip], #4
 8008776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800877a:	dcec      	bgt.n	8008756 <__multadd+0x12>
 800877c:	b30e      	cbz	r6, 80087c2 <__multadd+0x7e>
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	42ab      	cmp	r3, r5
 8008782:	dc19      	bgt.n	80087b8 <__multadd+0x74>
 8008784:	6861      	ldr	r1, [r4, #4]
 8008786:	4638      	mov	r0, r7
 8008788:	3101      	adds	r1, #1
 800878a:	f7ff ff79 	bl	8008680 <_Balloc>
 800878e:	4680      	mov	r8, r0
 8008790:	b928      	cbnz	r0, 800879e <__multadd+0x5a>
 8008792:	4602      	mov	r2, r0
 8008794:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <__multadd+0x84>)
 8008796:	480d      	ldr	r0, [pc, #52]	; (80087cc <__multadd+0x88>)
 8008798:	21b5      	movs	r1, #181	; 0xb5
 800879a:	f000 febf 	bl	800951c <__assert_func>
 800879e:	6922      	ldr	r2, [r4, #16]
 80087a0:	3202      	adds	r2, #2
 80087a2:	f104 010c 	add.w	r1, r4, #12
 80087a6:	0092      	lsls	r2, r2, #2
 80087a8:	300c      	adds	r0, #12
 80087aa:	f7fc ffff 	bl	80057ac <memcpy>
 80087ae:	4621      	mov	r1, r4
 80087b0:	4638      	mov	r0, r7
 80087b2:	f7ff ffa5 	bl	8008700 <_Bfree>
 80087b6:	4644      	mov	r4, r8
 80087b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087bc:	3501      	adds	r5, #1
 80087be:	615e      	str	r6, [r3, #20]
 80087c0:	6125      	str	r5, [r4, #16]
 80087c2:	4620      	mov	r0, r4
 80087c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c8:	0800a318 	.word	0x0800a318
 80087cc:	0800a3a4 	.word	0x0800a3a4

080087d0 <__s2b>:
 80087d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d4:	460c      	mov	r4, r1
 80087d6:	4615      	mov	r5, r2
 80087d8:	461f      	mov	r7, r3
 80087da:	2209      	movs	r2, #9
 80087dc:	3308      	adds	r3, #8
 80087de:	4606      	mov	r6, r0
 80087e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80087e4:	2100      	movs	r1, #0
 80087e6:	2201      	movs	r2, #1
 80087e8:	429a      	cmp	r2, r3
 80087ea:	db09      	blt.n	8008800 <__s2b+0x30>
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7ff ff47 	bl	8008680 <_Balloc>
 80087f2:	b940      	cbnz	r0, 8008806 <__s2b+0x36>
 80087f4:	4602      	mov	r2, r0
 80087f6:	4b19      	ldr	r3, [pc, #100]	; (800885c <__s2b+0x8c>)
 80087f8:	4819      	ldr	r0, [pc, #100]	; (8008860 <__s2b+0x90>)
 80087fa:	21ce      	movs	r1, #206	; 0xce
 80087fc:	f000 fe8e 	bl	800951c <__assert_func>
 8008800:	0052      	lsls	r2, r2, #1
 8008802:	3101      	adds	r1, #1
 8008804:	e7f0      	b.n	80087e8 <__s2b+0x18>
 8008806:	9b08      	ldr	r3, [sp, #32]
 8008808:	6143      	str	r3, [r0, #20]
 800880a:	2d09      	cmp	r5, #9
 800880c:	f04f 0301 	mov.w	r3, #1
 8008810:	6103      	str	r3, [r0, #16]
 8008812:	dd16      	ble.n	8008842 <__s2b+0x72>
 8008814:	f104 0909 	add.w	r9, r4, #9
 8008818:	46c8      	mov	r8, r9
 800881a:	442c      	add	r4, r5
 800881c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008820:	4601      	mov	r1, r0
 8008822:	3b30      	subs	r3, #48	; 0x30
 8008824:	220a      	movs	r2, #10
 8008826:	4630      	mov	r0, r6
 8008828:	f7ff ff8c 	bl	8008744 <__multadd>
 800882c:	45a0      	cmp	r8, r4
 800882e:	d1f5      	bne.n	800881c <__s2b+0x4c>
 8008830:	f1a5 0408 	sub.w	r4, r5, #8
 8008834:	444c      	add	r4, r9
 8008836:	1b2d      	subs	r5, r5, r4
 8008838:	1963      	adds	r3, r4, r5
 800883a:	42bb      	cmp	r3, r7
 800883c:	db04      	blt.n	8008848 <__s2b+0x78>
 800883e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008842:	340a      	adds	r4, #10
 8008844:	2509      	movs	r5, #9
 8008846:	e7f6      	b.n	8008836 <__s2b+0x66>
 8008848:	f814 3b01 	ldrb.w	r3, [r4], #1
 800884c:	4601      	mov	r1, r0
 800884e:	3b30      	subs	r3, #48	; 0x30
 8008850:	220a      	movs	r2, #10
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff ff76 	bl	8008744 <__multadd>
 8008858:	e7ee      	b.n	8008838 <__s2b+0x68>
 800885a:	bf00      	nop
 800885c:	0800a318 	.word	0x0800a318
 8008860:	0800a3a4 	.word	0x0800a3a4

08008864 <__hi0bits>:
 8008864:	0c03      	lsrs	r3, r0, #16
 8008866:	041b      	lsls	r3, r3, #16
 8008868:	b9d3      	cbnz	r3, 80088a0 <__hi0bits+0x3c>
 800886a:	0400      	lsls	r0, r0, #16
 800886c:	2310      	movs	r3, #16
 800886e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008872:	bf04      	itt	eq
 8008874:	0200      	lsleq	r0, r0, #8
 8008876:	3308      	addeq	r3, #8
 8008878:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800887c:	bf04      	itt	eq
 800887e:	0100      	lsleq	r0, r0, #4
 8008880:	3304      	addeq	r3, #4
 8008882:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008886:	bf04      	itt	eq
 8008888:	0080      	lsleq	r0, r0, #2
 800888a:	3302      	addeq	r3, #2
 800888c:	2800      	cmp	r0, #0
 800888e:	db05      	blt.n	800889c <__hi0bits+0x38>
 8008890:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008894:	f103 0301 	add.w	r3, r3, #1
 8008898:	bf08      	it	eq
 800889a:	2320      	moveq	r3, #32
 800889c:	4618      	mov	r0, r3
 800889e:	4770      	bx	lr
 80088a0:	2300      	movs	r3, #0
 80088a2:	e7e4      	b.n	800886e <__hi0bits+0xa>

080088a4 <__lo0bits>:
 80088a4:	6803      	ldr	r3, [r0, #0]
 80088a6:	f013 0207 	ands.w	r2, r3, #7
 80088aa:	4601      	mov	r1, r0
 80088ac:	d00b      	beq.n	80088c6 <__lo0bits+0x22>
 80088ae:	07da      	lsls	r2, r3, #31
 80088b0:	d423      	bmi.n	80088fa <__lo0bits+0x56>
 80088b2:	0798      	lsls	r0, r3, #30
 80088b4:	bf49      	itett	mi
 80088b6:	085b      	lsrmi	r3, r3, #1
 80088b8:	089b      	lsrpl	r3, r3, #2
 80088ba:	2001      	movmi	r0, #1
 80088bc:	600b      	strmi	r3, [r1, #0]
 80088be:	bf5c      	itt	pl
 80088c0:	600b      	strpl	r3, [r1, #0]
 80088c2:	2002      	movpl	r0, #2
 80088c4:	4770      	bx	lr
 80088c6:	b298      	uxth	r0, r3
 80088c8:	b9a8      	cbnz	r0, 80088f6 <__lo0bits+0x52>
 80088ca:	0c1b      	lsrs	r3, r3, #16
 80088cc:	2010      	movs	r0, #16
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	b90a      	cbnz	r2, 80088d6 <__lo0bits+0x32>
 80088d2:	3008      	adds	r0, #8
 80088d4:	0a1b      	lsrs	r3, r3, #8
 80088d6:	071a      	lsls	r2, r3, #28
 80088d8:	bf04      	itt	eq
 80088da:	091b      	lsreq	r3, r3, #4
 80088dc:	3004      	addeq	r0, #4
 80088de:	079a      	lsls	r2, r3, #30
 80088e0:	bf04      	itt	eq
 80088e2:	089b      	lsreq	r3, r3, #2
 80088e4:	3002      	addeq	r0, #2
 80088e6:	07da      	lsls	r2, r3, #31
 80088e8:	d403      	bmi.n	80088f2 <__lo0bits+0x4e>
 80088ea:	085b      	lsrs	r3, r3, #1
 80088ec:	f100 0001 	add.w	r0, r0, #1
 80088f0:	d005      	beq.n	80088fe <__lo0bits+0x5a>
 80088f2:	600b      	str	r3, [r1, #0]
 80088f4:	4770      	bx	lr
 80088f6:	4610      	mov	r0, r2
 80088f8:	e7e9      	b.n	80088ce <__lo0bits+0x2a>
 80088fa:	2000      	movs	r0, #0
 80088fc:	4770      	bx	lr
 80088fe:	2020      	movs	r0, #32
 8008900:	4770      	bx	lr
	...

08008904 <__i2b>:
 8008904:	b510      	push	{r4, lr}
 8008906:	460c      	mov	r4, r1
 8008908:	2101      	movs	r1, #1
 800890a:	f7ff feb9 	bl	8008680 <_Balloc>
 800890e:	4602      	mov	r2, r0
 8008910:	b928      	cbnz	r0, 800891e <__i2b+0x1a>
 8008912:	4b05      	ldr	r3, [pc, #20]	; (8008928 <__i2b+0x24>)
 8008914:	4805      	ldr	r0, [pc, #20]	; (800892c <__i2b+0x28>)
 8008916:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800891a:	f000 fdff 	bl	800951c <__assert_func>
 800891e:	2301      	movs	r3, #1
 8008920:	6144      	str	r4, [r0, #20]
 8008922:	6103      	str	r3, [r0, #16]
 8008924:	bd10      	pop	{r4, pc}
 8008926:	bf00      	nop
 8008928:	0800a318 	.word	0x0800a318
 800892c:	0800a3a4 	.word	0x0800a3a4

08008930 <__multiply>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	4691      	mov	r9, r2
 8008936:	690a      	ldr	r2, [r1, #16]
 8008938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800893c:	429a      	cmp	r2, r3
 800893e:	bfb8      	it	lt
 8008940:	460b      	movlt	r3, r1
 8008942:	460c      	mov	r4, r1
 8008944:	bfbc      	itt	lt
 8008946:	464c      	movlt	r4, r9
 8008948:	4699      	movlt	r9, r3
 800894a:	6927      	ldr	r7, [r4, #16]
 800894c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	6861      	ldr	r1, [r4, #4]
 8008954:	eb07 060a 	add.w	r6, r7, sl
 8008958:	42b3      	cmp	r3, r6
 800895a:	b085      	sub	sp, #20
 800895c:	bfb8      	it	lt
 800895e:	3101      	addlt	r1, #1
 8008960:	f7ff fe8e 	bl	8008680 <_Balloc>
 8008964:	b930      	cbnz	r0, 8008974 <__multiply+0x44>
 8008966:	4602      	mov	r2, r0
 8008968:	4b44      	ldr	r3, [pc, #272]	; (8008a7c <__multiply+0x14c>)
 800896a:	4845      	ldr	r0, [pc, #276]	; (8008a80 <__multiply+0x150>)
 800896c:	f240 115d 	movw	r1, #349	; 0x15d
 8008970:	f000 fdd4 	bl	800951c <__assert_func>
 8008974:	f100 0514 	add.w	r5, r0, #20
 8008978:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800897c:	462b      	mov	r3, r5
 800897e:	2200      	movs	r2, #0
 8008980:	4543      	cmp	r3, r8
 8008982:	d321      	bcc.n	80089c8 <__multiply+0x98>
 8008984:	f104 0314 	add.w	r3, r4, #20
 8008988:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800898c:	f109 0314 	add.w	r3, r9, #20
 8008990:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008994:	9202      	str	r2, [sp, #8]
 8008996:	1b3a      	subs	r2, r7, r4
 8008998:	3a15      	subs	r2, #21
 800899a:	f022 0203 	bic.w	r2, r2, #3
 800899e:	3204      	adds	r2, #4
 80089a0:	f104 0115 	add.w	r1, r4, #21
 80089a4:	428f      	cmp	r7, r1
 80089a6:	bf38      	it	cc
 80089a8:	2204      	movcc	r2, #4
 80089aa:	9201      	str	r2, [sp, #4]
 80089ac:	9a02      	ldr	r2, [sp, #8]
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d80c      	bhi.n	80089ce <__multiply+0x9e>
 80089b4:	2e00      	cmp	r6, #0
 80089b6:	dd03      	ble.n	80089c0 <__multiply+0x90>
 80089b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d05a      	beq.n	8008a76 <__multiply+0x146>
 80089c0:	6106      	str	r6, [r0, #16]
 80089c2:	b005      	add	sp, #20
 80089c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c8:	f843 2b04 	str.w	r2, [r3], #4
 80089cc:	e7d8      	b.n	8008980 <__multiply+0x50>
 80089ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80089d2:	f1ba 0f00 	cmp.w	sl, #0
 80089d6:	d024      	beq.n	8008a22 <__multiply+0xf2>
 80089d8:	f104 0e14 	add.w	lr, r4, #20
 80089dc:	46a9      	mov	r9, r5
 80089de:	f04f 0c00 	mov.w	ip, #0
 80089e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80089e6:	f8d9 1000 	ldr.w	r1, [r9]
 80089ea:	fa1f fb82 	uxth.w	fp, r2
 80089ee:	b289      	uxth	r1, r1
 80089f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80089f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80089f8:	f8d9 2000 	ldr.w	r2, [r9]
 80089fc:	4461      	add	r1, ip
 80089fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a02:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a0a:	b289      	uxth	r1, r1
 8008a0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a10:	4577      	cmp	r7, lr
 8008a12:	f849 1b04 	str.w	r1, [r9], #4
 8008a16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a1a:	d8e2      	bhi.n	80089e2 <__multiply+0xb2>
 8008a1c:	9a01      	ldr	r2, [sp, #4]
 8008a1e:	f845 c002 	str.w	ip, [r5, r2]
 8008a22:	9a03      	ldr	r2, [sp, #12]
 8008a24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	f1b9 0f00 	cmp.w	r9, #0
 8008a2e:	d020      	beq.n	8008a72 <__multiply+0x142>
 8008a30:	6829      	ldr	r1, [r5, #0]
 8008a32:	f104 0c14 	add.w	ip, r4, #20
 8008a36:	46ae      	mov	lr, r5
 8008a38:	f04f 0a00 	mov.w	sl, #0
 8008a3c:	f8bc b000 	ldrh.w	fp, [ip]
 8008a40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a44:	fb09 220b 	mla	r2, r9, fp, r2
 8008a48:	4492      	add	sl, r2
 8008a4a:	b289      	uxth	r1, r1
 8008a4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a50:	f84e 1b04 	str.w	r1, [lr], #4
 8008a54:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a58:	f8be 1000 	ldrh.w	r1, [lr]
 8008a5c:	0c12      	lsrs	r2, r2, #16
 8008a5e:	fb09 1102 	mla	r1, r9, r2, r1
 8008a62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a66:	4567      	cmp	r7, ip
 8008a68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a6c:	d8e6      	bhi.n	8008a3c <__multiply+0x10c>
 8008a6e:	9a01      	ldr	r2, [sp, #4]
 8008a70:	50a9      	str	r1, [r5, r2]
 8008a72:	3504      	adds	r5, #4
 8008a74:	e79a      	b.n	80089ac <__multiply+0x7c>
 8008a76:	3e01      	subs	r6, #1
 8008a78:	e79c      	b.n	80089b4 <__multiply+0x84>
 8008a7a:	bf00      	nop
 8008a7c:	0800a318 	.word	0x0800a318
 8008a80:	0800a3a4 	.word	0x0800a3a4

08008a84 <__pow5mult>:
 8008a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a88:	4615      	mov	r5, r2
 8008a8a:	f012 0203 	ands.w	r2, r2, #3
 8008a8e:	4606      	mov	r6, r0
 8008a90:	460f      	mov	r7, r1
 8008a92:	d007      	beq.n	8008aa4 <__pow5mult+0x20>
 8008a94:	4c25      	ldr	r4, [pc, #148]	; (8008b2c <__pow5mult+0xa8>)
 8008a96:	3a01      	subs	r2, #1
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a9e:	f7ff fe51 	bl	8008744 <__multadd>
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	10ad      	asrs	r5, r5, #2
 8008aa6:	d03d      	beq.n	8008b24 <__pow5mult+0xa0>
 8008aa8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008aaa:	b97c      	cbnz	r4, 8008acc <__pow5mult+0x48>
 8008aac:	2010      	movs	r0, #16
 8008aae:	f7ff fdcd 	bl	800864c <malloc>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	6270      	str	r0, [r6, #36]	; 0x24
 8008ab6:	b928      	cbnz	r0, 8008ac4 <__pow5mult+0x40>
 8008ab8:	4b1d      	ldr	r3, [pc, #116]	; (8008b30 <__pow5mult+0xac>)
 8008aba:	481e      	ldr	r0, [pc, #120]	; (8008b34 <__pow5mult+0xb0>)
 8008abc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ac0:	f000 fd2c 	bl	800951c <__assert_func>
 8008ac4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ac8:	6004      	str	r4, [r0, #0]
 8008aca:	60c4      	str	r4, [r0, #12]
 8008acc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ad0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ad4:	b94c      	cbnz	r4, 8008aea <__pow5mult+0x66>
 8008ad6:	f240 2171 	movw	r1, #625	; 0x271
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7ff ff12 	bl	8008904 <__i2b>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	6003      	str	r3, [r0, #0]
 8008aea:	f04f 0900 	mov.w	r9, #0
 8008aee:	07eb      	lsls	r3, r5, #31
 8008af0:	d50a      	bpl.n	8008b08 <__pow5mult+0x84>
 8008af2:	4639      	mov	r1, r7
 8008af4:	4622      	mov	r2, r4
 8008af6:	4630      	mov	r0, r6
 8008af8:	f7ff ff1a 	bl	8008930 <__multiply>
 8008afc:	4639      	mov	r1, r7
 8008afe:	4680      	mov	r8, r0
 8008b00:	4630      	mov	r0, r6
 8008b02:	f7ff fdfd 	bl	8008700 <_Bfree>
 8008b06:	4647      	mov	r7, r8
 8008b08:	106d      	asrs	r5, r5, #1
 8008b0a:	d00b      	beq.n	8008b24 <__pow5mult+0xa0>
 8008b0c:	6820      	ldr	r0, [r4, #0]
 8008b0e:	b938      	cbnz	r0, 8008b20 <__pow5mult+0x9c>
 8008b10:	4622      	mov	r2, r4
 8008b12:	4621      	mov	r1, r4
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7ff ff0b 	bl	8008930 <__multiply>
 8008b1a:	6020      	str	r0, [r4, #0]
 8008b1c:	f8c0 9000 	str.w	r9, [r0]
 8008b20:	4604      	mov	r4, r0
 8008b22:	e7e4      	b.n	8008aee <__pow5mult+0x6a>
 8008b24:	4638      	mov	r0, r7
 8008b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b2a:	bf00      	nop
 8008b2c:	0800a4f0 	.word	0x0800a4f0
 8008b30:	0800a2a6 	.word	0x0800a2a6
 8008b34:	0800a3a4 	.word	0x0800a3a4

08008b38 <__lshift>:
 8008b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	6849      	ldr	r1, [r1, #4]
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b46:	68a3      	ldr	r3, [r4, #8]
 8008b48:	4607      	mov	r7, r0
 8008b4a:	4691      	mov	r9, r2
 8008b4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b50:	f108 0601 	add.w	r6, r8, #1
 8008b54:	42b3      	cmp	r3, r6
 8008b56:	db0b      	blt.n	8008b70 <__lshift+0x38>
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f7ff fd91 	bl	8008680 <_Balloc>
 8008b5e:	4605      	mov	r5, r0
 8008b60:	b948      	cbnz	r0, 8008b76 <__lshift+0x3e>
 8008b62:	4602      	mov	r2, r0
 8008b64:	4b2a      	ldr	r3, [pc, #168]	; (8008c10 <__lshift+0xd8>)
 8008b66:	482b      	ldr	r0, [pc, #172]	; (8008c14 <__lshift+0xdc>)
 8008b68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b6c:	f000 fcd6 	bl	800951c <__assert_func>
 8008b70:	3101      	adds	r1, #1
 8008b72:	005b      	lsls	r3, r3, #1
 8008b74:	e7ee      	b.n	8008b54 <__lshift+0x1c>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f100 0114 	add.w	r1, r0, #20
 8008b7c:	f100 0210 	add.w	r2, r0, #16
 8008b80:	4618      	mov	r0, r3
 8008b82:	4553      	cmp	r3, sl
 8008b84:	db37      	blt.n	8008bf6 <__lshift+0xbe>
 8008b86:	6920      	ldr	r0, [r4, #16]
 8008b88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b8c:	f104 0314 	add.w	r3, r4, #20
 8008b90:	f019 091f 	ands.w	r9, r9, #31
 8008b94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b9c:	d02f      	beq.n	8008bfe <__lshift+0xc6>
 8008b9e:	f1c9 0e20 	rsb	lr, r9, #32
 8008ba2:	468a      	mov	sl, r1
 8008ba4:	f04f 0c00 	mov.w	ip, #0
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	fa02 f209 	lsl.w	r2, r2, r9
 8008bae:	ea42 020c 	orr.w	r2, r2, ip
 8008bb2:	f84a 2b04 	str.w	r2, [sl], #4
 8008bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bba:	4298      	cmp	r0, r3
 8008bbc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008bc0:	d8f2      	bhi.n	8008ba8 <__lshift+0x70>
 8008bc2:	1b03      	subs	r3, r0, r4
 8008bc4:	3b15      	subs	r3, #21
 8008bc6:	f023 0303 	bic.w	r3, r3, #3
 8008bca:	3304      	adds	r3, #4
 8008bcc:	f104 0215 	add.w	r2, r4, #21
 8008bd0:	4290      	cmp	r0, r2
 8008bd2:	bf38      	it	cc
 8008bd4:	2304      	movcc	r3, #4
 8008bd6:	f841 c003 	str.w	ip, [r1, r3]
 8008bda:	f1bc 0f00 	cmp.w	ip, #0
 8008bde:	d001      	beq.n	8008be4 <__lshift+0xac>
 8008be0:	f108 0602 	add.w	r6, r8, #2
 8008be4:	3e01      	subs	r6, #1
 8008be6:	4638      	mov	r0, r7
 8008be8:	612e      	str	r6, [r5, #16]
 8008bea:	4621      	mov	r1, r4
 8008bec:	f7ff fd88 	bl	8008700 <_Bfree>
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	e7c1      	b.n	8008b82 <__lshift+0x4a>
 8008bfe:	3904      	subs	r1, #4
 8008c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c04:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c08:	4298      	cmp	r0, r3
 8008c0a:	d8f9      	bhi.n	8008c00 <__lshift+0xc8>
 8008c0c:	e7ea      	b.n	8008be4 <__lshift+0xac>
 8008c0e:	bf00      	nop
 8008c10:	0800a318 	.word	0x0800a318
 8008c14:	0800a3a4 	.word	0x0800a3a4

08008c18 <__mcmp>:
 8008c18:	b530      	push	{r4, r5, lr}
 8008c1a:	6902      	ldr	r2, [r0, #16]
 8008c1c:	690c      	ldr	r4, [r1, #16]
 8008c1e:	1b12      	subs	r2, r2, r4
 8008c20:	d10e      	bne.n	8008c40 <__mcmp+0x28>
 8008c22:	f100 0314 	add.w	r3, r0, #20
 8008c26:	3114      	adds	r1, #20
 8008c28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c38:	42a5      	cmp	r5, r4
 8008c3a:	d003      	beq.n	8008c44 <__mcmp+0x2c>
 8008c3c:	d305      	bcc.n	8008c4a <__mcmp+0x32>
 8008c3e:	2201      	movs	r2, #1
 8008c40:	4610      	mov	r0, r2
 8008c42:	bd30      	pop	{r4, r5, pc}
 8008c44:	4283      	cmp	r3, r0
 8008c46:	d3f3      	bcc.n	8008c30 <__mcmp+0x18>
 8008c48:	e7fa      	b.n	8008c40 <__mcmp+0x28>
 8008c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c4e:	e7f7      	b.n	8008c40 <__mcmp+0x28>

08008c50 <__mdiff>:
 8008c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	460c      	mov	r4, r1
 8008c56:	4606      	mov	r6, r0
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4690      	mov	r8, r2
 8008c5e:	f7ff ffdb 	bl	8008c18 <__mcmp>
 8008c62:	1e05      	subs	r5, r0, #0
 8008c64:	d110      	bne.n	8008c88 <__mdiff+0x38>
 8008c66:	4629      	mov	r1, r5
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f7ff fd09 	bl	8008680 <_Balloc>
 8008c6e:	b930      	cbnz	r0, 8008c7e <__mdiff+0x2e>
 8008c70:	4b3a      	ldr	r3, [pc, #232]	; (8008d5c <__mdiff+0x10c>)
 8008c72:	4602      	mov	r2, r0
 8008c74:	f240 2132 	movw	r1, #562	; 0x232
 8008c78:	4839      	ldr	r0, [pc, #228]	; (8008d60 <__mdiff+0x110>)
 8008c7a:	f000 fc4f 	bl	800951c <__assert_func>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c88:	bfa4      	itt	ge
 8008c8a:	4643      	movge	r3, r8
 8008c8c:	46a0      	movge	r8, r4
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c94:	bfa6      	itte	ge
 8008c96:	461c      	movge	r4, r3
 8008c98:	2500      	movge	r5, #0
 8008c9a:	2501      	movlt	r5, #1
 8008c9c:	f7ff fcf0 	bl	8008680 <_Balloc>
 8008ca0:	b920      	cbnz	r0, 8008cac <__mdiff+0x5c>
 8008ca2:	4b2e      	ldr	r3, [pc, #184]	; (8008d5c <__mdiff+0x10c>)
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008caa:	e7e5      	b.n	8008c78 <__mdiff+0x28>
 8008cac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008cb0:	6926      	ldr	r6, [r4, #16]
 8008cb2:	60c5      	str	r5, [r0, #12]
 8008cb4:	f104 0914 	add.w	r9, r4, #20
 8008cb8:	f108 0514 	add.w	r5, r8, #20
 8008cbc:	f100 0e14 	add.w	lr, r0, #20
 8008cc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008cc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cc8:	f108 0210 	add.w	r2, r8, #16
 8008ccc:	46f2      	mov	sl, lr
 8008cce:	2100      	movs	r1, #0
 8008cd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008cd8:	fa1f f883 	uxth.w	r8, r3
 8008cdc:	fa11 f18b 	uxtah	r1, r1, fp
 8008ce0:	0c1b      	lsrs	r3, r3, #16
 8008ce2:	eba1 0808 	sub.w	r8, r1, r8
 8008ce6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008cee:	fa1f f888 	uxth.w	r8, r8
 8008cf2:	1419      	asrs	r1, r3, #16
 8008cf4:	454e      	cmp	r6, r9
 8008cf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008cfa:	f84a 3b04 	str.w	r3, [sl], #4
 8008cfe:	d8e7      	bhi.n	8008cd0 <__mdiff+0x80>
 8008d00:	1b33      	subs	r3, r6, r4
 8008d02:	3b15      	subs	r3, #21
 8008d04:	f023 0303 	bic.w	r3, r3, #3
 8008d08:	3304      	adds	r3, #4
 8008d0a:	3415      	adds	r4, #21
 8008d0c:	42a6      	cmp	r6, r4
 8008d0e:	bf38      	it	cc
 8008d10:	2304      	movcc	r3, #4
 8008d12:	441d      	add	r5, r3
 8008d14:	4473      	add	r3, lr
 8008d16:	469e      	mov	lr, r3
 8008d18:	462e      	mov	r6, r5
 8008d1a:	4566      	cmp	r6, ip
 8008d1c:	d30e      	bcc.n	8008d3c <__mdiff+0xec>
 8008d1e:	f10c 0203 	add.w	r2, ip, #3
 8008d22:	1b52      	subs	r2, r2, r5
 8008d24:	f022 0203 	bic.w	r2, r2, #3
 8008d28:	3d03      	subs	r5, #3
 8008d2a:	45ac      	cmp	ip, r5
 8008d2c:	bf38      	it	cc
 8008d2e:	2200      	movcc	r2, #0
 8008d30:	441a      	add	r2, r3
 8008d32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d36:	b17b      	cbz	r3, 8008d58 <__mdiff+0x108>
 8008d38:	6107      	str	r7, [r0, #16]
 8008d3a:	e7a3      	b.n	8008c84 <__mdiff+0x34>
 8008d3c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d40:	fa11 f288 	uxtah	r2, r1, r8
 8008d44:	1414      	asrs	r4, r2, #16
 8008d46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d4a:	b292      	uxth	r2, r2
 8008d4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d50:	f84e 2b04 	str.w	r2, [lr], #4
 8008d54:	1421      	asrs	r1, r4, #16
 8008d56:	e7e0      	b.n	8008d1a <__mdiff+0xca>
 8008d58:	3f01      	subs	r7, #1
 8008d5a:	e7ea      	b.n	8008d32 <__mdiff+0xe2>
 8008d5c:	0800a318 	.word	0x0800a318
 8008d60:	0800a3a4 	.word	0x0800a3a4

08008d64 <__ulp>:
 8008d64:	b082      	sub	sp, #8
 8008d66:	ed8d 0b00 	vstr	d0, [sp]
 8008d6a:	9b01      	ldr	r3, [sp, #4]
 8008d6c:	4912      	ldr	r1, [pc, #72]	; (8008db8 <__ulp+0x54>)
 8008d6e:	4019      	ands	r1, r3
 8008d70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008d74:	2900      	cmp	r1, #0
 8008d76:	dd05      	ble.n	8008d84 <__ulp+0x20>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	ec43 2b10 	vmov	d0, r2, r3
 8008d80:	b002      	add	sp, #8
 8008d82:	4770      	bx	lr
 8008d84:	4249      	negs	r1, r1
 8008d86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008d8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	f04f 0300 	mov.w	r3, #0
 8008d96:	da04      	bge.n	8008da2 <__ulp+0x3e>
 8008d98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008d9c:	fa41 f300 	asr.w	r3, r1, r0
 8008da0:	e7ec      	b.n	8008d7c <__ulp+0x18>
 8008da2:	f1a0 0114 	sub.w	r1, r0, #20
 8008da6:	291e      	cmp	r1, #30
 8008da8:	bfda      	itte	le
 8008daa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008dae:	fa20 f101 	lsrle.w	r1, r0, r1
 8008db2:	2101      	movgt	r1, #1
 8008db4:	460a      	mov	r2, r1
 8008db6:	e7e1      	b.n	8008d7c <__ulp+0x18>
 8008db8:	7ff00000 	.word	0x7ff00000

08008dbc <__b2d>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	6905      	ldr	r5, [r0, #16]
 8008dc0:	f100 0714 	add.w	r7, r0, #20
 8008dc4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008dc8:	1f2e      	subs	r6, r5, #4
 8008dca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f7ff fd48 	bl	8008864 <__hi0bits>
 8008dd4:	f1c0 0320 	rsb	r3, r0, #32
 8008dd8:	280a      	cmp	r0, #10
 8008dda:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008e58 <__b2d+0x9c>
 8008dde:	600b      	str	r3, [r1, #0]
 8008de0:	dc14      	bgt.n	8008e0c <__b2d+0x50>
 8008de2:	f1c0 0e0b 	rsb	lr, r0, #11
 8008de6:	fa24 f10e 	lsr.w	r1, r4, lr
 8008dea:	42b7      	cmp	r7, r6
 8008dec:	ea41 030c 	orr.w	r3, r1, ip
 8008df0:	bf34      	ite	cc
 8008df2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008df6:	2100      	movcs	r1, #0
 8008df8:	3015      	adds	r0, #21
 8008dfa:	fa04 f000 	lsl.w	r0, r4, r0
 8008dfe:	fa21 f10e 	lsr.w	r1, r1, lr
 8008e02:	ea40 0201 	orr.w	r2, r0, r1
 8008e06:	ec43 2b10 	vmov	d0, r2, r3
 8008e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e0c:	42b7      	cmp	r7, r6
 8008e0e:	bf3a      	itte	cc
 8008e10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008e14:	f1a5 0608 	subcc.w	r6, r5, #8
 8008e18:	2100      	movcs	r1, #0
 8008e1a:	380b      	subs	r0, #11
 8008e1c:	d017      	beq.n	8008e4e <__b2d+0x92>
 8008e1e:	f1c0 0c20 	rsb	ip, r0, #32
 8008e22:	fa04 f500 	lsl.w	r5, r4, r0
 8008e26:	42be      	cmp	r6, r7
 8008e28:	fa21 f40c 	lsr.w	r4, r1, ip
 8008e2c:	ea45 0504 	orr.w	r5, r5, r4
 8008e30:	bf8c      	ite	hi
 8008e32:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008e36:	2400      	movls	r4, #0
 8008e38:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008e3c:	fa01 f000 	lsl.w	r0, r1, r0
 8008e40:	fa24 f40c 	lsr.w	r4, r4, ip
 8008e44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e48:	ea40 0204 	orr.w	r2, r0, r4
 8008e4c:	e7db      	b.n	8008e06 <__b2d+0x4a>
 8008e4e:	ea44 030c 	orr.w	r3, r4, ip
 8008e52:	460a      	mov	r2, r1
 8008e54:	e7d7      	b.n	8008e06 <__b2d+0x4a>
 8008e56:	bf00      	nop
 8008e58:	3ff00000 	.word	0x3ff00000

08008e5c <__d2b>:
 8008e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e60:	4689      	mov	r9, r1
 8008e62:	2101      	movs	r1, #1
 8008e64:	ec57 6b10 	vmov	r6, r7, d0
 8008e68:	4690      	mov	r8, r2
 8008e6a:	f7ff fc09 	bl	8008680 <_Balloc>
 8008e6e:	4604      	mov	r4, r0
 8008e70:	b930      	cbnz	r0, 8008e80 <__d2b+0x24>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <__d2b+0xb0>)
 8008e76:	4826      	ldr	r0, [pc, #152]	; (8008f10 <__d2b+0xb4>)
 8008e78:	f240 310a 	movw	r1, #778	; 0x30a
 8008e7c:	f000 fb4e 	bl	800951c <__assert_func>
 8008e80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e88:	bb35      	cbnz	r5, 8008ed8 <__d2b+0x7c>
 8008e8a:	2e00      	cmp	r6, #0
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	d028      	beq.n	8008ee2 <__d2b+0x86>
 8008e90:	4668      	mov	r0, sp
 8008e92:	9600      	str	r6, [sp, #0]
 8008e94:	f7ff fd06 	bl	80088a4 <__lo0bits>
 8008e98:	9900      	ldr	r1, [sp, #0]
 8008e9a:	b300      	cbz	r0, 8008ede <__d2b+0x82>
 8008e9c:	9a01      	ldr	r2, [sp, #4]
 8008e9e:	f1c0 0320 	rsb	r3, r0, #32
 8008ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea6:	430b      	orrs	r3, r1
 8008ea8:	40c2      	lsrs	r2, r0
 8008eaa:	6163      	str	r3, [r4, #20]
 8008eac:	9201      	str	r2, [sp, #4]
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	61a3      	str	r3, [r4, #24]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bf14      	ite	ne
 8008eb6:	2202      	movne	r2, #2
 8008eb8:	2201      	moveq	r2, #1
 8008eba:	6122      	str	r2, [r4, #16]
 8008ebc:	b1d5      	cbz	r5, 8008ef4 <__d2b+0x98>
 8008ebe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ec2:	4405      	add	r5, r0
 8008ec4:	f8c9 5000 	str.w	r5, [r9]
 8008ec8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ecc:	f8c8 0000 	str.w	r0, [r8]
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	b003      	add	sp, #12
 8008ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008edc:	e7d5      	b.n	8008e8a <__d2b+0x2e>
 8008ede:	6161      	str	r1, [r4, #20]
 8008ee0:	e7e5      	b.n	8008eae <__d2b+0x52>
 8008ee2:	a801      	add	r0, sp, #4
 8008ee4:	f7ff fcde 	bl	80088a4 <__lo0bits>
 8008ee8:	9b01      	ldr	r3, [sp, #4]
 8008eea:	6163      	str	r3, [r4, #20]
 8008eec:	2201      	movs	r2, #1
 8008eee:	6122      	str	r2, [r4, #16]
 8008ef0:	3020      	adds	r0, #32
 8008ef2:	e7e3      	b.n	8008ebc <__d2b+0x60>
 8008ef4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008efc:	f8c9 0000 	str.w	r0, [r9]
 8008f00:	6918      	ldr	r0, [r3, #16]
 8008f02:	f7ff fcaf 	bl	8008864 <__hi0bits>
 8008f06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f0a:	e7df      	b.n	8008ecc <__d2b+0x70>
 8008f0c:	0800a318 	.word	0x0800a318
 8008f10:	0800a3a4 	.word	0x0800a3a4

08008f14 <__ratio>:
 8008f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	4688      	mov	r8, r1
 8008f1a:	4669      	mov	r1, sp
 8008f1c:	4681      	mov	r9, r0
 8008f1e:	f7ff ff4d 	bl	8008dbc <__b2d>
 8008f22:	a901      	add	r1, sp, #4
 8008f24:	4640      	mov	r0, r8
 8008f26:	ec55 4b10 	vmov	r4, r5, d0
 8008f2a:	f7ff ff47 	bl	8008dbc <__b2d>
 8008f2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008f36:	eba3 0c02 	sub.w	ip, r3, r2
 8008f3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f3e:	1a9b      	subs	r3, r3, r2
 8008f40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008f44:	ec51 0b10 	vmov	r0, r1, d0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	bfd6      	itet	le
 8008f4c:	460a      	movle	r2, r1
 8008f4e:	462a      	movgt	r2, r5
 8008f50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f54:	468b      	mov	fp, r1
 8008f56:	462f      	mov	r7, r5
 8008f58:	bfd4      	ite	le
 8008f5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008f5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f62:	4620      	mov	r0, r4
 8008f64:	ee10 2a10 	vmov	r2, s0
 8008f68:	465b      	mov	r3, fp
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	f7f7 fc6e 	bl	800084c <__aeabi_ddiv>
 8008f70:	ec41 0b10 	vmov	d0, r0, r1
 8008f74:	b003      	add	sp, #12
 8008f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f7a <__copybits>:
 8008f7a:	3901      	subs	r1, #1
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	1149      	asrs	r1, r1, #5
 8008f80:	6914      	ldr	r4, [r2, #16]
 8008f82:	3101      	adds	r1, #1
 8008f84:	f102 0314 	add.w	r3, r2, #20
 8008f88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f90:	1f05      	subs	r5, r0, #4
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	d30c      	bcc.n	8008fb0 <__copybits+0x36>
 8008f96:	1aa3      	subs	r3, r4, r2
 8008f98:	3b11      	subs	r3, #17
 8008f9a:	f023 0303 	bic.w	r3, r3, #3
 8008f9e:	3211      	adds	r2, #17
 8008fa0:	42a2      	cmp	r2, r4
 8008fa2:	bf88      	it	hi
 8008fa4:	2300      	movhi	r3, #0
 8008fa6:	4418      	add	r0, r3
 8008fa8:	2300      	movs	r3, #0
 8008faa:	4288      	cmp	r0, r1
 8008fac:	d305      	bcc.n	8008fba <__copybits+0x40>
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fb4:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fb8:	e7eb      	b.n	8008f92 <__copybits+0x18>
 8008fba:	f840 3b04 	str.w	r3, [r0], #4
 8008fbe:	e7f4      	b.n	8008faa <__copybits+0x30>

08008fc0 <__any_on>:
 8008fc0:	f100 0214 	add.w	r2, r0, #20
 8008fc4:	6900      	ldr	r0, [r0, #16]
 8008fc6:	114b      	asrs	r3, r1, #5
 8008fc8:	4298      	cmp	r0, r3
 8008fca:	b510      	push	{r4, lr}
 8008fcc:	db11      	blt.n	8008ff2 <__any_on+0x32>
 8008fce:	dd0a      	ble.n	8008fe6 <__any_on+0x26>
 8008fd0:	f011 011f 	ands.w	r1, r1, #31
 8008fd4:	d007      	beq.n	8008fe6 <__any_on+0x26>
 8008fd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008fda:	fa24 f001 	lsr.w	r0, r4, r1
 8008fde:	fa00 f101 	lsl.w	r1, r0, r1
 8008fe2:	428c      	cmp	r4, r1
 8008fe4:	d10b      	bne.n	8008ffe <__any_on+0x3e>
 8008fe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d803      	bhi.n	8008ff6 <__any_on+0x36>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	bd10      	pop	{r4, pc}
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	e7f7      	b.n	8008fe6 <__any_on+0x26>
 8008ff6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ffa:	2900      	cmp	r1, #0
 8008ffc:	d0f5      	beq.n	8008fea <__any_on+0x2a>
 8008ffe:	2001      	movs	r0, #1
 8009000:	e7f6      	b.n	8008ff0 <__any_on+0x30>

08009002 <_calloc_r>:
 8009002:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009004:	fba1 2402 	umull	r2, r4, r1, r2
 8009008:	b94c      	cbnz	r4, 800901e <_calloc_r+0x1c>
 800900a:	4611      	mov	r1, r2
 800900c:	9201      	str	r2, [sp, #4]
 800900e:	f000 f87b 	bl	8009108 <_malloc_r>
 8009012:	9a01      	ldr	r2, [sp, #4]
 8009014:	4605      	mov	r5, r0
 8009016:	b930      	cbnz	r0, 8009026 <_calloc_r+0x24>
 8009018:	4628      	mov	r0, r5
 800901a:	b003      	add	sp, #12
 800901c:	bd30      	pop	{r4, r5, pc}
 800901e:	220c      	movs	r2, #12
 8009020:	6002      	str	r2, [r0, #0]
 8009022:	2500      	movs	r5, #0
 8009024:	e7f8      	b.n	8009018 <_calloc_r+0x16>
 8009026:	4621      	mov	r1, r4
 8009028:	f7fc fbce 	bl	80057c8 <memset>
 800902c:	e7f4      	b.n	8009018 <_calloc_r+0x16>
	...

08009030 <_free_r>:
 8009030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009032:	2900      	cmp	r1, #0
 8009034:	d044      	beq.n	80090c0 <_free_r+0x90>
 8009036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800903a:	9001      	str	r0, [sp, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f1a1 0404 	sub.w	r4, r1, #4
 8009042:	bfb8      	it	lt
 8009044:	18e4      	addlt	r4, r4, r3
 8009046:	f000 fab3 	bl	80095b0 <__malloc_lock>
 800904a:	4a1e      	ldr	r2, [pc, #120]	; (80090c4 <_free_r+0x94>)
 800904c:	9801      	ldr	r0, [sp, #4]
 800904e:	6813      	ldr	r3, [r2, #0]
 8009050:	b933      	cbnz	r3, 8009060 <_free_r+0x30>
 8009052:	6063      	str	r3, [r4, #4]
 8009054:	6014      	str	r4, [r2, #0]
 8009056:	b003      	add	sp, #12
 8009058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800905c:	f000 baae 	b.w	80095bc <__malloc_unlock>
 8009060:	42a3      	cmp	r3, r4
 8009062:	d908      	bls.n	8009076 <_free_r+0x46>
 8009064:	6825      	ldr	r5, [r4, #0]
 8009066:	1961      	adds	r1, r4, r5
 8009068:	428b      	cmp	r3, r1
 800906a:	bf01      	itttt	eq
 800906c:	6819      	ldreq	r1, [r3, #0]
 800906e:	685b      	ldreq	r3, [r3, #4]
 8009070:	1949      	addeq	r1, r1, r5
 8009072:	6021      	streq	r1, [r4, #0]
 8009074:	e7ed      	b.n	8009052 <_free_r+0x22>
 8009076:	461a      	mov	r2, r3
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	b10b      	cbz	r3, 8009080 <_free_r+0x50>
 800907c:	42a3      	cmp	r3, r4
 800907e:	d9fa      	bls.n	8009076 <_free_r+0x46>
 8009080:	6811      	ldr	r1, [r2, #0]
 8009082:	1855      	adds	r5, r2, r1
 8009084:	42a5      	cmp	r5, r4
 8009086:	d10b      	bne.n	80090a0 <_free_r+0x70>
 8009088:	6824      	ldr	r4, [r4, #0]
 800908a:	4421      	add	r1, r4
 800908c:	1854      	adds	r4, r2, r1
 800908e:	42a3      	cmp	r3, r4
 8009090:	6011      	str	r1, [r2, #0]
 8009092:	d1e0      	bne.n	8009056 <_free_r+0x26>
 8009094:	681c      	ldr	r4, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	6053      	str	r3, [r2, #4]
 800909a:	4421      	add	r1, r4
 800909c:	6011      	str	r1, [r2, #0]
 800909e:	e7da      	b.n	8009056 <_free_r+0x26>
 80090a0:	d902      	bls.n	80090a8 <_free_r+0x78>
 80090a2:	230c      	movs	r3, #12
 80090a4:	6003      	str	r3, [r0, #0]
 80090a6:	e7d6      	b.n	8009056 <_free_r+0x26>
 80090a8:	6825      	ldr	r5, [r4, #0]
 80090aa:	1961      	adds	r1, r4, r5
 80090ac:	428b      	cmp	r3, r1
 80090ae:	bf04      	itt	eq
 80090b0:	6819      	ldreq	r1, [r3, #0]
 80090b2:	685b      	ldreq	r3, [r3, #4]
 80090b4:	6063      	str	r3, [r4, #4]
 80090b6:	bf04      	itt	eq
 80090b8:	1949      	addeq	r1, r1, r5
 80090ba:	6021      	streq	r1, [r4, #0]
 80090bc:	6054      	str	r4, [r2, #4]
 80090be:	e7ca      	b.n	8009056 <_free_r+0x26>
 80090c0:	b003      	add	sp, #12
 80090c2:	bd30      	pop	{r4, r5, pc}
 80090c4:	200002b4 	.word	0x200002b4

080090c8 <sbrk_aligned>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	4e0e      	ldr	r6, [pc, #56]	; (8009104 <sbrk_aligned+0x3c>)
 80090cc:	460c      	mov	r4, r1
 80090ce:	6831      	ldr	r1, [r6, #0]
 80090d0:	4605      	mov	r5, r0
 80090d2:	b911      	cbnz	r1, 80090da <sbrk_aligned+0x12>
 80090d4:	f000 f9f0 	bl	80094b8 <_sbrk_r>
 80090d8:	6030      	str	r0, [r6, #0]
 80090da:	4621      	mov	r1, r4
 80090dc:	4628      	mov	r0, r5
 80090de:	f000 f9eb 	bl	80094b8 <_sbrk_r>
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	d00a      	beq.n	80090fc <sbrk_aligned+0x34>
 80090e6:	1cc4      	adds	r4, r0, #3
 80090e8:	f024 0403 	bic.w	r4, r4, #3
 80090ec:	42a0      	cmp	r0, r4
 80090ee:	d007      	beq.n	8009100 <sbrk_aligned+0x38>
 80090f0:	1a21      	subs	r1, r4, r0
 80090f2:	4628      	mov	r0, r5
 80090f4:	f000 f9e0 	bl	80094b8 <_sbrk_r>
 80090f8:	3001      	adds	r0, #1
 80090fa:	d101      	bne.n	8009100 <sbrk_aligned+0x38>
 80090fc:	f04f 34ff 	mov.w	r4, #4294967295
 8009100:	4620      	mov	r0, r4
 8009102:	bd70      	pop	{r4, r5, r6, pc}
 8009104:	200002b8 	.word	0x200002b8

08009108 <_malloc_r>:
 8009108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	1ccd      	adds	r5, r1, #3
 800910e:	f025 0503 	bic.w	r5, r5, #3
 8009112:	3508      	adds	r5, #8
 8009114:	2d0c      	cmp	r5, #12
 8009116:	bf38      	it	cc
 8009118:	250c      	movcc	r5, #12
 800911a:	2d00      	cmp	r5, #0
 800911c:	4607      	mov	r7, r0
 800911e:	db01      	blt.n	8009124 <_malloc_r+0x1c>
 8009120:	42a9      	cmp	r1, r5
 8009122:	d905      	bls.n	8009130 <_malloc_r+0x28>
 8009124:	230c      	movs	r3, #12
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	2600      	movs	r6, #0
 800912a:	4630      	mov	r0, r6
 800912c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009130:	4e2e      	ldr	r6, [pc, #184]	; (80091ec <_malloc_r+0xe4>)
 8009132:	f000 fa3d 	bl	80095b0 <__malloc_lock>
 8009136:	6833      	ldr	r3, [r6, #0]
 8009138:	461c      	mov	r4, r3
 800913a:	bb34      	cbnz	r4, 800918a <_malloc_r+0x82>
 800913c:	4629      	mov	r1, r5
 800913e:	4638      	mov	r0, r7
 8009140:	f7ff ffc2 	bl	80090c8 <sbrk_aligned>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	4604      	mov	r4, r0
 8009148:	d14d      	bne.n	80091e6 <_malloc_r+0xde>
 800914a:	6834      	ldr	r4, [r6, #0]
 800914c:	4626      	mov	r6, r4
 800914e:	2e00      	cmp	r6, #0
 8009150:	d140      	bne.n	80091d4 <_malloc_r+0xcc>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	4631      	mov	r1, r6
 8009156:	4638      	mov	r0, r7
 8009158:	eb04 0803 	add.w	r8, r4, r3
 800915c:	f000 f9ac 	bl	80094b8 <_sbrk_r>
 8009160:	4580      	cmp	r8, r0
 8009162:	d13a      	bne.n	80091da <_malloc_r+0xd2>
 8009164:	6821      	ldr	r1, [r4, #0]
 8009166:	3503      	adds	r5, #3
 8009168:	1a6d      	subs	r5, r5, r1
 800916a:	f025 0503 	bic.w	r5, r5, #3
 800916e:	3508      	adds	r5, #8
 8009170:	2d0c      	cmp	r5, #12
 8009172:	bf38      	it	cc
 8009174:	250c      	movcc	r5, #12
 8009176:	4629      	mov	r1, r5
 8009178:	4638      	mov	r0, r7
 800917a:	f7ff ffa5 	bl	80090c8 <sbrk_aligned>
 800917e:	3001      	adds	r0, #1
 8009180:	d02b      	beq.n	80091da <_malloc_r+0xd2>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	442b      	add	r3, r5
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	e00e      	b.n	80091a8 <_malloc_r+0xa0>
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	1b52      	subs	r2, r2, r5
 800918e:	d41e      	bmi.n	80091ce <_malloc_r+0xc6>
 8009190:	2a0b      	cmp	r2, #11
 8009192:	d916      	bls.n	80091c2 <_malloc_r+0xba>
 8009194:	1961      	adds	r1, r4, r5
 8009196:	42a3      	cmp	r3, r4
 8009198:	6025      	str	r5, [r4, #0]
 800919a:	bf18      	it	ne
 800919c:	6059      	strne	r1, [r3, #4]
 800919e:	6863      	ldr	r3, [r4, #4]
 80091a0:	bf08      	it	eq
 80091a2:	6031      	streq	r1, [r6, #0]
 80091a4:	5162      	str	r2, [r4, r5]
 80091a6:	604b      	str	r3, [r1, #4]
 80091a8:	4638      	mov	r0, r7
 80091aa:	f104 060b 	add.w	r6, r4, #11
 80091ae:	f000 fa05 	bl	80095bc <__malloc_unlock>
 80091b2:	f026 0607 	bic.w	r6, r6, #7
 80091b6:	1d23      	adds	r3, r4, #4
 80091b8:	1af2      	subs	r2, r6, r3
 80091ba:	d0b6      	beq.n	800912a <_malloc_r+0x22>
 80091bc:	1b9b      	subs	r3, r3, r6
 80091be:	50a3      	str	r3, [r4, r2]
 80091c0:	e7b3      	b.n	800912a <_malloc_r+0x22>
 80091c2:	6862      	ldr	r2, [r4, #4]
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	bf0c      	ite	eq
 80091c8:	6032      	streq	r2, [r6, #0]
 80091ca:	605a      	strne	r2, [r3, #4]
 80091cc:	e7ec      	b.n	80091a8 <_malloc_r+0xa0>
 80091ce:	4623      	mov	r3, r4
 80091d0:	6864      	ldr	r4, [r4, #4]
 80091d2:	e7b2      	b.n	800913a <_malloc_r+0x32>
 80091d4:	4634      	mov	r4, r6
 80091d6:	6876      	ldr	r6, [r6, #4]
 80091d8:	e7b9      	b.n	800914e <_malloc_r+0x46>
 80091da:	230c      	movs	r3, #12
 80091dc:	603b      	str	r3, [r7, #0]
 80091de:	4638      	mov	r0, r7
 80091e0:	f000 f9ec 	bl	80095bc <__malloc_unlock>
 80091e4:	e7a1      	b.n	800912a <_malloc_r+0x22>
 80091e6:	6025      	str	r5, [r4, #0]
 80091e8:	e7de      	b.n	80091a8 <_malloc_r+0xa0>
 80091ea:	bf00      	nop
 80091ec:	200002b4 	.word	0x200002b4

080091f0 <__ssputs_r>:
 80091f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f4:	688e      	ldr	r6, [r1, #8]
 80091f6:	429e      	cmp	r6, r3
 80091f8:	4682      	mov	sl, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	4690      	mov	r8, r2
 80091fe:	461f      	mov	r7, r3
 8009200:	d838      	bhi.n	8009274 <__ssputs_r+0x84>
 8009202:	898a      	ldrh	r2, [r1, #12]
 8009204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009208:	d032      	beq.n	8009270 <__ssputs_r+0x80>
 800920a:	6825      	ldr	r5, [r4, #0]
 800920c:	6909      	ldr	r1, [r1, #16]
 800920e:	eba5 0901 	sub.w	r9, r5, r1
 8009212:	6965      	ldr	r5, [r4, #20]
 8009214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800921c:	3301      	adds	r3, #1
 800921e:	444b      	add	r3, r9
 8009220:	106d      	asrs	r5, r5, #1
 8009222:	429d      	cmp	r5, r3
 8009224:	bf38      	it	cc
 8009226:	461d      	movcc	r5, r3
 8009228:	0553      	lsls	r3, r2, #21
 800922a:	d531      	bpl.n	8009290 <__ssputs_r+0xa0>
 800922c:	4629      	mov	r1, r5
 800922e:	f7ff ff6b 	bl	8009108 <_malloc_r>
 8009232:	4606      	mov	r6, r0
 8009234:	b950      	cbnz	r0, 800924c <__ssputs_r+0x5c>
 8009236:	230c      	movs	r3, #12
 8009238:	f8ca 3000 	str.w	r3, [sl]
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924c:	6921      	ldr	r1, [r4, #16]
 800924e:	464a      	mov	r2, r9
 8009250:	f7fc faac 	bl	80057ac <memcpy>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800925a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	6126      	str	r6, [r4, #16]
 8009262:	6165      	str	r5, [r4, #20]
 8009264:	444e      	add	r6, r9
 8009266:	eba5 0509 	sub.w	r5, r5, r9
 800926a:	6026      	str	r6, [r4, #0]
 800926c:	60a5      	str	r5, [r4, #8]
 800926e:	463e      	mov	r6, r7
 8009270:	42be      	cmp	r6, r7
 8009272:	d900      	bls.n	8009276 <__ssputs_r+0x86>
 8009274:	463e      	mov	r6, r7
 8009276:	6820      	ldr	r0, [r4, #0]
 8009278:	4632      	mov	r2, r6
 800927a:	4641      	mov	r1, r8
 800927c:	f000 f97e 	bl	800957c <memmove>
 8009280:	68a3      	ldr	r3, [r4, #8]
 8009282:	1b9b      	subs	r3, r3, r6
 8009284:	60a3      	str	r3, [r4, #8]
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	4433      	add	r3, r6
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	2000      	movs	r0, #0
 800928e:	e7db      	b.n	8009248 <__ssputs_r+0x58>
 8009290:	462a      	mov	r2, r5
 8009292:	f000 f999 	bl	80095c8 <_realloc_r>
 8009296:	4606      	mov	r6, r0
 8009298:	2800      	cmp	r0, #0
 800929a:	d1e1      	bne.n	8009260 <__ssputs_r+0x70>
 800929c:	6921      	ldr	r1, [r4, #16]
 800929e:	4650      	mov	r0, sl
 80092a0:	f7ff fec6 	bl	8009030 <_free_r>
 80092a4:	e7c7      	b.n	8009236 <__ssputs_r+0x46>
	...

080092a8 <_svfiprintf_r>:
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	4698      	mov	r8, r3
 80092ae:	898b      	ldrh	r3, [r1, #12]
 80092b0:	061b      	lsls	r3, r3, #24
 80092b2:	b09d      	sub	sp, #116	; 0x74
 80092b4:	4607      	mov	r7, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	4614      	mov	r4, r2
 80092ba:	d50e      	bpl.n	80092da <_svfiprintf_r+0x32>
 80092bc:	690b      	ldr	r3, [r1, #16]
 80092be:	b963      	cbnz	r3, 80092da <_svfiprintf_r+0x32>
 80092c0:	2140      	movs	r1, #64	; 0x40
 80092c2:	f7ff ff21 	bl	8009108 <_malloc_r>
 80092c6:	6028      	str	r0, [r5, #0]
 80092c8:	6128      	str	r0, [r5, #16]
 80092ca:	b920      	cbnz	r0, 80092d6 <_svfiprintf_r+0x2e>
 80092cc:	230c      	movs	r3, #12
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	e0d1      	b.n	800947a <_svfiprintf_r+0x1d2>
 80092d6:	2340      	movs	r3, #64	; 0x40
 80092d8:	616b      	str	r3, [r5, #20]
 80092da:	2300      	movs	r3, #0
 80092dc:	9309      	str	r3, [sp, #36]	; 0x24
 80092de:	2320      	movs	r3, #32
 80092e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80092e8:	2330      	movs	r3, #48	; 0x30
 80092ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009494 <_svfiprintf_r+0x1ec>
 80092ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092f2:	f04f 0901 	mov.w	r9, #1
 80092f6:	4623      	mov	r3, r4
 80092f8:	469a      	mov	sl, r3
 80092fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092fe:	b10a      	cbz	r2, 8009304 <_svfiprintf_r+0x5c>
 8009300:	2a25      	cmp	r2, #37	; 0x25
 8009302:	d1f9      	bne.n	80092f8 <_svfiprintf_r+0x50>
 8009304:	ebba 0b04 	subs.w	fp, sl, r4
 8009308:	d00b      	beq.n	8009322 <_svfiprintf_r+0x7a>
 800930a:	465b      	mov	r3, fp
 800930c:	4622      	mov	r2, r4
 800930e:	4629      	mov	r1, r5
 8009310:	4638      	mov	r0, r7
 8009312:	f7ff ff6d 	bl	80091f0 <__ssputs_r>
 8009316:	3001      	adds	r0, #1
 8009318:	f000 80aa 	beq.w	8009470 <_svfiprintf_r+0x1c8>
 800931c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800931e:	445a      	add	r2, fp
 8009320:	9209      	str	r2, [sp, #36]	; 0x24
 8009322:	f89a 3000 	ldrb.w	r3, [sl]
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 80a2 	beq.w	8009470 <_svfiprintf_r+0x1c8>
 800932c:	2300      	movs	r3, #0
 800932e:	f04f 32ff 	mov.w	r2, #4294967295
 8009332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009336:	f10a 0a01 	add.w	sl, sl, #1
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	9307      	str	r3, [sp, #28]
 800933e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009342:	931a      	str	r3, [sp, #104]	; 0x68
 8009344:	4654      	mov	r4, sl
 8009346:	2205      	movs	r2, #5
 8009348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934c:	4851      	ldr	r0, [pc, #324]	; (8009494 <_svfiprintf_r+0x1ec>)
 800934e:	f7f6 ff47 	bl	80001e0 <memchr>
 8009352:	9a04      	ldr	r2, [sp, #16]
 8009354:	b9d8      	cbnz	r0, 800938e <_svfiprintf_r+0xe6>
 8009356:	06d0      	lsls	r0, r2, #27
 8009358:	bf44      	itt	mi
 800935a:	2320      	movmi	r3, #32
 800935c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009360:	0711      	lsls	r1, r2, #28
 8009362:	bf44      	itt	mi
 8009364:	232b      	movmi	r3, #43	; 0x2b
 8009366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800936a:	f89a 3000 	ldrb.w	r3, [sl]
 800936e:	2b2a      	cmp	r3, #42	; 0x2a
 8009370:	d015      	beq.n	800939e <_svfiprintf_r+0xf6>
 8009372:	9a07      	ldr	r2, [sp, #28]
 8009374:	4654      	mov	r4, sl
 8009376:	2000      	movs	r0, #0
 8009378:	f04f 0c0a 	mov.w	ip, #10
 800937c:	4621      	mov	r1, r4
 800937e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009382:	3b30      	subs	r3, #48	; 0x30
 8009384:	2b09      	cmp	r3, #9
 8009386:	d94e      	bls.n	8009426 <_svfiprintf_r+0x17e>
 8009388:	b1b0      	cbz	r0, 80093b8 <_svfiprintf_r+0x110>
 800938a:	9207      	str	r2, [sp, #28]
 800938c:	e014      	b.n	80093b8 <_svfiprintf_r+0x110>
 800938e:	eba0 0308 	sub.w	r3, r0, r8
 8009392:	fa09 f303 	lsl.w	r3, r9, r3
 8009396:	4313      	orrs	r3, r2
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	46a2      	mov	sl, r4
 800939c:	e7d2      	b.n	8009344 <_svfiprintf_r+0x9c>
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	1d19      	adds	r1, r3, #4
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	9103      	str	r1, [sp, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bfbb      	ittet	lt
 80093aa:	425b      	neglt	r3, r3
 80093ac:	f042 0202 	orrlt.w	r2, r2, #2
 80093b0:	9307      	strge	r3, [sp, #28]
 80093b2:	9307      	strlt	r3, [sp, #28]
 80093b4:	bfb8      	it	lt
 80093b6:	9204      	strlt	r2, [sp, #16]
 80093b8:	7823      	ldrb	r3, [r4, #0]
 80093ba:	2b2e      	cmp	r3, #46	; 0x2e
 80093bc:	d10c      	bne.n	80093d8 <_svfiprintf_r+0x130>
 80093be:	7863      	ldrb	r3, [r4, #1]
 80093c0:	2b2a      	cmp	r3, #42	; 0x2a
 80093c2:	d135      	bne.n	8009430 <_svfiprintf_r+0x188>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	1d1a      	adds	r2, r3, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	9203      	str	r2, [sp, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bfb8      	it	lt
 80093d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80093d4:	3402      	adds	r4, #2
 80093d6:	9305      	str	r3, [sp, #20]
 80093d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094a4 <_svfiprintf_r+0x1fc>
 80093dc:	7821      	ldrb	r1, [r4, #0]
 80093de:	2203      	movs	r2, #3
 80093e0:	4650      	mov	r0, sl
 80093e2:	f7f6 fefd 	bl	80001e0 <memchr>
 80093e6:	b140      	cbz	r0, 80093fa <_svfiprintf_r+0x152>
 80093e8:	2340      	movs	r3, #64	; 0x40
 80093ea:	eba0 000a 	sub.w	r0, r0, sl
 80093ee:	fa03 f000 	lsl.w	r0, r3, r0
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	4303      	orrs	r3, r0
 80093f6:	3401      	adds	r4, #1
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fe:	4826      	ldr	r0, [pc, #152]	; (8009498 <_svfiprintf_r+0x1f0>)
 8009400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009404:	2206      	movs	r2, #6
 8009406:	f7f6 feeb 	bl	80001e0 <memchr>
 800940a:	2800      	cmp	r0, #0
 800940c:	d038      	beq.n	8009480 <_svfiprintf_r+0x1d8>
 800940e:	4b23      	ldr	r3, [pc, #140]	; (800949c <_svfiprintf_r+0x1f4>)
 8009410:	bb1b      	cbnz	r3, 800945a <_svfiprintf_r+0x1b2>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	3307      	adds	r3, #7
 8009416:	f023 0307 	bic.w	r3, r3, #7
 800941a:	3308      	adds	r3, #8
 800941c:	9303      	str	r3, [sp, #12]
 800941e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009420:	4433      	add	r3, r6
 8009422:	9309      	str	r3, [sp, #36]	; 0x24
 8009424:	e767      	b.n	80092f6 <_svfiprintf_r+0x4e>
 8009426:	fb0c 3202 	mla	r2, ip, r2, r3
 800942a:	460c      	mov	r4, r1
 800942c:	2001      	movs	r0, #1
 800942e:	e7a5      	b.n	800937c <_svfiprintf_r+0xd4>
 8009430:	2300      	movs	r3, #0
 8009432:	3401      	adds	r4, #1
 8009434:	9305      	str	r3, [sp, #20]
 8009436:	4619      	mov	r1, r3
 8009438:	f04f 0c0a 	mov.w	ip, #10
 800943c:	4620      	mov	r0, r4
 800943e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009442:	3a30      	subs	r2, #48	; 0x30
 8009444:	2a09      	cmp	r2, #9
 8009446:	d903      	bls.n	8009450 <_svfiprintf_r+0x1a8>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0c5      	beq.n	80093d8 <_svfiprintf_r+0x130>
 800944c:	9105      	str	r1, [sp, #20]
 800944e:	e7c3      	b.n	80093d8 <_svfiprintf_r+0x130>
 8009450:	fb0c 2101 	mla	r1, ip, r1, r2
 8009454:	4604      	mov	r4, r0
 8009456:	2301      	movs	r3, #1
 8009458:	e7f0      	b.n	800943c <_svfiprintf_r+0x194>
 800945a:	ab03      	add	r3, sp, #12
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	462a      	mov	r2, r5
 8009460:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <_svfiprintf_r+0x1f8>)
 8009462:	a904      	add	r1, sp, #16
 8009464:	4638      	mov	r0, r7
 8009466:	f7fc fa57 	bl	8005918 <_printf_float>
 800946a:	1c42      	adds	r2, r0, #1
 800946c:	4606      	mov	r6, r0
 800946e:	d1d6      	bne.n	800941e <_svfiprintf_r+0x176>
 8009470:	89ab      	ldrh	r3, [r5, #12]
 8009472:	065b      	lsls	r3, r3, #25
 8009474:	f53f af2c 	bmi.w	80092d0 <_svfiprintf_r+0x28>
 8009478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800947a:	b01d      	add	sp, #116	; 0x74
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009480:	ab03      	add	r3, sp, #12
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	462a      	mov	r2, r5
 8009486:	4b06      	ldr	r3, [pc, #24]	; (80094a0 <_svfiprintf_r+0x1f8>)
 8009488:	a904      	add	r1, sp, #16
 800948a:	4638      	mov	r0, r7
 800948c:	f7fc fce8 	bl	8005e60 <_printf_i>
 8009490:	e7eb      	b.n	800946a <_svfiprintf_r+0x1c2>
 8009492:	bf00      	nop
 8009494:	0800a4fc 	.word	0x0800a4fc
 8009498:	0800a506 	.word	0x0800a506
 800949c:	08005919 	.word	0x08005919
 80094a0:	080091f1 	.word	0x080091f1
 80094a4:	0800a502 	.word	0x0800a502

080094a8 <nan>:
 80094a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80094b0 <nan+0x8>
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	00000000 	.word	0x00000000
 80094b4:	7ff80000 	.word	0x7ff80000

080094b8 <_sbrk_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d06      	ldr	r5, [pc, #24]	; (80094d4 <_sbrk_r+0x1c>)
 80094bc:	2300      	movs	r3, #0
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	f7f9 fcfa 	bl	8002ebc <_sbrk>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_sbrk_r+0x1a>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_sbrk_r+0x1a>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	200002bc 	.word	0x200002bc

080094d8 <strncmp>:
 80094d8:	b510      	push	{r4, lr}
 80094da:	b17a      	cbz	r2, 80094fc <strncmp+0x24>
 80094dc:	4603      	mov	r3, r0
 80094de:	3901      	subs	r1, #1
 80094e0:	1884      	adds	r4, r0, r2
 80094e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80094ea:	4290      	cmp	r0, r2
 80094ec:	d101      	bne.n	80094f2 <strncmp+0x1a>
 80094ee:	42a3      	cmp	r3, r4
 80094f0:	d101      	bne.n	80094f6 <strncmp+0x1e>
 80094f2:	1a80      	subs	r0, r0, r2
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d1f3      	bne.n	80094e2 <strncmp+0xa>
 80094fa:	e7fa      	b.n	80094f2 <strncmp+0x1a>
 80094fc:	4610      	mov	r0, r2
 80094fe:	e7f9      	b.n	80094f4 <strncmp+0x1c>

08009500 <__ascii_wctomb>:
 8009500:	b149      	cbz	r1, 8009516 <__ascii_wctomb+0x16>
 8009502:	2aff      	cmp	r2, #255	; 0xff
 8009504:	bf85      	ittet	hi
 8009506:	238a      	movhi	r3, #138	; 0x8a
 8009508:	6003      	strhi	r3, [r0, #0]
 800950a:	700a      	strbls	r2, [r1, #0]
 800950c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009510:	bf98      	it	ls
 8009512:	2001      	movls	r0, #1
 8009514:	4770      	bx	lr
 8009516:	4608      	mov	r0, r1
 8009518:	4770      	bx	lr
	...

0800951c <__assert_func>:
 800951c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800951e:	4614      	mov	r4, r2
 8009520:	461a      	mov	r2, r3
 8009522:	4b09      	ldr	r3, [pc, #36]	; (8009548 <__assert_func+0x2c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4605      	mov	r5, r0
 8009528:	68d8      	ldr	r0, [r3, #12]
 800952a:	b14c      	cbz	r4, 8009540 <__assert_func+0x24>
 800952c:	4b07      	ldr	r3, [pc, #28]	; (800954c <__assert_func+0x30>)
 800952e:	9100      	str	r1, [sp, #0]
 8009530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009534:	4906      	ldr	r1, [pc, #24]	; (8009550 <__assert_func+0x34>)
 8009536:	462b      	mov	r3, r5
 8009538:	f000 f80e 	bl	8009558 <fiprintf>
 800953c:	f000 fa8c 	bl	8009a58 <abort>
 8009540:	4b04      	ldr	r3, [pc, #16]	; (8009554 <__assert_func+0x38>)
 8009542:	461c      	mov	r4, r3
 8009544:	e7f3      	b.n	800952e <__assert_func+0x12>
 8009546:	bf00      	nop
 8009548:	2000000c 	.word	0x2000000c
 800954c:	0800a50d 	.word	0x0800a50d
 8009550:	0800a51a 	.word	0x0800a51a
 8009554:	0800a548 	.word	0x0800a548

08009558 <fiprintf>:
 8009558:	b40e      	push	{r1, r2, r3}
 800955a:	b503      	push	{r0, r1, lr}
 800955c:	4601      	mov	r1, r0
 800955e:	ab03      	add	r3, sp, #12
 8009560:	4805      	ldr	r0, [pc, #20]	; (8009578 <fiprintf+0x20>)
 8009562:	f853 2b04 	ldr.w	r2, [r3], #4
 8009566:	6800      	ldr	r0, [r0, #0]
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	f000 f885 	bl	8009678 <_vfiprintf_r>
 800956e:	b002      	add	sp, #8
 8009570:	f85d eb04 	ldr.w	lr, [sp], #4
 8009574:	b003      	add	sp, #12
 8009576:	4770      	bx	lr
 8009578:	2000000c 	.word	0x2000000c

0800957c <memmove>:
 800957c:	4288      	cmp	r0, r1
 800957e:	b510      	push	{r4, lr}
 8009580:	eb01 0402 	add.w	r4, r1, r2
 8009584:	d902      	bls.n	800958c <memmove+0x10>
 8009586:	4284      	cmp	r4, r0
 8009588:	4623      	mov	r3, r4
 800958a:	d807      	bhi.n	800959c <memmove+0x20>
 800958c:	1e43      	subs	r3, r0, #1
 800958e:	42a1      	cmp	r1, r4
 8009590:	d008      	beq.n	80095a4 <memmove+0x28>
 8009592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800959a:	e7f8      	b.n	800958e <memmove+0x12>
 800959c:	4402      	add	r2, r0
 800959e:	4601      	mov	r1, r0
 80095a0:	428a      	cmp	r2, r1
 80095a2:	d100      	bne.n	80095a6 <memmove+0x2a>
 80095a4:	bd10      	pop	{r4, pc}
 80095a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095ae:	e7f7      	b.n	80095a0 <memmove+0x24>

080095b0 <__malloc_lock>:
 80095b0:	4801      	ldr	r0, [pc, #4]	; (80095b8 <__malloc_lock+0x8>)
 80095b2:	f000 bc11 	b.w	8009dd8 <__retarget_lock_acquire_recursive>
 80095b6:	bf00      	nop
 80095b8:	200002c0 	.word	0x200002c0

080095bc <__malloc_unlock>:
 80095bc:	4801      	ldr	r0, [pc, #4]	; (80095c4 <__malloc_unlock+0x8>)
 80095be:	f000 bc0c 	b.w	8009dda <__retarget_lock_release_recursive>
 80095c2:	bf00      	nop
 80095c4:	200002c0 	.word	0x200002c0

080095c8 <_realloc_r>:
 80095c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095cc:	4680      	mov	r8, r0
 80095ce:	4614      	mov	r4, r2
 80095d0:	460e      	mov	r6, r1
 80095d2:	b921      	cbnz	r1, 80095de <_realloc_r+0x16>
 80095d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	4611      	mov	r1, r2
 80095da:	f7ff bd95 	b.w	8009108 <_malloc_r>
 80095de:	b92a      	cbnz	r2, 80095ec <_realloc_r+0x24>
 80095e0:	f7ff fd26 	bl	8009030 <_free_r>
 80095e4:	4625      	mov	r5, r4
 80095e6:	4628      	mov	r0, r5
 80095e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ec:	f000 fc5c 	bl	8009ea8 <_malloc_usable_size_r>
 80095f0:	4284      	cmp	r4, r0
 80095f2:	4607      	mov	r7, r0
 80095f4:	d802      	bhi.n	80095fc <_realloc_r+0x34>
 80095f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095fa:	d812      	bhi.n	8009622 <_realloc_r+0x5a>
 80095fc:	4621      	mov	r1, r4
 80095fe:	4640      	mov	r0, r8
 8009600:	f7ff fd82 	bl	8009108 <_malloc_r>
 8009604:	4605      	mov	r5, r0
 8009606:	2800      	cmp	r0, #0
 8009608:	d0ed      	beq.n	80095e6 <_realloc_r+0x1e>
 800960a:	42bc      	cmp	r4, r7
 800960c:	4622      	mov	r2, r4
 800960e:	4631      	mov	r1, r6
 8009610:	bf28      	it	cs
 8009612:	463a      	movcs	r2, r7
 8009614:	f7fc f8ca 	bl	80057ac <memcpy>
 8009618:	4631      	mov	r1, r6
 800961a:	4640      	mov	r0, r8
 800961c:	f7ff fd08 	bl	8009030 <_free_r>
 8009620:	e7e1      	b.n	80095e6 <_realloc_r+0x1e>
 8009622:	4635      	mov	r5, r6
 8009624:	e7df      	b.n	80095e6 <_realloc_r+0x1e>

08009626 <__sfputc_r>:
 8009626:	6893      	ldr	r3, [r2, #8]
 8009628:	3b01      	subs	r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	b410      	push	{r4}
 800962e:	6093      	str	r3, [r2, #8]
 8009630:	da08      	bge.n	8009644 <__sfputc_r+0x1e>
 8009632:	6994      	ldr	r4, [r2, #24]
 8009634:	42a3      	cmp	r3, r4
 8009636:	db01      	blt.n	800963c <__sfputc_r+0x16>
 8009638:	290a      	cmp	r1, #10
 800963a:	d103      	bne.n	8009644 <__sfputc_r+0x1e>
 800963c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009640:	f000 b94a 	b.w	80098d8 <__swbuf_r>
 8009644:	6813      	ldr	r3, [r2, #0]
 8009646:	1c58      	adds	r0, r3, #1
 8009648:	6010      	str	r0, [r2, #0]
 800964a:	7019      	strb	r1, [r3, #0]
 800964c:	4608      	mov	r0, r1
 800964e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009652:	4770      	bx	lr

08009654 <__sfputs_r>:
 8009654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009656:	4606      	mov	r6, r0
 8009658:	460f      	mov	r7, r1
 800965a:	4614      	mov	r4, r2
 800965c:	18d5      	adds	r5, r2, r3
 800965e:	42ac      	cmp	r4, r5
 8009660:	d101      	bne.n	8009666 <__sfputs_r+0x12>
 8009662:	2000      	movs	r0, #0
 8009664:	e007      	b.n	8009676 <__sfputs_r+0x22>
 8009666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966a:	463a      	mov	r2, r7
 800966c:	4630      	mov	r0, r6
 800966e:	f7ff ffda 	bl	8009626 <__sfputc_r>
 8009672:	1c43      	adds	r3, r0, #1
 8009674:	d1f3      	bne.n	800965e <__sfputs_r+0xa>
 8009676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009678 <_vfiprintf_r>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	460d      	mov	r5, r1
 800967e:	b09d      	sub	sp, #116	; 0x74
 8009680:	4614      	mov	r4, r2
 8009682:	4698      	mov	r8, r3
 8009684:	4606      	mov	r6, r0
 8009686:	b118      	cbz	r0, 8009690 <_vfiprintf_r+0x18>
 8009688:	6983      	ldr	r3, [r0, #24]
 800968a:	b90b      	cbnz	r3, 8009690 <_vfiprintf_r+0x18>
 800968c:	f000 fb06 	bl	8009c9c <__sinit>
 8009690:	4b89      	ldr	r3, [pc, #548]	; (80098b8 <_vfiprintf_r+0x240>)
 8009692:	429d      	cmp	r5, r3
 8009694:	d11b      	bne.n	80096ce <_vfiprintf_r+0x56>
 8009696:	6875      	ldr	r5, [r6, #4]
 8009698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800969a:	07d9      	lsls	r1, r3, #31
 800969c:	d405      	bmi.n	80096aa <_vfiprintf_r+0x32>
 800969e:	89ab      	ldrh	r3, [r5, #12]
 80096a0:	059a      	lsls	r2, r3, #22
 80096a2:	d402      	bmi.n	80096aa <_vfiprintf_r+0x32>
 80096a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096a6:	f000 fb97 	bl	8009dd8 <__retarget_lock_acquire_recursive>
 80096aa:	89ab      	ldrh	r3, [r5, #12]
 80096ac:	071b      	lsls	r3, r3, #28
 80096ae:	d501      	bpl.n	80096b4 <_vfiprintf_r+0x3c>
 80096b0:	692b      	ldr	r3, [r5, #16]
 80096b2:	b9eb      	cbnz	r3, 80096f0 <_vfiprintf_r+0x78>
 80096b4:	4629      	mov	r1, r5
 80096b6:	4630      	mov	r0, r6
 80096b8:	f000 f960 	bl	800997c <__swsetup_r>
 80096bc:	b1c0      	cbz	r0, 80096f0 <_vfiprintf_r+0x78>
 80096be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096c0:	07dc      	lsls	r4, r3, #31
 80096c2:	d50e      	bpl.n	80096e2 <_vfiprintf_r+0x6a>
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295
 80096c8:	b01d      	add	sp, #116	; 0x74
 80096ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ce:	4b7b      	ldr	r3, [pc, #492]	; (80098bc <_vfiprintf_r+0x244>)
 80096d0:	429d      	cmp	r5, r3
 80096d2:	d101      	bne.n	80096d8 <_vfiprintf_r+0x60>
 80096d4:	68b5      	ldr	r5, [r6, #8]
 80096d6:	e7df      	b.n	8009698 <_vfiprintf_r+0x20>
 80096d8:	4b79      	ldr	r3, [pc, #484]	; (80098c0 <_vfiprintf_r+0x248>)
 80096da:	429d      	cmp	r5, r3
 80096dc:	bf08      	it	eq
 80096de:	68f5      	ldreq	r5, [r6, #12]
 80096e0:	e7da      	b.n	8009698 <_vfiprintf_r+0x20>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	0598      	lsls	r0, r3, #22
 80096e6:	d4ed      	bmi.n	80096c4 <_vfiprintf_r+0x4c>
 80096e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ea:	f000 fb76 	bl	8009dda <__retarget_lock_release_recursive>
 80096ee:	e7e9      	b.n	80096c4 <_vfiprintf_r+0x4c>
 80096f0:	2300      	movs	r3, #0
 80096f2:	9309      	str	r3, [sp, #36]	; 0x24
 80096f4:	2320      	movs	r3, #32
 80096f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80096fe:	2330      	movs	r3, #48	; 0x30
 8009700:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098c4 <_vfiprintf_r+0x24c>
 8009704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009708:	f04f 0901 	mov.w	r9, #1
 800970c:	4623      	mov	r3, r4
 800970e:	469a      	mov	sl, r3
 8009710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009714:	b10a      	cbz	r2, 800971a <_vfiprintf_r+0xa2>
 8009716:	2a25      	cmp	r2, #37	; 0x25
 8009718:	d1f9      	bne.n	800970e <_vfiprintf_r+0x96>
 800971a:	ebba 0b04 	subs.w	fp, sl, r4
 800971e:	d00b      	beq.n	8009738 <_vfiprintf_r+0xc0>
 8009720:	465b      	mov	r3, fp
 8009722:	4622      	mov	r2, r4
 8009724:	4629      	mov	r1, r5
 8009726:	4630      	mov	r0, r6
 8009728:	f7ff ff94 	bl	8009654 <__sfputs_r>
 800972c:	3001      	adds	r0, #1
 800972e:	f000 80aa 	beq.w	8009886 <_vfiprintf_r+0x20e>
 8009732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009734:	445a      	add	r2, fp
 8009736:	9209      	str	r2, [sp, #36]	; 0x24
 8009738:	f89a 3000 	ldrb.w	r3, [sl]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 80a2 	beq.w	8009886 <_vfiprintf_r+0x20e>
 8009742:	2300      	movs	r3, #0
 8009744:	f04f 32ff 	mov.w	r2, #4294967295
 8009748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800974c:	f10a 0a01 	add.w	sl, sl, #1
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	9307      	str	r3, [sp, #28]
 8009754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009758:	931a      	str	r3, [sp, #104]	; 0x68
 800975a:	4654      	mov	r4, sl
 800975c:	2205      	movs	r2, #5
 800975e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009762:	4858      	ldr	r0, [pc, #352]	; (80098c4 <_vfiprintf_r+0x24c>)
 8009764:	f7f6 fd3c 	bl	80001e0 <memchr>
 8009768:	9a04      	ldr	r2, [sp, #16]
 800976a:	b9d8      	cbnz	r0, 80097a4 <_vfiprintf_r+0x12c>
 800976c:	06d1      	lsls	r1, r2, #27
 800976e:	bf44      	itt	mi
 8009770:	2320      	movmi	r3, #32
 8009772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009776:	0713      	lsls	r3, r2, #28
 8009778:	bf44      	itt	mi
 800977a:	232b      	movmi	r3, #43	; 0x2b
 800977c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009780:	f89a 3000 	ldrb.w	r3, [sl]
 8009784:	2b2a      	cmp	r3, #42	; 0x2a
 8009786:	d015      	beq.n	80097b4 <_vfiprintf_r+0x13c>
 8009788:	9a07      	ldr	r2, [sp, #28]
 800978a:	4654      	mov	r4, sl
 800978c:	2000      	movs	r0, #0
 800978e:	f04f 0c0a 	mov.w	ip, #10
 8009792:	4621      	mov	r1, r4
 8009794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009798:	3b30      	subs	r3, #48	; 0x30
 800979a:	2b09      	cmp	r3, #9
 800979c:	d94e      	bls.n	800983c <_vfiprintf_r+0x1c4>
 800979e:	b1b0      	cbz	r0, 80097ce <_vfiprintf_r+0x156>
 80097a0:	9207      	str	r2, [sp, #28]
 80097a2:	e014      	b.n	80097ce <_vfiprintf_r+0x156>
 80097a4:	eba0 0308 	sub.w	r3, r0, r8
 80097a8:	fa09 f303 	lsl.w	r3, r9, r3
 80097ac:	4313      	orrs	r3, r2
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	46a2      	mov	sl, r4
 80097b2:	e7d2      	b.n	800975a <_vfiprintf_r+0xe2>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	1d19      	adds	r1, r3, #4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	9103      	str	r1, [sp, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bfbb      	ittet	lt
 80097c0:	425b      	neglt	r3, r3
 80097c2:	f042 0202 	orrlt.w	r2, r2, #2
 80097c6:	9307      	strge	r3, [sp, #28]
 80097c8:	9307      	strlt	r3, [sp, #28]
 80097ca:	bfb8      	it	lt
 80097cc:	9204      	strlt	r2, [sp, #16]
 80097ce:	7823      	ldrb	r3, [r4, #0]
 80097d0:	2b2e      	cmp	r3, #46	; 0x2e
 80097d2:	d10c      	bne.n	80097ee <_vfiprintf_r+0x176>
 80097d4:	7863      	ldrb	r3, [r4, #1]
 80097d6:	2b2a      	cmp	r3, #42	; 0x2a
 80097d8:	d135      	bne.n	8009846 <_vfiprintf_r+0x1ce>
 80097da:	9b03      	ldr	r3, [sp, #12]
 80097dc:	1d1a      	adds	r2, r3, #4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	9203      	str	r2, [sp, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	bfb8      	it	lt
 80097e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80097ea:	3402      	adds	r4, #2
 80097ec:	9305      	str	r3, [sp, #20]
 80097ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098d4 <_vfiprintf_r+0x25c>
 80097f2:	7821      	ldrb	r1, [r4, #0]
 80097f4:	2203      	movs	r2, #3
 80097f6:	4650      	mov	r0, sl
 80097f8:	f7f6 fcf2 	bl	80001e0 <memchr>
 80097fc:	b140      	cbz	r0, 8009810 <_vfiprintf_r+0x198>
 80097fe:	2340      	movs	r3, #64	; 0x40
 8009800:	eba0 000a 	sub.w	r0, r0, sl
 8009804:	fa03 f000 	lsl.w	r0, r3, r0
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	4303      	orrs	r3, r0
 800980c:	3401      	adds	r4, #1
 800980e:	9304      	str	r3, [sp, #16]
 8009810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009814:	482c      	ldr	r0, [pc, #176]	; (80098c8 <_vfiprintf_r+0x250>)
 8009816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800981a:	2206      	movs	r2, #6
 800981c:	f7f6 fce0 	bl	80001e0 <memchr>
 8009820:	2800      	cmp	r0, #0
 8009822:	d03f      	beq.n	80098a4 <_vfiprintf_r+0x22c>
 8009824:	4b29      	ldr	r3, [pc, #164]	; (80098cc <_vfiprintf_r+0x254>)
 8009826:	bb1b      	cbnz	r3, 8009870 <_vfiprintf_r+0x1f8>
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	3307      	adds	r3, #7
 800982c:	f023 0307 	bic.w	r3, r3, #7
 8009830:	3308      	adds	r3, #8
 8009832:	9303      	str	r3, [sp, #12]
 8009834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009836:	443b      	add	r3, r7
 8009838:	9309      	str	r3, [sp, #36]	; 0x24
 800983a:	e767      	b.n	800970c <_vfiprintf_r+0x94>
 800983c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009840:	460c      	mov	r4, r1
 8009842:	2001      	movs	r0, #1
 8009844:	e7a5      	b.n	8009792 <_vfiprintf_r+0x11a>
 8009846:	2300      	movs	r3, #0
 8009848:	3401      	adds	r4, #1
 800984a:	9305      	str	r3, [sp, #20]
 800984c:	4619      	mov	r1, r3
 800984e:	f04f 0c0a 	mov.w	ip, #10
 8009852:	4620      	mov	r0, r4
 8009854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009858:	3a30      	subs	r2, #48	; 0x30
 800985a:	2a09      	cmp	r2, #9
 800985c:	d903      	bls.n	8009866 <_vfiprintf_r+0x1ee>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0c5      	beq.n	80097ee <_vfiprintf_r+0x176>
 8009862:	9105      	str	r1, [sp, #20]
 8009864:	e7c3      	b.n	80097ee <_vfiprintf_r+0x176>
 8009866:	fb0c 2101 	mla	r1, ip, r1, r2
 800986a:	4604      	mov	r4, r0
 800986c:	2301      	movs	r3, #1
 800986e:	e7f0      	b.n	8009852 <_vfiprintf_r+0x1da>
 8009870:	ab03      	add	r3, sp, #12
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	462a      	mov	r2, r5
 8009876:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <_vfiprintf_r+0x258>)
 8009878:	a904      	add	r1, sp, #16
 800987a:	4630      	mov	r0, r6
 800987c:	f7fc f84c 	bl	8005918 <_printf_float>
 8009880:	4607      	mov	r7, r0
 8009882:	1c78      	adds	r0, r7, #1
 8009884:	d1d6      	bne.n	8009834 <_vfiprintf_r+0x1bc>
 8009886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009888:	07d9      	lsls	r1, r3, #31
 800988a:	d405      	bmi.n	8009898 <_vfiprintf_r+0x220>
 800988c:	89ab      	ldrh	r3, [r5, #12]
 800988e:	059a      	lsls	r2, r3, #22
 8009890:	d402      	bmi.n	8009898 <_vfiprintf_r+0x220>
 8009892:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009894:	f000 faa1 	bl	8009dda <__retarget_lock_release_recursive>
 8009898:	89ab      	ldrh	r3, [r5, #12]
 800989a:	065b      	lsls	r3, r3, #25
 800989c:	f53f af12 	bmi.w	80096c4 <_vfiprintf_r+0x4c>
 80098a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098a2:	e711      	b.n	80096c8 <_vfiprintf_r+0x50>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <_vfiprintf_r+0x258>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7fc fad6 	bl	8005e60 <_printf_i>
 80098b4:	e7e4      	b.n	8009880 <_vfiprintf_r+0x208>
 80098b6:	bf00      	nop
 80098b8:	0800a56c 	.word	0x0800a56c
 80098bc:	0800a58c 	.word	0x0800a58c
 80098c0:	0800a54c 	.word	0x0800a54c
 80098c4:	0800a4fc 	.word	0x0800a4fc
 80098c8:	0800a506 	.word	0x0800a506
 80098cc:	08005919 	.word	0x08005919
 80098d0:	08009655 	.word	0x08009655
 80098d4:	0800a502 	.word	0x0800a502

080098d8 <__swbuf_r>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	460e      	mov	r6, r1
 80098dc:	4614      	mov	r4, r2
 80098de:	4605      	mov	r5, r0
 80098e0:	b118      	cbz	r0, 80098ea <__swbuf_r+0x12>
 80098e2:	6983      	ldr	r3, [r0, #24]
 80098e4:	b90b      	cbnz	r3, 80098ea <__swbuf_r+0x12>
 80098e6:	f000 f9d9 	bl	8009c9c <__sinit>
 80098ea:	4b21      	ldr	r3, [pc, #132]	; (8009970 <__swbuf_r+0x98>)
 80098ec:	429c      	cmp	r4, r3
 80098ee:	d12b      	bne.n	8009948 <__swbuf_r+0x70>
 80098f0:	686c      	ldr	r4, [r5, #4]
 80098f2:	69a3      	ldr	r3, [r4, #24]
 80098f4:	60a3      	str	r3, [r4, #8]
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	071a      	lsls	r2, r3, #28
 80098fa:	d52f      	bpl.n	800995c <__swbuf_r+0x84>
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	b36b      	cbz	r3, 800995c <__swbuf_r+0x84>
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	6820      	ldr	r0, [r4, #0]
 8009904:	1ac0      	subs	r0, r0, r3
 8009906:	6963      	ldr	r3, [r4, #20]
 8009908:	b2f6      	uxtb	r6, r6
 800990a:	4283      	cmp	r3, r0
 800990c:	4637      	mov	r7, r6
 800990e:	dc04      	bgt.n	800991a <__swbuf_r+0x42>
 8009910:	4621      	mov	r1, r4
 8009912:	4628      	mov	r0, r5
 8009914:	f000 f92e 	bl	8009b74 <_fflush_r>
 8009918:	bb30      	cbnz	r0, 8009968 <__swbuf_r+0x90>
 800991a:	68a3      	ldr	r3, [r4, #8]
 800991c:	3b01      	subs	r3, #1
 800991e:	60a3      	str	r3, [r4, #8]
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	6022      	str	r2, [r4, #0]
 8009926:	701e      	strb	r6, [r3, #0]
 8009928:	6963      	ldr	r3, [r4, #20]
 800992a:	3001      	adds	r0, #1
 800992c:	4283      	cmp	r3, r0
 800992e:	d004      	beq.n	800993a <__swbuf_r+0x62>
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	07db      	lsls	r3, r3, #31
 8009934:	d506      	bpl.n	8009944 <__swbuf_r+0x6c>
 8009936:	2e0a      	cmp	r6, #10
 8009938:	d104      	bne.n	8009944 <__swbuf_r+0x6c>
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f000 f919 	bl	8009b74 <_fflush_r>
 8009942:	b988      	cbnz	r0, 8009968 <__swbuf_r+0x90>
 8009944:	4638      	mov	r0, r7
 8009946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009948:	4b0a      	ldr	r3, [pc, #40]	; (8009974 <__swbuf_r+0x9c>)
 800994a:	429c      	cmp	r4, r3
 800994c:	d101      	bne.n	8009952 <__swbuf_r+0x7a>
 800994e:	68ac      	ldr	r4, [r5, #8]
 8009950:	e7cf      	b.n	80098f2 <__swbuf_r+0x1a>
 8009952:	4b09      	ldr	r3, [pc, #36]	; (8009978 <__swbuf_r+0xa0>)
 8009954:	429c      	cmp	r4, r3
 8009956:	bf08      	it	eq
 8009958:	68ec      	ldreq	r4, [r5, #12]
 800995a:	e7ca      	b.n	80098f2 <__swbuf_r+0x1a>
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f000 f80c 	bl	800997c <__swsetup_r>
 8009964:	2800      	cmp	r0, #0
 8009966:	d0cb      	beq.n	8009900 <__swbuf_r+0x28>
 8009968:	f04f 37ff 	mov.w	r7, #4294967295
 800996c:	e7ea      	b.n	8009944 <__swbuf_r+0x6c>
 800996e:	bf00      	nop
 8009970:	0800a56c 	.word	0x0800a56c
 8009974:	0800a58c 	.word	0x0800a58c
 8009978:	0800a54c 	.word	0x0800a54c

0800997c <__swsetup_r>:
 800997c:	4b32      	ldr	r3, [pc, #200]	; (8009a48 <__swsetup_r+0xcc>)
 800997e:	b570      	push	{r4, r5, r6, lr}
 8009980:	681d      	ldr	r5, [r3, #0]
 8009982:	4606      	mov	r6, r0
 8009984:	460c      	mov	r4, r1
 8009986:	b125      	cbz	r5, 8009992 <__swsetup_r+0x16>
 8009988:	69ab      	ldr	r3, [r5, #24]
 800998a:	b913      	cbnz	r3, 8009992 <__swsetup_r+0x16>
 800998c:	4628      	mov	r0, r5
 800998e:	f000 f985 	bl	8009c9c <__sinit>
 8009992:	4b2e      	ldr	r3, [pc, #184]	; (8009a4c <__swsetup_r+0xd0>)
 8009994:	429c      	cmp	r4, r3
 8009996:	d10f      	bne.n	80099b8 <__swsetup_r+0x3c>
 8009998:	686c      	ldr	r4, [r5, #4]
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099a0:	0719      	lsls	r1, r3, #28
 80099a2:	d42c      	bmi.n	80099fe <__swsetup_r+0x82>
 80099a4:	06dd      	lsls	r5, r3, #27
 80099a6:	d411      	bmi.n	80099cc <__swsetup_r+0x50>
 80099a8:	2309      	movs	r3, #9
 80099aa:	6033      	str	r3, [r6, #0]
 80099ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295
 80099b6:	e03e      	b.n	8009a36 <__swsetup_r+0xba>
 80099b8:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <__swsetup_r+0xd4>)
 80099ba:	429c      	cmp	r4, r3
 80099bc:	d101      	bne.n	80099c2 <__swsetup_r+0x46>
 80099be:	68ac      	ldr	r4, [r5, #8]
 80099c0:	e7eb      	b.n	800999a <__swsetup_r+0x1e>
 80099c2:	4b24      	ldr	r3, [pc, #144]	; (8009a54 <__swsetup_r+0xd8>)
 80099c4:	429c      	cmp	r4, r3
 80099c6:	bf08      	it	eq
 80099c8:	68ec      	ldreq	r4, [r5, #12]
 80099ca:	e7e6      	b.n	800999a <__swsetup_r+0x1e>
 80099cc:	0758      	lsls	r0, r3, #29
 80099ce:	d512      	bpl.n	80099f6 <__swsetup_r+0x7a>
 80099d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099d2:	b141      	cbz	r1, 80099e6 <__swsetup_r+0x6a>
 80099d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099d8:	4299      	cmp	r1, r3
 80099da:	d002      	beq.n	80099e2 <__swsetup_r+0x66>
 80099dc:	4630      	mov	r0, r6
 80099de:	f7ff fb27 	bl	8009030 <_free_r>
 80099e2:	2300      	movs	r3, #0
 80099e4:	6363      	str	r3, [r4, #52]	; 0x34
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099ec:	81a3      	strh	r3, [r4, #12]
 80099ee:	2300      	movs	r3, #0
 80099f0:	6063      	str	r3, [r4, #4]
 80099f2:	6923      	ldr	r3, [r4, #16]
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	f043 0308 	orr.w	r3, r3, #8
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	b94b      	cbnz	r3, 8009a16 <__swsetup_r+0x9a>
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a0c:	d003      	beq.n	8009a16 <__swsetup_r+0x9a>
 8009a0e:	4621      	mov	r1, r4
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 fa09 	bl	8009e28 <__smakebuf_r>
 8009a16:	89a0      	ldrh	r0, [r4, #12]
 8009a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a1c:	f010 0301 	ands.w	r3, r0, #1
 8009a20:	d00a      	beq.n	8009a38 <__swsetup_r+0xbc>
 8009a22:	2300      	movs	r3, #0
 8009a24:	60a3      	str	r3, [r4, #8]
 8009a26:	6963      	ldr	r3, [r4, #20]
 8009a28:	425b      	negs	r3, r3
 8009a2a:	61a3      	str	r3, [r4, #24]
 8009a2c:	6923      	ldr	r3, [r4, #16]
 8009a2e:	b943      	cbnz	r3, 8009a42 <__swsetup_r+0xc6>
 8009a30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a34:	d1ba      	bne.n	80099ac <__swsetup_r+0x30>
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	0781      	lsls	r1, r0, #30
 8009a3a:	bf58      	it	pl
 8009a3c:	6963      	ldrpl	r3, [r4, #20]
 8009a3e:	60a3      	str	r3, [r4, #8]
 8009a40:	e7f4      	b.n	8009a2c <__swsetup_r+0xb0>
 8009a42:	2000      	movs	r0, #0
 8009a44:	e7f7      	b.n	8009a36 <__swsetup_r+0xba>
 8009a46:	bf00      	nop
 8009a48:	2000000c 	.word	0x2000000c
 8009a4c:	0800a56c 	.word	0x0800a56c
 8009a50:	0800a58c 	.word	0x0800a58c
 8009a54:	0800a54c 	.word	0x0800a54c

08009a58 <abort>:
 8009a58:	b508      	push	{r3, lr}
 8009a5a:	2006      	movs	r0, #6
 8009a5c:	f000 fa54 	bl	8009f08 <raise>
 8009a60:	2001      	movs	r0, #1
 8009a62:	f7f9 f9b3 	bl	8002dcc <_exit>
	...

08009a68 <__sflush_r>:
 8009a68:	898a      	ldrh	r2, [r1, #12]
 8009a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6e:	4605      	mov	r5, r0
 8009a70:	0710      	lsls	r0, r2, #28
 8009a72:	460c      	mov	r4, r1
 8009a74:	d458      	bmi.n	8009b28 <__sflush_r+0xc0>
 8009a76:	684b      	ldr	r3, [r1, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	dc05      	bgt.n	8009a88 <__sflush_r+0x20>
 8009a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	dc02      	bgt.n	8009a88 <__sflush_r+0x20>
 8009a82:	2000      	movs	r0, #0
 8009a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a8a:	2e00      	cmp	r6, #0
 8009a8c:	d0f9      	beq.n	8009a82 <__sflush_r+0x1a>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a94:	682f      	ldr	r7, [r5, #0]
 8009a96:	602b      	str	r3, [r5, #0]
 8009a98:	d032      	beq.n	8009b00 <__sflush_r+0x98>
 8009a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	075a      	lsls	r2, r3, #29
 8009aa0:	d505      	bpl.n	8009aae <__sflush_r+0x46>
 8009aa2:	6863      	ldr	r3, [r4, #4]
 8009aa4:	1ac0      	subs	r0, r0, r3
 8009aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009aa8:	b10b      	cbz	r3, 8009aae <__sflush_r+0x46>
 8009aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009aac:	1ac0      	subs	r0, r0, r3
 8009aae:	2300      	movs	r3, #0
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ab4:	6a21      	ldr	r1, [r4, #32]
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	47b0      	blx	r6
 8009aba:	1c43      	adds	r3, r0, #1
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	d106      	bne.n	8009ace <__sflush_r+0x66>
 8009ac0:	6829      	ldr	r1, [r5, #0]
 8009ac2:	291d      	cmp	r1, #29
 8009ac4:	d82c      	bhi.n	8009b20 <__sflush_r+0xb8>
 8009ac6:	4a2a      	ldr	r2, [pc, #168]	; (8009b70 <__sflush_r+0x108>)
 8009ac8:	40ca      	lsrs	r2, r1
 8009aca:	07d6      	lsls	r6, r2, #31
 8009acc:	d528      	bpl.n	8009b20 <__sflush_r+0xb8>
 8009ace:	2200      	movs	r2, #0
 8009ad0:	6062      	str	r2, [r4, #4]
 8009ad2:	04d9      	lsls	r1, r3, #19
 8009ad4:	6922      	ldr	r2, [r4, #16]
 8009ad6:	6022      	str	r2, [r4, #0]
 8009ad8:	d504      	bpl.n	8009ae4 <__sflush_r+0x7c>
 8009ada:	1c42      	adds	r2, r0, #1
 8009adc:	d101      	bne.n	8009ae2 <__sflush_r+0x7a>
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	b903      	cbnz	r3, 8009ae4 <__sflush_r+0x7c>
 8009ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ae6:	602f      	str	r7, [r5, #0]
 8009ae8:	2900      	cmp	r1, #0
 8009aea:	d0ca      	beq.n	8009a82 <__sflush_r+0x1a>
 8009aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009af0:	4299      	cmp	r1, r3
 8009af2:	d002      	beq.n	8009afa <__sflush_r+0x92>
 8009af4:	4628      	mov	r0, r5
 8009af6:	f7ff fa9b 	bl	8009030 <_free_r>
 8009afa:	2000      	movs	r0, #0
 8009afc:	6360      	str	r0, [r4, #52]	; 0x34
 8009afe:	e7c1      	b.n	8009a84 <__sflush_r+0x1c>
 8009b00:	6a21      	ldr	r1, [r4, #32]
 8009b02:	2301      	movs	r3, #1
 8009b04:	4628      	mov	r0, r5
 8009b06:	47b0      	blx	r6
 8009b08:	1c41      	adds	r1, r0, #1
 8009b0a:	d1c7      	bne.n	8009a9c <__sflush_r+0x34>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0c4      	beq.n	8009a9c <__sflush_r+0x34>
 8009b12:	2b1d      	cmp	r3, #29
 8009b14:	d001      	beq.n	8009b1a <__sflush_r+0xb2>
 8009b16:	2b16      	cmp	r3, #22
 8009b18:	d101      	bne.n	8009b1e <__sflush_r+0xb6>
 8009b1a:	602f      	str	r7, [r5, #0]
 8009b1c:	e7b1      	b.n	8009a82 <__sflush_r+0x1a>
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b24:	81a3      	strh	r3, [r4, #12]
 8009b26:	e7ad      	b.n	8009a84 <__sflush_r+0x1c>
 8009b28:	690f      	ldr	r7, [r1, #16]
 8009b2a:	2f00      	cmp	r7, #0
 8009b2c:	d0a9      	beq.n	8009a82 <__sflush_r+0x1a>
 8009b2e:	0793      	lsls	r3, r2, #30
 8009b30:	680e      	ldr	r6, [r1, #0]
 8009b32:	bf08      	it	eq
 8009b34:	694b      	ldreq	r3, [r1, #20]
 8009b36:	600f      	str	r7, [r1, #0]
 8009b38:	bf18      	it	ne
 8009b3a:	2300      	movne	r3, #0
 8009b3c:	eba6 0807 	sub.w	r8, r6, r7
 8009b40:	608b      	str	r3, [r1, #8]
 8009b42:	f1b8 0f00 	cmp.w	r8, #0
 8009b46:	dd9c      	ble.n	8009a82 <__sflush_r+0x1a>
 8009b48:	6a21      	ldr	r1, [r4, #32]
 8009b4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b4c:	4643      	mov	r3, r8
 8009b4e:	463a      	mov	r2, r7
 8009b50:	4628      	mov	r0, r5
 8009b52:	47b0      	blx	r6
 8009b54:	2800      	cmp	r0, #0
 8009b56:	dc06      	bgt.n	8009b66 <__sflush_r+0xfe>
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b5e:	81a3      	strh	r3, [r4, #12]
 8009b60:	f04f 30ff 	mov.w	r0, #4294967295
 8009b64:	e78e      	b.n	8009a84 <__sflush_r+0x1c>
 8009b66:	4407      	add	r7, r0
 8009b68:	eba8 0800 	sub.w	r8, r8, r0
 8009b6c:	e7e9      	b.n	8009b42 <__sflush_r+0xda>
 8009b6e:	bf00      	nop
 8009b70:	20400001 	.word	0x20400001

08009b74 <_fflush_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	690b      	ldr	r3, [r1, #16]
 8009b78:	4605      	mov	r5, r0
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	b913      	cbnz	r3, 8009b84 <_fflush_r+0x10>
 8009b7e:	2500      	movs	r5, #0
 8009b80:	4628      	mov	r0, r5
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	b118      	cbz	r0, 8009b8e <_fflush_r+0x1a>
 8009b86:	6983      	ldr	r3, [r0, #24]
 8009b88:	b90b      	cbnz	r3, 8009b8e <_fflush_r+0x1a>
 8009b8a:	f000 f887 	bl	8009c9c <__sinit>
 8009b8e:	4b14      	ldr	r3, [pc, #80]	; (8009be0 <_fflush_r+0x6c>)
 8009b90:	429c      	cmp	r4, r3
 8009b92:	d11b      	bne.n	8009bcc <_fflush_r+0x58>
 8009b94:	686c      	ldr	r4, [r5, #4]
 8009b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0ef      	beq.n	8009b7e <_fflush_r+0xa>
 8009b9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ba0:	07d0      	lsls	r0, r2, #31
 8009ba2:	d404      	bmi.n	8009bae <_fflush_r+0x3a>
 8009ba4:	0599      	lsls	r1, r3, #22
 8009ba6:	d402      	bmi.n	8009bae <_fflush_r+0x3a>
 8009ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009baa:	f000 f915 	bl	8009dd8 <__retarget_lock_acquire_recursive>
 8009bae:	4628      	mov	r0, r5
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	f7ff ff59 	bl	8009a68 <__sflush_r>
 8009bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bb8:	07da      	lsls	r2, r3, #31
 8009bba:	4605      	mov	r5, r0
 8009bbc:	d4e0      	bmi.n	8009b80 <_fflush_r+0xc>
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	059b      	lsls	r3, r3, #22
 8009bc2:	d4dd      	bmi.n	8009b80 <_fflush_r+0xc>
 8009bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bc6:	f000 f908 	bl	8009dda <__retarget_lock_release_recursive>
 8009bca:	e7d9      	b.n	8009b80 <_fflush_r+0xc>
 8009bcc:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <_fflush_r+0x70>)
 8009bce:	429c      	cmp	r4, r3
 8009bd0:	d101      	bne.n	8009bd6 <_fflush_r+0x62>
 8009bd2:	68ac      	ldr	r4, [r5, #8]
 8009bd4:	e7df      	b.n	8009b96 <_fflush_r+0x22>
 8009bd6:	4b04      	ldr	r3, [pc, #16]	; (8009be8 <_fflush_r+0x74>)
 8009bd8:	429c      	cmp	r4, r3
 8009bda:	bf08      	it	eq
 8009bdc:	68ec      	ldreq	r4, [r5, #12]
 8009bde:	e7da      	b.n	8009b96 <_fflush_r+0x22>
 8009be0:	0800a56c 	.word	0x0800a56c
 8009be4:	0800a58c 	.word	0x0800a58c
 8009be8:	0800a54c 	.word	0x0800a54c

08009bec <std>:
 8009bec:	2300      	movs	r3, #0
 8009bee:	b510      	push	{r4, lr}
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8009bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bfa:	6083      	str	r3, [r0, #8]
 8009bfc:	8181      	strh	r1, [r0, #12]
 8009bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8009c00:	81c2      	strh	r2, [r0, #14]
 8009c02:	6183      	str	r3, [r0, #24]
 8009c04:	4619      	mov	r1, r3
 8009c06:	2208      	movs	r2, #8
 8009c08:	305c      	adds	r0, #92	; 0x5c
 8009c0a:	f7fb fddd 	bl	80057c8 <memset>
 8009c0e:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <std+0x38>)
 8009c10:	6263      	str	r3, [r4, #36]	; 0x24
 8009c12:	4b05      	ldr	r3, [pc, #20]	; (8009c28 <std+0x3c>)
 8009c14:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c16:	4b05      	ldr	r3, [pc, #20]	; (8009c2c <std+0x40>)
 8009c18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c1a:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <std+0x44>)
 8009c1c:	6224      	str	r4, [r4, #32]
 8009c1e:	6323      	str	r3, [r4, #48]	; 0x30
 8009c20:	bd10      	pop	{r4, pc}
 8009c22:	bf00      	nop
 8009c24:	08009f41 	.word	0x08009f41
 8009c28:	08009f63 	.word	0x08009f63
 8009c2c:	08009f9b 	.word	0x08009f9b
 8009c30:	08009fbf 	.word	0x08009fbf

08009c34 <_cleanup_r>:
 8009c34:	4901      	ldr	r1, [pc, #4]	; (8009c3c <_cleanup_r+0x8>)
 8009c36:	f000 b8af 	b.w	8009d98 <_fwalk_reent>
 8009c3a:	bf00      	nop
 8009c3c:	08009b75 	.word	0x08009b75

08009c40 <__sfmoreglue>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	2268      	movs	r2, #104	; 0x68
 8009c44:	1e4d      	subs	r5, r1, #1
 8009c46:	4355      	muls	r5, r2
 8009c48:	460e      	mov	r6, r1
 8009c4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c4e:	f7ff fa5b 	bl	8009108 <_malloc_r>
 8009c52:	4604      	mov	r4, r0
 8009c54:	b140      	cbz	r0, 8009c68 <__sfmoreglue+0x28>
 8009c56:	2100      	movs	r1, #0
 8009c58:	e9c0 1600 	strd	r1, r6, [r0]
 8009c5c:	300c      	adds	r0, #12
 8009c5e:	60a0      	str	r0, [r4, #8]
 8009c60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c64:	f7fb fdb0 	bl	80057c8 <memset>
 8009c68:	4620      	mov	r0, r4
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}

08009c6c <__sfp_lock_acquire>:
 8009c6c:	4801      	ldr	r0, [pc, #4]	; (8009c74 <__sfp_lock_acquire+0x8>)
 8009c6e:	f000 b8b3 	b.w	8009dd8 <__retarget_lock_acquire_recursive>
 8009c72:	bf00      	nop
 8009c74:	200002c1 	.word	0x200002c1

08009c78 <__sfp_lock_release>:
 8009c78:	4801      	ldr	r0, [pc, #4]	; (8009c80 <__sfp_lock_release+0x8>)
 8009c7a:	f000 b8ae 	b.w	8009dda <__retarget_lock_release_recursive>
 8009c7e:	bf00      	nop
 8009c80:	200002c1 	.word	0x200002c1

08009c84 <__sinit_lock_acquire>:
 8009c84:	4801      	ldr	r0, [pc, #4]	; (8009c8c <__sinit_lock_acquire+0x8>)
 8009c86:	f000 b8a7 	b.w	8009dd8 <__retarget_lock_acquire_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	200002c2 	.word	0x200002c2

08009c90 <__sinit_lock_release>:
 8009c90:	4801      	ldr	r0, [pc, #4]	; (8009c98 <__sinit_lock_release+0x8>)
 8009c92:	f000 b8a2 	b.w	8009dda <__retarget_lock_release_recursive>
 8009c96:	bf00      	nop
 8009c98:	200002c2 	.word	0x200002c2

08009c9c <__sinit>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	f7ff fff0 	bl	8009c84 <__sinit_lock_acquire>
 8009ca4:	69a3      	ldr	r3, [r4, #24]
 8009ca6:	b11b      	cbz	r3, 8009cb0 <__sinit+0x14>
 8009ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cac:	f7ff bff0 	b.w	8009c90 <__sinit_lock_release>
 8009cb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cb4:	6523      	str	r3, [r4, #80]	; 0x50
 8009cb6:	4b13      	ldr	r3, [pc, #76]	; (8009d04 <__sinit+0x68>)
 8009cb8:	4a13      	ldr	r2, [pc, #76]	; (8009d08 <__sinit+0x6c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	bf04      	itt	eq
 8009cc2:	2301      	moveq	r3, #1
 8009cc4:	61a3      	streq	r3, [r4, #24]
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 f820 	bl	8009d0c <__sfp>
 8009ccc:	6060      	str	r0, [r4, #4]
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f000 f81c 	bl	8009d0c <__sfp>
 8009cd4:	60a0      	str	r0, [r4, #8]
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 f818 	bl	8009d0c <__sfp>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	60e0      	str	r0, [r4, #12]
 8009ce0:	2104      	movs	r1, #4
 8009ce2:	6860      	ldr	r0, [r4, #4]
 8009ce4:	f7ff ff82 	bl	8009bec <std>
 8009ce8:	68a0      	ldr	r0, [r4, #8]
 8009cea:	2201      	movs	r2, #1
 8009cec:	2109      	movs	r1, #9
 8009cee:	f7ff ff7d 	bl	8009bec <std>
 8009cf2:	68e0      	ldr	r0, [r4, #12]
 8009cf4:	2202      	movs	r2, #2
 8009cf6:	2112      	movs	r1, #18
 8009cf8:	f7ff ff78 	bl	8009bec <std>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	61a3      	str	r3, [r4, #24]
 8009d00:	e7d2      	b.n	8009ca8 <__sinit+0xc>
 8009d02:	bf00      	nop
 8009d04:	0800a104 	.word	0x0800a104
 8009d08:	08009c35 	.word	0x08009c35

08009d0c <__sfp>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	4607      	mov	r7, r0
 8009d10:	f7ff ffac 	bl	8009c6c <__sfp_lock_acquire>
 8009d14:	4b1e      	ldr	r3, [pc, #120]	; (8009d90 <__sfp+0x84>)
 8009d16:	681e      	ldr	r6, [r3, #0]
 8009d18:	69b3      	ldr	r3, [r6, #24]
 8009d1a:	b913      	cbnz	r3, 8009d22 <__sfp+0x16>
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7ff ffbd 	bl	8009c9c <__sinit>
 8009d22:	3648      	adds	r6, #72	; 0x48
 8009d24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	d503      	bpl.n	8009d34 <__sfp+0x28>
 8009d2c:	6833      	ldr	r3, [r6, #0]
 8009d2e:	b30b      	cbz	r3, 8009d74 <__sfp+0x68>
 8009d30:	6836      	ldr	r6, [r6, #0]
 8009d32:	e7f7      	b.n	8009d24 <__sfp+0x18>
 8009d34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d38:	b9d5      	cbnz	r5, 8009d70 <__sfp+0x64>
 8009d3a:	4b16      	ldr	r3, [pc, #88]	; (8009d94 <__sfp+0x88>)
 8009d3c:	60e3      	str	r3, [r4, #12]
 8009d3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d42:	6665      	str	r5, [r4, #100]	; 0x64
 8009d44:	f000 f847 	bl	8009dd6 <__retarget_lock_init_recursive>
 8009d48:	f7ff ff96 	bl	8009c78 <__sfp_lock_release>
 8009d4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d54:	6025      	str	r5, [r4, #0]
 8009d56:	61a5      	str	r5, [r4, #24]
 8009d58:	2208      	movs	r2, #8
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d60:	f7fb fd32 	bl	80057c8 <memset>
 8009d64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d70:	3468      	adds	r4, #104	; 0x68
 8009d72:	e7d9      	b.n	8009d28 <__sfp+0x1c>
 8009d74:	2104      	movs	r1, #4
 8009d76:	4638      	mov	r0, r7
 8009d78:	f7ff ff62 	bl	8009c40 <__sfmoreglue>
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	6030      	str	r0, [r6, #0]
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d1d5      	bne.n	8009d30 <__sfp+0x24>
 8009d84:	f7ff ff78 	bl	8009c78 <__sfp_lock_release>
 8009d88:	230c      	movs	r3, #12
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	e7ee      	b.n	8009d6c <__sfp+0x60>
 8009d8e:	bf00      	nop
 8009d90:	0800a104 	.word	0x0800a104
 8009d94:	ffff0001 	.word	0xffff0001

08009d98 <_fwalk_reent>:
 8009d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d9c:	4606      	mov	r6, r0
 8009d9e:	4688      	mov	r8, r1
 8009da0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009da4:	2700      	movs	r7, #0
 8009da6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009daa:	f1b9 0901 	subs.w	r9, r9, #1
 8009dae:	d505      	bpl.n	8009dbc <_fwalk_reent+0x24>
 8009db0:	6824      	ldr	r4, [r4, #0]
 8009db2:	2c00      	cmp	r4, #0
 8009db4:	d1f7      	bne.n	8009da6 <_fwalk_reent+0xe>
 8009db6:	4638      	mov	r0, r7
 8009db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dbc:	89ab      	ldrh	r3, [r5, #12]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d907      	bls.n	8009dd2 <_fwalk_reent+0x3a>
 8009dc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	d003      	beq.n	8009dd2 <_fwalk_reent+0x3a>
 8009dca:	4629      	mov	r1, r5
 8009dcc:	4630      	mov	r0, r6
 8009dce:	47c0      	blx	r8
 8009dd0:	4307      	orrs	r7, r0
 8009dd2:	3568      	adds	r5, #104	; 0x68
 8009dd4:	e7e9      	b.n	8009daa <_fwalk_reent+0x12>

08009dd6 <__retarget_lock_init_recursive>:
 8009dd6:	4770      	bx	lr

08009dd8 <__retarget_lock_acquire_recursive>:
 8009dd8:	4770      	bx	lr

08009dda <__retarget_lock_release_recursive>:
 8009dda:	4770      	bx	lr

08009ddc <__swhatbuf_r>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	460e      	mov	r6, r1
 8009de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de4:	2900      	cmp	r1, #0
 8009de6:	b096      	sub	sp, #88	; 0x58
 8009de8:	4614      	mov	r4, r2
 8009dea:	461d      	mov	r5, r3
 8009dec:	da08      	bge.n	8009e00 <__swhatbuf_r+0x24>
 8009dee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	602a      	str	r2, [r5, #0]
 8009df6:	061a      	lsls	r2, r3, #24
 8009df8:	d410      	bmi.n	8009e1c <__swhatbuf_r+0x40>
 8009dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dfe:	e00e      	b.n	8009e1e <__swhatbuf_r+0x42>
 8009e00:	466a      	mov	r2, sp
 8009e02:	f000 f903 	bl	800a00c <_fstat_r>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	dbf1      	blt.n	8009dee <__swhatbuf_r+0x12>
 8009e0a:	9a01      	ldr	r2, [sp, #4]
 8009e0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e14:	425a      	negs	r2, r3
 8009e16:	415a      	adcs	r2, r3
 8009e18:	602a      	str	r2, [r5, #0]
 8009e1a:	e7ee      	b.n	8009dfa <__swhatbuf_r+0x1e>
 8009e1c:	2340      	movs	r3, #64	; 0x40
 8009e1e:	2000      	movs	r0, #0
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	b016      	add	sp, #88	; 0x58
 8009e24:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e28 <__smakebuf_r>:
 8009e28:	898b      	ldrh	r3, [r1, #12]
 8009e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e2c:	079d      	lsls	r5, r3, #30
 8009e2e:	4606      	mov	r6, r0
 8009e30:	460c      	mov	r4, r1
 8009e32:	d507      	bpl.n	8009e44 <__smakebuf_r+0x1c>
 8009e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	6123      	str	r3, [r4, #16]
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	6163      	str	r3, [r4, #20]
 8009e40:	b002      	add	sp, #8
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	ab01      	add	r3, sp, #4
 8009e46:	466a      	mov	r2, sp
 8009e48:	f7ff ffc8 	bl	8009ddc <__swhatbuf_r>
 8009e4c:	9900      	ldr	r1, [sp, #0]
 8009e4e:	4605      	mov	r5, r0
 8009e50:	4630      	mov	r0, r6
 8009e52:	f7ff f959 	bl	8009108 <_malloc_r>
 8009e56:	b948      	cbnz	r0, 8009e6c <__smakebuf_r+0x44>
 8009e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e5c:	059a      	lsls	r2, r3, #22
 8009e5e:	d4ef      	bmi.n	8009e40 <__smakebuf_r+0x18>
 8009e60:	f023 0303 	bic.w	r3, r3, #3
 8009e64:	f043 0302 	orr.w	r3, r3, #2
 8009e68:	81a3      	strh	r3, [r4, #12]
 8009e6a:	e7e3      	b.n	8009e34 <__smakebuf_r+0xc>
 8009e6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ea4 <__smakebuf_r+0x7c>)
 8009e6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	6020      	str	r0, [r4, #0]
 8009e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	9b00      	ldr	r3, [sp, #0]
 8009e7c:	6163      	str	r3, [r4, #20]
 8009e7e:	9b01      	ldr	r3, [sp, #4]
 8009e80:	6120      	str	r0, [r4, #16]
 8009e82:	b15b      	cbz	r3, 8009e9c <__smakebuf_r+0x74>
 8009e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f8d1 	bl	800a030 <_isatty_r>
 8009e8e:	b128      	cbz	r0, 8009e9c <__smakebuf_r+0x74>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f023 0303 	bic.w	r3, r3, #3
 8009e96:	f043 0301 	orr.w	r3, r3, #1
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	89a0      	ldrh	r0, [r4, #12]
 8009e9e:	4305      	orrs	r5, r0
 8009ea0:	81a5      	strh	r5, [r4, #12]
 8009ea2:	e7cd      	b.n	8009e40 <__smakebuf_r+0x18>
 8009ea4:	08009c35 	.word	0x08009c35

08009ea8 <_malloc_usable_size_r>:
 8009ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eac:	1f18      	subs	r0, r3, #4
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bfbc      	itt	lt
 8009eb2:	580b      	ldrlt	r3, [r1, r0]
 8009eb4:	18c0      	addlt	r0, r0, r3
 8009eb6:	4770      	bx	lr

08009eb8 <_raise_r>:
 8009eb8:	291f      	cmp	r1, #31
 8009eba:	b538      	push	{r3, r4, r5, lr}
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	d904      	bls.n	8009ecc <_raise_r+0x14>
 8009ec2:	2316      	movs	r3, #22
 8009ec4:	6003      	str	r3, [r0, #0]
 8009ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ece:	b112      	cbz	r2, 8009ed6 <_raise_r+0x1e>
 8009ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ed4:	b94b      	cbnz	r3, 8009eea <_raise_r+0x32>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 f830 	bl	8009f3c <_getpid_r>
 8009edc:	462a      	mov	r2, r5
 8009ede:	4601      	mov	r1, r0
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ee6:	f000 b817 	b.w	8009f18 <_kill_r>
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d00a      	beq.n	8009f04 <_raise_r+0x4c>
 8009eee:	1c59      	adds	r1, r3, #1
 8009ef0:	d103      	bne.n	8009efa <_raise_r+0x42>
 8009ef2:	2316      	movs	r3, #22
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	e7e7      	b.n	8009eca <_raise_r+0x12>
 8009efa:	2400      	movs	r4, #0
 8009efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f00:	4628      	mov	r0, r5
 8009f02:	4798      	blx	r3
 8009f04:	2000      	movs	r0, #0
 8009f06:	e7e0      	b.n	8009eca <_raise_r+0x12>

08009f08 <raise>:
 8009f08:	4b02      	ldr	r3, [pc, #8]	; (8009f14 <raise+0xc>)
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	f7ff bfd3 	b.w	8009eb8 <_raise_r>
 8009f12:	bf00      	nop
 8009f14:	2000000c 	.word	0x2000000c

08009f18 <_kill_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d07      	ldr	r5, [pc, #28]	; (8009f38 <_kill_r+0x20>)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4608      	mov	r0, r1
 8009f22:	4611      	mov	r1, r2
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	f7f8 ff41 	bl	8002dac <_kill>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	d102      	bne.n	8009f34 <_kill_r+0x1c>
 8009f2e:	682b      	ldr	r3, [r5, #0]
 8009f30:	b103      	cbz	r3, 8009f34 <_kill_r+0x1c>
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
 8009f36:	bf00      	nop
 8009f38:	200002bc 	.word	0x200002bc

08009f3c <_getpid_r>:
 8009f3c:	f7f8 bf2e 	b.w	8002d9c <_getpid>

08009f40 <__sread>:
 8009f40:	b510      	push	{r4, lr}
 8009f42:	460c      	mov	r4, r1
 8009f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f48:	f000 f894 	bl	800a074 <_read_r>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	bfab      	itete	ge
 8009f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f52:	89a3      	ldrhlt	r3, [r4, #12]
 8009f54:	181b      	addge	r3, r3, r0
 8009f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f5a:	bfac      	ite	ge
 8009f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f5e:	81a3      	strhlt	r3, [r4, #12]
 8009f60:	bd10      	pop	{r4, pc}

08009f62 <__swrite>:
 8009f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f66:	461f      	mov	r7, r3
 8009f68:	898b      	ldrh	r3, [r1, #12]
 8009f6a:	05db      	lsls	r3, r3, #23
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	4616      	mov	r6, r2
 8009f72:	d505      	bpl.n	8009f80 <__swrite+0x1e>
 8009f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f78:	2302      	movs	r3, #2
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f000 f868 	bl	800a050 <_lseek_r>
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f8a:	81a3      	strh	r3, [r4, #12]
 8009f8c:	4632      	mov	r2, r6
 8009f8e:	463b      	mov	r3, r7
 8009f90:	4628      	mov	r0, r5
 8009f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f96:	f000 b817 	b.w	8009fc8 <_write_r>

08009f9a <__sseek>:
 8009f9a:	b510      	push	{r4, lr}
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa2:	f000 f855 	bl	800a050 <_lseek_r>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	bf15      	itete	ne
 8009fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fb6:	81a3      	strheq	r3, [r4, #12]
 8009fb8:	bf18      	it	ne
 8009fba:	81a3      	strhne	r3, [r4, #12]
 8009fbc:	bd10      	pop	{r4, pc}

08009fbe <__sclose>:
 8009fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc2:	f000 b813 	b.w	8009fec <_close_r>
	...

08009fc8 <_write_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d07      	ldr	r5, [pc, #28]	; (8009fe8 <_write_r+0x20>)
 8009fcc:	4604      	mov	r4, r0
 8009fce:	4608      	mov	r0, r1
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	602a      	str	r2, [r5, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f7f8 ff1f 	bl	8002e1a <_write>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_write_r+0x1e>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_write_r+0x1e>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	200002bc 	.word	0x200002bc

08009fec <_close_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d06      	ldr	r5, [pc, #24]	; (800a008 <_close_r+0x1c>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	602b      	str	r3, [r5, #0]
 8009ff8:	f7f8 ff2b 	bl	8002e52 <_close>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d102      	bne.n	800a006 <_close_r+0x1a>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	b103      	cbz	r3, 800a006 <_close_r+0x1a>
 800a004:	6023      	str	r3, [r4, #0]
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	200002bc 	.word	0x200002bc

0800a00c <_fstat_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4d07      	ldr	r5, [pc, #28]	; (800a02c <_fstat_r+0x20>)
 800a010:	2300      	movs	r3, #0
 800a012:	4604      	mov	r4, r0
 800a014:	4608      	mov	r0, r1
 800a016:	4611      	mov	r1, r2
 800a018:	602b      	str	r3, [r5, #0]
 800a01a:	f7f8 ff26 	bl	8002e6a <_fstat>
 800a01e:	1c43      	adds	r3, r0, #1
 800a020:	d102      	bne.n	800a028 <_fstat_r+0x1c>
 800a022:	682b      	ldr	r3, [r5, #0]
 800a024:	b103      	cbz	r3, 800a028 <_fstat_r+0x1c>
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	bd38      	pop	{r3, r4, r5, pc}
 800a02a:	bf00      	nop
 800a02c:	200002bc 	.word	0x200002bc

0800a030 <_isatty_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4d06      	ldr	r5, [pc, #24]	; (800a04c <_isatty_r+0x1c>)
 800a034:	2300      	movs	r3, #0
 800a036:	4604      	mov	r4, r0
 800a038:	4608      	mov	r0, r1
 800a03a:	602b      	str	r3, [r5, #0]
 800a03c:	f7f8 ff25 	bl	8002e8a <_isatty>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	d102      	bne.n	800a04a <_isatty_r+0x1a>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	b103      	cbz	r3, 800a04a <_isatty_r+0x1a>
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	bd38      	pop	{r3, r4, r5, pc}
 800a04c:	200002bc 	.word	0x200002bc

0800a050 <_lseek_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4d07      	ldr	r5, [pc, #28]	; (800a070 <_lseek_r+0x20>)
 800a054:	4604      	mov	r4, r0
 800a056:	4608      	mov	r0, r1
 800a058:	4611      	mov	r1, r2
 800a05a:	2200      	movs	r2, #0
 800a05c:	602a      	str	r2, [r5, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	f7f8 ff1e 	bl	8002ea0 <_lseek>
 800a064:	1c43      	adds	r3, r0, #1
 800a066:	d102      	bne.n	800a06e <_lseek_r+0x1e>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	b103      	cbz	r3, 800a06e <_lseek_r+0x1e>
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	200002bc 	.word	0x200002bc

0800a074 <_read_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d07      	ldr	r5, [pc, #28]	; (800a094 <_read_r+0x20>)
 800a078:	4604      	mov	r4, r0
 800a07a:	4608      	mov	r0, r1
 800a07c:	4611      	mov	r1, r2
 800a07e:	2200      	movs	r2, #0
 800a080:	602a      	str	r2, [r5, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	f7f8 feac 	bl	8002de0 <_read>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_read_r+0x1e>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_read_r+0x1e>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	200002bc 	.word	0x200002bc

0800a098 <_init>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	bf00      	nop
 800a09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09e:	bc08      	pop	{r3}
 800a0a0:	469e      	mov	lr, r3
 800a0a2:	4770      	bx	lr

0800a0a4 <_fini>:
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	bf00      	nop
 800a0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0aa:	bc08      	pop	{r3}
 800a0ac:	469e      	mov	lr, r3
 800a0ae:	4770      	bx	lr
